{
  "hash": "8a0c352f2e06dbe49ba4d89fa2889eca",
  "result": {
    "engine": "jupyter",
    "markdown": "# Lab: Pandas\n\nLast week we loaded data using [`pandas`](https://pandas.pydata.org/)' `read.csv()` method, but Pandas can do way more than that. Pandas is an essential library for data science, as it provides the data structures (nameley, `series` -1D- and `data frames` -2D) and operations for manipulating tabular data. \n\nIn this unit's labs we will be using `pandas` to read in, process and explore data (this notebook); create (basic) visualisations capabilities (@sec-pandas-datavis) as well as transforming data (@sec-pandas-transforming-data). To do so, we will be using a dataset about _\"The Office\"_.\n\n## Dataset\n\n[_The Office_](https://www.imdb.com/title/tt0386676/?ref_=ttep_ov) is a humoristic TV series originally created in 2001 by Ricky Gervais and Stephen Merchant that has received several adaptations. The dataset that we will be using contains information (i.e., title, date and ratings from [IMBDB](https://www.imdb.com/title/tt0386676/?ref_=ttep_ov)) about every episode of the 9 seaons of the very successful USA's adaptation aired between 2005 and 2013.\n\n\n::: aside\n![_The Office_ promotional poster](img/the_office.png){width=400}\n:::\n\nThe dataset is stored in a `csv` file that has the following columns: `season`, `episode`, `title`, `imdb_rating`, `total_votes`, `air_date`.\n\n\n## Starting\n\nTo work with the dataset we will need to _import_ pandas so we can use every feature provided by the library, as well as loading the dataset stored in the `office_ratings.csv`.\n\n::: {#cell-1 .cell execution_count=1}\n``` {.python .cell-code}\n# These two lines are added so that not all the warnings are rendered in the cell. \n# We do this not to confuse you during your learning journey with some of the warnings but \n# normally you would want them turned on since they can tell you something about things that might not be working as expected.\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n::: {#cell-2 .cell execution_count=2}\n``` {.python .cell-code}\n# this following import will always be needed whenever you want to work with Pandas.\nimport pandas as pd\n\ndf = pd.read_csv('data/raw/office_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {#cell-3 .cell execution_count=3}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 188 entries, 0 to 187\nData columns (total 6 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   season       188 non-null    int64  \n 1   episode      188 non-null    int64  \n 2   title        188 non-null    object \n 3   imdb_rating  188 non-null    float64\n 4   total_votes  188 non-null    int64  \n 5   air_date     188 non-null    object \ndtypes: float64(1), int64(3), object(2)\nmemory usage: 8.9+ KB\n```\n:::\n:::\n\n\n## Help!\n\nPython has inbuilt documentation. To access this add a `?` before an object or method.\n\n::: callout-note\n\nThe output of the help function has been omitted in the handbook. Please run the cells in your notebook to read the different outputs\n\n:::\n\nFor example, our dataframe\n\n::: {#cell-5 .cell execution_count=4}\n``` {.python .cell-code}\n?df\n```\n:::\n\n\nor the `dtypes` property\n\n::: callout-tip\n\nProperties of object are values associated with the object and are not called with a `()` at the end.\n\n:::\n\n::: {#cell-7 .cell execution_count=5}\n``` {.python .cell-code}\n?df.dtypes\n```\n:::\n\n\nThe `info` method for dataframes.\n\n::: {#cell-9 .cell execution_count=6}\n``` {.python .cell-code}\n?df.info\n```\n:::\n\n\nIf you would like to get help in-line like the examples above, that can give a very long help message that might not be always convenient. If you like, you can try to get the help for this following function like this:\n\n> ?pd.read_csv\n\nHowever, the below will be quite long -- it provides you the various arguments (options) you can use with the method. \n\nInstead of this approach, a much better way to get help is to refer to the documentation and the API of the library that you are using. For instance, for `read_csv()`, this page is much more useful -- https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html \n\nWe recommend that you use a search engine very frequently.\n\n::: {#cell-11 .cell execution_count=7}\n``` {.python .cell-code}\n?pd.read_csv\n```\n:::\n\n\nThe Pandas documentation is rather good. Relevent to our below work is:\n\n* [What kind of data does pandas handle?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)\n* [How to calculate summary statistics?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)\n* [How to create plots in pandas?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/04_plotting.html#min-tut-04-plotting)\n* [How to handle time series data with ease?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/09_timeseries.html#min-tut-09-timeseries)\n\nI also found [a rather nice series of lessons a kind person put together](https://bitbucket.org/hrojas/learn-pandas/src/master/). There are lots of online tutorials which will help you.\n\n## Structure\n\nIn @sec-data-types we introduced Python's data types as well as how to use the function `type()` to retrieve an object's data type. Pandas expands python's data types by creating a new one called `data frame` \n\n::: aside\n\nDo you remember what are Python's data types? You can refer to @sec-data-types for a refresher and to know more about them.\n\n:::\n\n::: callout-tip\n\n### Data frames\n\nData frames are 2-dimensional data structures that store information in columns and rows, very much like data is stored in a spreadsheet or a database. Typically, every column will contain variables (or sometimes called attributes) whereas every row represents an observation. This is known as wide data frames, as opposed to long data frames.\n\nIn pandas, every column has a name and rows can be named, too. \n\n:::\n\nSo let's check the what our newly created object's (`df`) data type:\n\n::: {#cell-15 .cell execution_count=8}\n``` {.python .cell-code}\ntype(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nUnsurprisingly, `df` is a `DataFrame`` object, provided by pandas.\n\nThe `DataFrame` object has lots of built in _methods_ and _attributes_.\n\nThe `info` method gives us information about datatypes, dimensions and the presence of null values in our dataframe. Let's see how can we use it and what information is returned:\n\n::: {#cell-17 .cell execution_count=9}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 188 entries, 0 to 187\nData columns (total 6 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   season       188 non-null    int64  \n 1   episode      188 non-null    int64  \n 2   title        188 non-null    object \n 3   imdb_rating  188 non-null    float64\n 4   total_votes  188 non-null    int64  \n 5   air_date     188 non-null    object \ndtypes: float64(1), int64(3), object(2)\nmemory usage: 8.9+ KB\n```\n:::\n:::\n\n\nWe can just `dtypes` to check the data types of every variable in the data frame.\n\n::: {#cell-19 .cell execution_count=10}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nseason           int64\nepisode          int64\ntitle           object\nimdb_rating    float64\ntotal_votes      int64\nair_date        object\ndtype: object\n```\n:::\n:::\n\n\nOr just the dimensions (e.g., rows and columns).\n\n::: {#cell-21 .cell execution_count=11}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(188, 6)\n```\n:::\n:::\n\n\nIn this case, there are only 188 rows. But for larger datasets we might want to look at the head (top 5) and tail (bottom 5) rows using `.head()` and `.tail()`, respectively.\n\n::: {#cell-23 .cell execution_count=12}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-24 .cell execution_count=13}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Summary\n\nTo get an overview of our data we can ask Python to '_describe_ our (numeric) data'\n\n::: {#cell-26 .cell execution_count=14}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.468085</td>\n      <td>11.877660</td>\n      <td>8.257447</td>\n      <td>2126.648936</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.386245</td>\n      <td>7.024855</td>\n      <td>0.538067</td>\n      <td>787.098275</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>6.700000</td>\n      <td>1393.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>7.900000</td>\n      <td>1631.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6.000000</td>\n      <td>11.500000</td>\n      <td>8.200000</td>\n      <td>1952.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7.250000</td>\n      <td>18.000000</td>\n      <td>8.600000</td>\n      <td>2379.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n      <td>26.000000</td>\n      <td>9.700000</td>\n      <td>7934.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nor we can pull out specific statistics for numeric columns.\n\n::: {#cell-28 .cell execution_count=15}\n``` {.python .cell-code}\ndf.mean()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">mean</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/frame.py:11693</span>, in <span class=\"ansi-cyan-fg\">DataFrame.mean</span><span class=\"ansi-blue-fg\">(self, axis, skipna, numeric_only, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11685</span> <span style=\"color:rgb(175,0,255)\">@doc</span>(make_doc(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">mean</span><span style=\"color:rgb(175,0,0)\">\"</span>, ndim<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>))\n<span class=\"ansi-green-fg ansi-bold\">  11686</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">mean</span>(\n<span class=\"ansi-green-fg ansi-bold\">  11687</span>     <span style=\"color:rgb(0,135,0)\">self</span>,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11691</span>     <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwargs,\n<span class=\"ansi-green-fg ansi-bold\">  11692</span> ):\n<span class=\"ansi-green-fg\">&gt; 11693</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">super</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">mean</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">numeric_only</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11694</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(result, Series):\n<span class=\"ansi-green-fg ansi-bold\">  11695</span>         result <span style=\"color:rgb(98,98,98)\">=</span> result<span style=\"color:rgb(98,98,98)\">.</span>__finalize__(<span style=\"color:rgb(0,135,0)\">self</span>, method<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">mean</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/generic.py:12420</span>, in <span class=\"ansi-cyan-fg\">NDFrame.mean</span><span class=\"ansi-blue-fg\">(self, axis, skipna, numeric_only, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">  12413</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">mean</span>(\n<span class=\"ansi-green-fg ansi-bold\">  12414</span>     <span style=\"color:rgb(0,135,0)\">self</span>,\n<span class=\"ansi-green-fg ansi-bold\">  12415</span>     axis: Axis <span style=\"color:rgb(98,98,98)\">|</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">  12418</span>     <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwargs,\n<span class=\"ansi-green-fg ansi-bold\">  12419</span> ) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> Series <span style=\"color:rgb(98,98,98)\">|</span> <span style=\"color:rgb(0,135,0)\">float</span>:\n<span class=\"ansi-green-fg\">&gt; 12420</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_stat_function</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">  12421</span> <span class=\"ansi-yellow-bg\">        </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">mean</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">nanops</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">nanmean</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">numeric_only</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span>\n<span class=\"ansi-green-fg ansi-bold\">  12422</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/generic.py:12377</span>, in <span class=\"ansi-cyan-fg\">NDFrame._stat_function</span><span class=\"ansi-blue-fg\">(self, name, func, axis, skipna, numeric_only, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">  12373</span> nv<span style=\"color:rgb(98,98,98)\">.</span>validate_func(name, (), kwargs)\n<span class=\"ansi-green-fg ansi-bold\">  12375</span> validate_bool_kwarg(skipna, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">skipna</span><span style=\"color:rgb(175,0,0)\">\"</span>, none_allowed<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg\">&gt; 12377</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_reduce</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">  12378</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">func</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">name</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">axis</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">numeric_only</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">numeric_only</span>\n<span class=\"ansi-green-fg ansi-bold\">  12379</span> <span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/frame.py:11562</span>, in <span class=\"ansi-cyan-fg\">DataFrame._reduce</span><span class=\"ansi-blue-fg\">(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11558</span>     df <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>T\n<span class=\"ansi-green-fg ansi-bold\">  11560</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># After possibly _get_data and transposing, we are now in the</span>\n<span class=\"ansi-green-fg ansi-bold\">  11561</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#  simple case where we can use BlockManager.reduce</span>\n<span class=\"ansi-green-fg\">&gt; 11562</span> res <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_mgr</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">reduce</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">blk_func</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11563</span> out <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>_constructor_from_mgr(res, axes<span style=\"color:rgb(98,98,98)\">=</span>res<span style=\"color:rgb(98,98,98)\">.</span>axes)<span style=\"color:rgb(98,98,98)\">.</span>iloc[<span style=\"color:rgb(98,98,98)\">0</span>]\n<span class=\"ansi-green-fg ansi-bold\">  11564</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> out_dtype <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> out<span style=\"color:rgb(98,98,98)\">.</span>dtype <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">boolean</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/internals/managers.py:1500</span>, in <span class=\"ansi-cyan-fg\">BlockManager.reduce</span><span class=\"ansi-blue-fg\">(self, func)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1498</span> res_blocks: <span style=\"color:rgb(0,135,0)\">list</span>[Block] <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">   1499</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> blk <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>blocks:\n<span class=\"ansi-green-fg\">-&gt; 1500</span>     nbs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">blk</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">reduce</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">func</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1501</span>     res_blocks<span style=\"color:rgb(98,98,98)\">.</span>extend(nbs)\n<span class=\"ansi-green-fg ansi-bold\">   1503</span> index <span style=\"color:rgb(98,98,98)\">=</span> Index([<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>])  <span style=\"font-style:italic;color:rgb(95,135,135)\"># placeholder</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/internals/blocks.py:404</span>, in <span class=\"ansi-cyan-fg\">Block.reduce</span><span class=\"ansi-blue-fg\">(self, func)</span>\n<span class=\"ansi-green-fg ansi-bold\">    398</span> <span style=\"color:rgb(175,0,255)\">@final</span>\n<span class=\"ansi-green-fg ansi-bold\">    399</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">reduce</span>(<span style=\"color:rgb(0,135,0)\">self</span>, func) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(0,135,0)\">list</span>[Block]:\n<span class=\"ansi-green-fg ansi-bold\">    400</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># We will apply the function and reshape the result into a single-row</span>\n<span class=\"ansi-green-fg ansi-bold\">    401</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\">#  Block with the same mgr_locs; squeezing will be done at a higher level</span>\n<span class=\"ansi-green-fg ansi-bold\">    402</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ndim <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">2</span>\n<span class=\"ansi-green-fg\">--&gt; 404</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">func</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">values</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    406</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>values<span style=\"color:rgb(98,98,98)\">.</span>ndim <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">1</span>:\n<span class=\"ansi-green-fg ansi-bold\">    407</span>         res_values <span style=\"color:rgb(98,98,98)\">=</span> result\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/frame.py:11481</span>, in <span class=\"ansi-cyan-fg\">DataFrame._reduce.&lt;locals&gt;.blk_func</span><span class=\"ansi-blue-fg\">(values, axis)</span>\n<span class=\"ansi-green-fg ansi-bold\">  11479</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([result])\n<span class=\"ansi-green-fg ansi-bold\">  11480</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">&gt; 11481</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">values</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">axis</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/nanops.py:147</span>, in <span class=\"ansi-cyan-fg\">bottleneck_switch.__call__.&lt;locals&gt;.f</span><span class=\"ansi-blue-fg\">(values, axis, skipna, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    145</span>         result <span style=\"color:rgb(98,98,98)\">=</span> alt(values, axis<span style=\"color:rgb(98,98,98)\">=</span>axis, skipna<span style=\"color:rgb(98,98,98)\">=</span>skipna, <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwds)\n<span class=\"ansi-green-fg ansi-bold\">    146</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">--&gt; 147</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">alt</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">values</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">axis</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    149</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> result\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/nanops.py:404</span>, in <span class=\"ansi-cyan-fg\">_datetimelike_compat.&lt;locals&gt;.new_func</span><span class=\"ansi-blue-fg\">(values, axis, skipna, mask, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    401</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> datetimelike <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> mask <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n<span class=\"ansi-green-fg ansi-bold\">    402</span>     mask <span style=\"color:rgb(98,98,98)\">=</span> isna(values)\n<span class=\"ansi-green-fg\">--&gt; 404</span> result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">func</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">values</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">axis</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">axis</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">skipna</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skipna</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    406</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> datetimelike:\n<span class=\"ansi-green-fg ansi-bold\">    407</span>     result <span style=\"color:rgb(98,98,98)\">=</span> _wrap_results(result, orig_values<span style=\"color:rgb(98,98,98)\">.</span>dtype, fill_value<span style=\"color:rgb(98,98,98)\">=</span>iNaT)\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/nanops.py:720</span>, in <span class=\"ansi-cyan-fg\">nanmean</span><span class=\"ansi-blue-fg\">(values, axis, skipna, mask)</span>\n<span class=\"ansi-green-fg ansi-bold\">    718</span> count <span style=\"color:rgb(98,98,98)\">=</span> _get_counts(values<span style=\"color:rgb(98,98,98)\">.</span>shape, mask, axis, dtype<span style=\"color:rgb(98,98,98)\">=</span>dtype_count)\n<span class=\"ansi-green-fg ansi-bold\">    719</span> the_sum <span style=\"color:rgb(98,98,98)\">=</span> values<span style=\"color:rgb(98,98,98)\">.</span>sum(axis, dtype<span style=\"color:rgb(98,98,98)\">=</span>dtype_sum)\n<span class=\"ansi-green-fg\">--&gt; 720</span> the_sum <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_ensure_numeric</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">the_sum</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    722</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> axis <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(the_sum, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">ndim</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg ansi-bold\">    723</span>     count <span style=\"color:rgb(98,98,98)\">=</span> cast(np<span style=\"color:rgb(98,98,98)\">.</span>ndarray, count)\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/nanops.py:1686</span>, in <span class=\"ansi-cyan-fg\">_ensure_numeric</span><span class=\"ansi-blue-fg\">(x)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1683</span> inferred <span style=\"color:rgb(98,98,98)\">=</span> lib<span style=\"color:rgb(98,98,98)\">.</span>infer_dtype(x)\n<span class=\"ansi-green-fg ansi-bold\">   1684</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> inferred <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> [<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">string</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">mixed</span><span style=\"color:rgb(175,0,0)\">\"</span>]:\n<span class=\"ansi-green-fg ansi-bold\">   1685</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># GH#44008, GH#36703 avoid casting e.g. strings to numeric</span>\n<span class=\"ansi-green-fg\">-&gt; 1686</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Could not convert </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>x<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> to numeric</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1687</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1688</span>     x <span style=\"color:rgb(98,98,98)\">=</span> x<span style=\"color:rgb(98,98,98)\">.</span>astype(np<span style=\"color:rgb(98,98,98)\">.</span>complex128)\n\n<span class=\"ansi-red-fg\">TypeError</span>: Could not convert [\"PilotDiversity DayHealth CareThe AllianceBasketballHot GirlThe DundiesSexual HarassmentOffice OlympicsThe FireHalloweenThe FightThe ClientPerformance ReviewE-Mail SurveillanceChristmas PartyBooze CruiseThe InjuryThe SecretThe CarpetBoys and GirlsValentine's DayDwight's SpeechTake Your Daughter to Work DayMichael's BirthdayDrug TestingConflict ResolutionCasino NightGay Witch HuntThe ConventionThe CoupGrief CounselingInitiationDiwaliBranch ClosingThe MergerThe ConvictA Benihana ChristmasBack from VacationTraveling SalesmenThe ReturnBen FranklinPhyllis' WeddingBusiness SchoolCocktailsThe NegotiationSafety TrainingProduct RecallWomen's AppreciationBeach GamesThe JobFun RunDunder Mifflin InfinityLaunch PartyMoneyLocal AdBranch WarsSurvivor ManThe DepositionDinner PartyChair ModelNight OutDid I Stutter?Job FairGoodbye, TobyWeight LossBusiness EthicsBaby ShowerCrime AidEmployee TransferCustomer SurveyBusiness TripFrame TobyThe SurplusMoroccan ChristmasThe DuelPrince Family PaperStress ReliefLecture Circuit: Part 1Lecture Circuit: Part 2Blood DriveGolden TicketNew BossTwo WeeksDream TeamMichael Scott Paper CompanyHeavy CompetitionBrokeCasual FridayCafe DiscoCompany PicnicGossipThe MeetingThe PromotionNiagara: Part 1Niagara: Part 2MafiaThe LoverKoi PondDouble DateMurderShareholder MeetingScott's TotsSecret SantaThe BankerSabreManager and SalesmanThe Delivery: Part 1The Delivery: Part 2St. Patrick's DayNew LeadsHappy HourSecretary's DayBody LanguageThe Cover-UpThe ChumpWhistleblowerNepotismCounselingAndy's PlaySex EdThe StingCostume ContestChristeningViewing PartyWUPHF.comChinaClassy ChristmasUltimatumThe SeminarThe SearchPDAThreat Level MidnightTodd PackerGarage SaleTraining DayMichael's Last DundiesGoodbye, MichaelThe Inner CircleDwight K. Schrute, (Acting) ManagerSearch CommitteeThe ListThe IncentiveLottoGarden PartySpookedDoomsdayPam's ReplacementGettysburgMrs. CaliforniaChristmas WishesTriviaPool PartyJury DutySpecial ProjectTallahasseeAfter HoursTest the StoreLast Day in FloridaGet the GirlWelcome PartyAngry AndyFundraiserTurf WarFree Family Portrait StudioNew GuysRoy's WeddingAndy's AncestryWork BusHere Comes TrebleThe BoatThe WhaleThe TargetDwight ChristmasLiceSuit WarehouseCustomer LoyaltyJunior SalesmanVandalismCouples DiscountMoving OnThe FarmPromosStairmageddonPaper AirplaneLivin' the DreamA.A.R.M.Finale\"\n '2005-03-242005-03-292005-04-052005-04-122005-04-192005-04-262005-09-202005-09-272005-10-042005-10-112005-10-182005-11-012005-11-082005-11-152005-11-222005-12-062006-01-052006-01-122006-01-192006-01-262006-02-022006-02-092006-03-022006-03-162006-03-302006-04-272006-05-042006-05-112006-09-212006-09-282006-10-052006-10-122006-10-192006-11-022006-11-092006-11-162006-11-302006-12-142007-01-042007-01-112007-01-182007-02-012007-02-082007-02-152007-02-222007-04-052007-04-122007-04-262007-05-032007-05-102007-05-172007-09-272007-10-042007-10-112007-10-182007-10-252007-11-012007-11-082007-11-152008-04-102008-04-172008-04-242008-05-012008-05-082008-05-152008-09-252008-10-092008-10-162008-10-232008-10-302008-11-062008-11-132008-11-202008-12-042008-12-112009-01-152009-01-222009-02-012009-02-052009-02-122009-03-052009-03-122009-03-192009-03-262009-04-092009-04-092009-04-162009-04-232009-04-302009-05-072009-05-142009-09-172009-09-242009-10-012009-10-082009-10-082009-10-152009-10-222009-10-292009-11-052009-11-122009-11-192009-12-032009-12-102010-01-212010-02-042010-02-112010-03-042010-03-042010-03-112010-03-182010-03-252010-04-222010-04-292010-05-062010-05-132010-05-202010-09-232010-09-302010-10-072010-10-142010-10-212010-10-282010-11-042010-11-112010-11-182010-12-022010-12-092011-01-202011-01-272011-02-032011-02-102011-02-172011-02-242011-03-242011-04-142011-04-212011-04-282011-05-052011-05-122011-05-192011-09-222011-09-292011-10-062011-10-132011-10-272011-11-032011-11-102011-11-172011-12-012011-12-082012-01-122012-01-192012-02-022012-02-092012-02-162012-02-232012-03-012012-03-082012-03-152012-04-122012-04-192012-04-262012-05-032012-05-102012-09-202012-09-272012-10-042012-10-182012-10-252012-11-082012-11-152012-11-292012-12-062013-01-102013-01-172013-01-242013-01-312013-01-312013-02-072013-02-142013-03-142013-04-042013-04-112013-04-252013-05-022013-05-092013-05-16'] to numeric</pre>\n```\n:::\n\n:::\n:::\n\n\nNote the error triggered above due to pandas attempting to calculate the mean of the wrong type (i.e. non-numeric values). We can address that by only computing the mean of numeric values (see below):\n\n::: {#cell-30 .cell execution_count=16}\n``` {.python .cell-code}\ndf.mean(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nseason            5.468085\nepisode          11.877660\nimdb_rating       8.257447\ntotal_votes    2126.648936\ndtype: float64\n```\n:::\n:::\n\n\nor the sum of every value within the same column:\n\n::: {#cell-32 .cell execution_count=17}\n``` {.python .cell-code}\ndf.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nseason                                                      1028\nepisode                                                     2233\ntitle          PilotDiversity DayHealth CareThe AllianceBaske...\nimdb_rating                                               1552.4\ntotal_votes                                               399810\nair_date       2005-03-242005-03-292005-04-052005-04-122005-0...\ndtype: object\n```\n:::\n:::\n\n\nSimilarly to what happened with `mean()`, `sum()` is adding all values in every observation of every attribute, regardless of their type, but this time is not producing an error. Can you see what happens with strings? And with dates?\n\nAgain, we can force to use numeric values only:\n\n::: {#cell-34 .cell execution_count=18}\n``` {.python .cell-code}\ndf.sum(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nseason           1028.0\nepisode          2233.0\nimdb_rating      1552.4\ntotal_votes    399810.0\ndtype: float64\n```\n:::\n:::\n\n\n## Subsetting\n\nOften times we may have a large dataset and we only need to work with just a part of it (a subset) consisting of certain columns and/or rows. Selecting specific columns and/or rows is known as subsetting.\n\n### Selecting columns\n\nBecause in pandas every column has a name, we can select columns by their name or their position.\n\n#### Selecting by name\n\nTo select by name we will use the syntax `df['<column_name>']`. For example, if we wanted to select the ratings:\n\n::: {#cell-36 .cell execution_count=19}\n``` {.python .cell-code}\ndf['imdb_rating']\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n0      7.6\n1      8.3\n2      7.9\n3      8.1\n4      8.4\n      ... \n183    8.0\n184    8.0\n185    8.9\n186    9.3\n187    9.7\nName: imdb_rating, Length: 188, dtype: float64\n```\n:::\n:::\n\n\nor we could select the date in which the chapters were first aired:\n\n::: {#cell-38 .cell execution_count=20}\n``` {.python .cell-code}\ndf['air_date']\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0      2005-03-24\n1      2005-03-29\n2      2005-04-05\n3      2005-04-12\n4      2005-04-19\n          ...    \n183    2013-04-11\n184    2013-04-25\n185    2013-05-02\n186    2013-05-09\n187    2013-05-16\nName: air_date, Length: 188, dtype: object\n```\n:::\n:::\n\n\nWe can even select more than one column!\n\n::: {#cell-40 .cell execution_count=21}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.6</td>\n      <td>3706</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8.3</td>\n      <td>3566</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.9</td>\n      <td>2983</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.1</td>\n      <td>2886</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.4</td>\n      <td>3179</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>8.0</td>\n      <td>1484</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>8.0</td>\n      <td>1482</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>8.9</td>\n      <td>2041</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9.3</td>\n      <td>2860</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9.7</td>\n      <td>7934</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: callout-important\n\nDid you notice that we used two sets of squared brackets (`[[]]`)? This is needed because we need to passing a _list_ of the column names to the [`__getitem__`](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics) method of the pandas dataframe object, and as you may remember from @sec-list-dictionaries, this is the syntax used for lists (thank [this stackoverflow question](https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe)). \n\nThis is what we'd get otherwise:\n\n::: {#cell-42 .cell execution_count=22}\n``` {.python .cell-code}\ndf['imdb_rating', 'total_votes']\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">KeyError</span>                                  Traceback (most recent call last)\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805</span>, in <span class=\"ansi-cyan-fg\">Index.get_loc</span><span class=\"ansi-blue-fg\">(self, key)</span>\n<span class=\"ansi-green-fg ansi-bold\">   3804</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">-&gt; 3805</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_engine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get_loc</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">casted_key</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   3806</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">KeyError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> err:\n\nFile <span class=\"ansi-green-fg\">index.pyx:167</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.index.IndexEngine.get_loc</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">index.pyx:196</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.index.IndexEngine.get_loc</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">pandas/_libs/hashtable_class_helper.pxi:7081</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.hashtable.PyObjectHashTable.get_item</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">pandas/_libs/hashtable_class_helper.pxi:7089</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.hashtable.PyObjectHashTable.get_item</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">KeyError</span>: ('imdb_rating', 'total_votes')\n\nThe above exception was the direct cause of the following exception:\n\n<span class=\"ansi-red-fg\">KeyError</span>                                  Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">imdb_rating</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">total_votes</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">]</span>\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/frame.py:4102</span>, in <span class=\"ansi-cyan-fg\">DataFrame.__getitem__</span><span class=\"ansi-blue-fg\">(self, key)</span>\n<span class=\"ansi-green-fg ansi-bold\">   4100</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>columns<span style=\"color:rgb(98,98,98)\">.</span>nlevels <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">1</span>:\n<span class=\"ansi-green-fg ansi-bold\">   4101</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_getitem_multilevel(key)\n<span class=\"ansi-green-fg\">-&gt; 4102</span> indexer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get_loc</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">key</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   4103</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> is_integer(indexer):\n<span class=\"ansi-green-fg ansi-bold\">   4104</span>     indexer <span style=\"color:rgb(98,98,98)\">=</span> [indexer]\n\nFile <span class=\"ansi-green-fg\">~/anaconda3/envs/IM939/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812</span>, in <span class=\"ansi-cyan-fg\">Index.get_loc</span><span class=\"ansi-blue-fg\">(self, key)</span>\n<span class=\"ansi-green-fg ansi-bold\">   3807</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(casted_key, <span style=\"color:rgb(0,135,0)\">slice</span>) <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> (\n<span class=\"ansi-green-fg ansi-bold\">   3808</span>         <span style=\"color:rgb(0,135,0)\">isinstance</span>(casted_key, abc<span style=\"color:rgb(98,98,98)\">.</span>Iterable)\n<span class=\"ansi-green-fg ansi-bold\">   3809</span>         <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(0,135,0)\">any</span>(<span style=\"color:rgb(0,135,0)\">isinstance</span>(x, <span style=\"color:rgb(0,135,0)\">slice</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> x <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> casted_key)\n<span class=\"ansi-green-fg ansi-bold\">   3810</span>     ):\n<span class=\"ansi-green-fg ansi-bold\">   3811</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> InvalidIndexError(key)\n<span class=\"ansi-green-fg\">-&gt; 3812</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">KeyError</span>(key) <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">err</span>\n<span class=\"ansi-green-fg ansi-bold\">   3813</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>:\n<span class=\"ansi-green-fg ansi-bold\">   3814</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># If we have a listlike key, _check_indexing_error will raise</span>\n<span class=\"ansi-green-fg ansi-bold\">   3815</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\">#  InvalidIndexError. Otherwise we fall through and re-raise</span>\n<span class=\"ansi-green-fg ansi-bold\">   3816</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\">#  the TypeError.</span>\n<span class=\"ansi-green-fg ansi-bold\">   3817</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_check_indexing_error(key)\n\n<span class=\"ansi-red-fg\">KeyError</span>: ('imdb_rating', 'total_votes')</pre>\n```\n:::\n\n:::\n:::\n\n\nYou can also check out the pandas documentation on [indexing and selecting data](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics).\n:::\n\nWe can also apply methods to subset, such as this one to get the average rating:\n\n::: {#cell-45 .cell execution_count=23}\n``` {.python .cell-code}\ndf['imdb_rating'].mean()\n\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n8.25744680851064\n```\n:::\n:::\n\n\nOr to calculate the total number of votes:\n\n::: {#cell-47 .cell execution_count=24}\n``` {.python .cell-code}\ndf['total_votes'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n399810\n```\n:::\n:::\n\n\nOr a combination of multiple columns:\n\n::: {#cell-49 .cell execution_count=25}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nimdb_rating       8.257447\ntotal_votes    2126.648936\ndtype: float64\n```\n:::\n:::\n\n\n#### Selecting by position\n\nIf we do not want to use column names, we can use `iloc` method by using the syntax `<object>.iloc[<row slice>, <column slice>]`, where a slice is a range of numbers separated by a colon `:`. So, if we were to select the value in the 4th row and 2nd column, we'd use:\n\n::: {#cell-51 .cell execution_count=26}\n``` {.python .cell-code}\ndf.iloc[4,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n'Basketball'\n```\n:::\n:::\n\n\nBut if we just wanted to select a column? In that case, we can use the same method but instead of specifiying a row, we will need to use `:` to indicate that we are selecting all the rows, such as:\n\n::: {#cell-53 .cell execution_count=27}\n``` {.python .cell-code}\ndf.iloc[:,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n0                 Pilot\n1         Diversity Day\n2           Health Care\n3          The Alliance\n4            Basketball\n             ...       \n183       Stairmageddon\n184      Paper Airplane\n185    Livin' the Dream\n186            A.A.R.M.\n187              Finale\nName: title, Length: 188, dtype: object\n```\n:::\n:::\n\n\nConversely, if we just wanted to select all the columns from a given row, we'd use `:` on the right side of the `,` like this:\n\n::: {#cell-55 .cell execution_count=28}\n``` {.python .cell-code}\ndf.iloc[4,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nseason                  1\nepisode                 5\ntitle          Basketball\nimdb_rating           8.4\ntotal_votes          3179\nair_date       2005-04-19\nName: 4, dtype: object\n```\n:::\n:::\n\n\nWe can use negative values in indexes to indicate 'from the end'. So, an index of [-10, :] returns the 10th from last row.\n\n::: {#cell-57 .cell execution_count=29}\n``` {.python .cell-code}\ndf.iloc[-10,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nseason                  9\nepisode                14\ntitle           Vandalism\nimdb_rating           7.6\ntotal_votes          1402\nair_date       2013-01-31\nName: 178, dtype: object\n```\n:::\n:::\n\n\nInstead of using tail, we could ask for the last 5 rows with an index of `[-5:, :]`. I read `:` as 'and everything else' in these cases.\n\n::: {#cell-59 .cell execution_count=30}\n``` {.python .cell-code}\ndf.iloc[-5:,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-60 .cell execution_count=31}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that the row is shown on the left. That will stop you getting lost in slices of the data. \n\nFor the top ten rows\n\n::: {#cell-62 .cell execution_count=32}\n``` {.python .cell-code}\ndf.iloc[:10,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>6</td>\n      <td>Hot Girl</td>\n      <td>7.8</td>\n      <td>2852</td>\n      <td>2005-04-26</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2</td>\n      <td>1</td>\n      <td>The Dundies</td>\n      <td>8.7</td>\n      <td>3213</td>\n      <td>2005-09-20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2</td>\n      <td>2</td>\n      <td>Sexual Harassment</td>\n      <td>8.2</td>\n      <td>2736</td>\n      <td>2005-09-27</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>3</td>\n      <td>Office Olympics</td>\n      <td>8.4</td>\n      <td>2742</td>\n      <td>2005-10-04</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>4</td>\n      <td>The Fire</td>\n      <td>8.4</td>\n      <td>2713</td>\n      <td>2005-10-11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOf course, we can run methods on these slices. We could, if we wanted to, calculate the mean imdb rating of only the first and last 100 episodes. _Note_ the indexing starts at 0 so we want the column index of 3 (0:season, 1:episode, 2:title, 3:imdb_rating).\n\n::: {#cell-64 .cell execution_count=33}\n``` {.python .cell-code}\ndf.iloc[:100,3].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n8.483\n```\n:::\n:::\n\n\n::: {#cell-65 .cell execution_count=34}\n``` {.python .cell-code}\ndf.iloc[-100:,3].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n8.062\n```\n:::\n:::\n\n\nIf you are unsure how many rows you have then the count method comes to the rescue.\n\n::: {#cell-67 .cell execution_count=35}\n``` {.python .cell-code}\ndf.iloc[-100:,3].count()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n100\n```\n:::\n:::\n\n\n::: {#cell-68 .cell execution_count=36}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.468085</td>\n      <td>11.877660</td>\n      <td>8.257447</td>\n      <td>2126.648936</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.386245</td>\n      <td>7.024855</td>\n      <td>0.538067</td>\n      <td>787.098275</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>6.700000</td>\n      <td>1393.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>7.900000</td>\n      <td>1631.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6.000000</td>\n      <td>11.500000</td>\n      <td>8.200000</td>\n      <td>1952.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7.250000</td>\n      <td>18.000000</td>\n      <td>8.600000</td>\n      <td>2379.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n      <td>26.000000</td>\n      <td>9.700000</td>\n      <td>7934.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSo it looks like the last 100 episodes were less good than the first 100. I guess that is why it was cancelled.\n\nOur data is organised by season. Looking at the average by season might help.\n\n::: {#cell-70 .cell execution_count=37}\n``` {.python .cell-code}\ndf[['season', 'imdb_rating']].groupby('season').mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>imdb_rating</th>\n    </tr>\n    <tr>\n      <th>season</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>8.016667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.436364</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.573913</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.600000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8.492308</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.219231</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.316667</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>7.666667</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>7.956522</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe above line groups our dataframe by values in the season column and then displays the mean for each group. Pretty nifty.\n\nSeason 8 looks pretty bad. We can look at just the rows for season 8.\n\n::: {#cell-72 .cell execution_count=38}\n``` {.python .cell-code}\ndf[df['season'] == 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>8</td>\n      <td>1</td>\n      <td>The List</td>\n      <td>8.2</td>\n      <td>1829</td>\n      <td>2011-09-22</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>8</td>\n      <td>2</td>\n      <td>The Incentive</td>\n      <td>8.2</td>\n      <td>1668</td>\n      <td>2011-09-29</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>8</td>\n      <td>3</td>\n      <td>Lotto</td>\n      <td>7.3</td>\n      <td>1601</td>\n      <td>2011-10-06</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>8</td>\n      <td>4</td>\n      <td>Garden Party</td>\n      <td>8.1</td>\n      <td>1717</td>\n      <td>2011-10-13</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>8</td>\n      <td>5</td>\n      <td>Spooked</td>\n      <td>7.6</td>\n      <td>1543</td>\n      <td>2011-10-27</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>8</td>\n      <td>6</td>\n      <td>Doomsday</td>\n      <td>7.8</td>\n      <td>1476</td>\n      <td>2011-11-03</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>8</td>\n      <td>7</td>\n      <td>Pam's Replacement</td>\n      <td>7.7</td>\n      <td>1563</td>\n      <td>2011-11-10</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>8</td>\n      <td>8</td>\n      <td>Gettysburg</td>\n      <td>7.0</td>\n      <td>1584</td>\n      <td>2011-11-17</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>8</td>\n      <td>9</td>\n      <td>Mrs. California</td>\n      <td>7.7</td>\n      <td>1553</td>\n      <td>2011-12-01</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>8</td>\n      <td>10</td>\n      <td>Christmas Wishes</td>\n      <td>8.0</td>\n      <td>1547</td>\n      <td>2011-12-08</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>8</td>\n      <td>11</td>\n      <td>Trivia</td>\n      <td>7.9</td>\n      <td>1488</td>\n      <td>2012-01-12</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>8</td>\n      <td>12</td>\n      <td>Pool Party</td>\n      <td>8.0</td>\n      <td>1612</td>\n      <td>2012-01-19</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>8</td>\n      <td>13</td>\n      <td>Jury Duty</td>\n      <td>7.5</td>\n      <td>1478</td>\n      <td>2012-02-02</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>8</td>\n      <td>14</td>\n      <td>Special Project</td>\n      <td>7.8</td>\n      <td>1432</td>\n      <td>2012-02-09</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>8</td>\n      <td>15</td>\n      <td>Tallahassee</td>\n      <td>7.9</td>\n      <td>1522</td>\n      <td>2012-02-16</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>8</td>\n      <td>16</td>\n      <td>After Hours</td>\n      <td>8.1</td>\n      <td>1567</td>\n      <td>2012-02-23</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>8</td>\n      <td>17</td>\n      <td>Test the Store</td>\n      <td>7.8</td>\n      <td>1478</td>\n      <td>2012-03-01</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>8</td>\n      <td>18</td>\n      <td>Last Day in Florida</td>\n      <td>7.8</td>\n      <td>1429</td>\n      <td>2012-03-08</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>8</td>\n      <td>19</td>\n      <td>Get the Girl</td>\n      <td>6.7</td>\n      <td>1642</td>\n      <td>2012-03-15</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>8</td>\n      <td>20</td>\n      <td>Welcome Party</td>\n      <td>7.2</td>\n      <td>1489</td>\n      <td>2012-04-12</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>8</td>\n      <td>21</td>\n      <td>Angry Andy</td>\n      <td>7.1</td>\n      <td>1585</td>\n      <td>2012-04-19</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>8</td>\n      <td>22</td>\n      <td>Fundraiser</td>\n      <td>7.1</td>\n      <td>1453</td>\n      <td>2012-04-26</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>8</td>\n      <td>23</td>\n      <td>Turf War</td>\n      <td>7.7</td>\n      <td>1393</td>\n      <td>2012-05-03</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>8</td>\n      <td>24</td>\n      <td>Free Family Portrait Studio</td>\n      <td>7.8</td>\n      <td>1464</td>\n      <td>2012-05-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Filtering rows\n\nWe can filter rows matching some criteria by using the syntax `<object>.loc[<criteria>]`.  So, if we wanted to filter all the episodes from the 8th season, we would do the following:\n\n::: {#cell-74 .cell execution_count=39}\n``` {.python .cell-code}\ndf.loc[df['season'] == 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>8</td>\n      <td>1</td>\n      <td>The List</td>\n      <td>8.2</td>\n      <td>1829</td>\n      <td>2011-09-22</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>8</td>\n      <td>2</td>\n      <td>The Incentive</td>\n      <td>8.2</td>\n      <td>1668</td>\n      <td>2011-09-29</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>8</td>\n      <td>3</td>\n      <td>Lotto</td>\n      <td>7.3</td>\n      <td>1601</td>\n      <td>2011-10-06</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>8</td>\n      <td>4</td>\n      <td>Garden Party</td>\n      <td>8.1</td>\n      <td>1717</td>\n      <td>2011-10-13</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>8</td>\n      <td>5</td>\n      <td>Spooked</td>\n      <td>7.6</td>\n      <td>1543</td>\n      <td>2011-10-27</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>8</td>\n      <td>6</td>\n      <td>Doomsday</td>\n      <td>7.8</td>\n      <td>1476</td>\n      <td>2011-11-03</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>8</td>\n      <td>7</td>\n      <td>Pam's Replacement</td>\n      <td>7.7</td>\n      <td>1563</td>\n      <td>2011-11-10</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>8</td>\n      <td>8</td>\n      <td>Gettysburg</td>\n      <td>7.0</td>\n      <td>1584</td>\n      <td>2011-11-17</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>8</td>\n      <td>9</td>\n      <td>Mrs. California</td>\n      <td>7.7</td>\n      <td>1553</td>\n      <td>2011-12-01</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>8</td>\n      <td>10</td>\n      <td>Christmas Wishes</td>\n      <td>8.0</td>\n      <td>1547</td>\n      <td>2011-12-08</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>8</td>\n      <td>11</td>\n      <td>Trivia</td>\n      <td>7.9</td>\n      <td>1488</td>\n      <td>2012-01-12</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>8</td>\n      <td>12</td>\n      <td>Pool Party</td>\n      <td>8.0</td>\n      <td>1612</td>\n      <td>2012-01-19</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>8</td>\n      <td>13</td>\n      <td>Jury Duty</td>\n      <td>7.5</td>\n      <td>1478</td>\n      <td>2012-02-02</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>8</td>\n      <td>14</td>\n      <td>Special Project</td>\n      <td>7.8</td>\n      <td>1432</td>\n      <td>2012-02-09</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>8</td>\n      <td>15</td>\n      <td>Tallahassee</td>\n      <td>7.9</td>\n      <td>1522</td>\n      <td>2012-02-16</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>8</td>\n      <td>16</td>\n      <td>After Hours</td>\n      <td>8.1</td>\n      <td>1567</td>\n      <td>2012-02-23</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>8</td>\n      <td>17</td>\n      <td>Test the Store</td>\n      <td>7.8</td>\n      <td>1478</td>\n      <td>2012-03-01</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>8</td>\n      <td>18</td>\n      <td>Last Day in Florida</td>\n      <td>7.8</td>\n      <td>1429</td>\n      <td>2012-03-08</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>8</td>\n      <td>19</td>\n      <td>Get the Girl</td>\n      <td>6.7</td>\n      <td>1642</td>\n      <td>2012-03-15</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>8</td>\n      <td>20</td>\n      <td>Welcome Party</td>\n      <td>7.2</td>\n      <td>1489</td>\n      <td>2012-04-12</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>8</td>\n      <td>21</td>\n      <td>Angry Andy</td>\n      <td>7.1</td>\n      <td>1585</td>\n      <td>2012-04-19</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>8</td>\n      <td>22</td>\n      <td>Fundraiser</td>\n      <td>7.1</td>\n      <td>1453</td>\n      <td>2012-04-26</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>8</td>\n      <td>23</td>\n      <td>Turf War</td>\n      <td>7.7</td>\n      <td>1393</td>\n      <td>2012-05-03</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>8</td>\n      <td>24</td>\n      <td>Free Family Portrait Studio</td>\n      <td>7.8</td>\n      <td>1464</td>\n      <td>2012-05-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: callout-note\n\n### Understanding the criteria\n\nTo understand why we have to write the name of the dataframe twice, we can focus on the output provided by the filtering criteria only:\n\n::: {#cell-76 .cell execution_count=40}\n``` {.python .cell-code}\ndf['season'] == 9\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n183     True\n184     True\n185     True\n186     True\n187     True\nName: season, Length: 188, dtype: bool\n```\n:::\n:::\n\n\nAs you can see, it returns a boolean serie specifiying which rows are matching the criteria (`True`) and which ones are not (`False`)\n\nAs a side note, while writing the name of the dataframe twice may seem redundant, this means that we could filter rows based on other objects.\n:::\n\nWe can get an overview of the rating of all chapters within season 8 by:\n\n::: {#cell-79 .cell execution_count=41}\n``` {.python .cell-code}\ndf.loc[df['season'] == 8, 'imdb_rating'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\ncount    24.000000\nmean      7.666667\nstd       0.405041\nmin       6.700000\n25%       7.450000\n50%       7.800000\n75%       7.925000\nmax       8.200000\nName: imdb_rating, dtype: float64\n```\n:::\n:::\n\n\nGenerally pretty bad, but there is clearly one very disliked episode.\n\n## Adding columns\n\nWe can add new columns pretty simply.\n\n::: {#cell-82 .cell execution_count=42}\n``` {.python .cell-code}\ndf['x'] = 44\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOur new column can be an operation on other columns\n\n::: {#cell-84 .cell execution_count=43}\n``` {.python .cell-code}\ndf['rating_div_total_votes'] = df['imdb_rating'] / df['total_votes']\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n      <th>rating_div_total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n      <td>0.002051</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n      <td>0.002328</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n      <td>0.002648</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n      <td>0.002807</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n      <td>0.002642</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nor as simple as adding one to every value.\n\n::: {#cell-86 .cell execution_count=44}\n``` {.python .cell-code}\ndf['y'] = df['season'] + 1\ndf.iloc[0:5,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n      <th>rating_div_total_votes</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n      <td>0.002051</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n      <td>0.002328</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n      <td>0.002648</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n      <td>0.002807</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n      <td>0.002642</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-87 .cell execution_count=45}\n``` {.python .cell-code}\ny =  df['season'] + 1\n```\n:::\n\n\n## Writing data\n\nPandas supports writing out data frames to various formats.\n\n::: {#cell-89 .cell execution_count=46}\n``` {.python .cell-code}\n?df.to_csv\n```\n:::\n\n\nNow you can uncomment the code below to save your dataframe into a csv file. But before doing so, check that your `data/output` folder is empty, as it would override its content:\n\n::: {#cell-91 .cell execution_count=47}\n``` {.python .cell-code}\ndf.to_csv('data/output/my_output_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\nLikewise, we could export our dataset to an excel file by using `to_excel`:\n\n::: {#cell-93 .cell execution_count=48}\n``` {.python .cell-code}\n?df.to_excel\n```\n:::\n\n\nNow you can uncomment the code below to save your dataframe into an excel file. But before doing so, check that your `data/output` folder is empty:\n\n::: {#cell-95 .cell execution_count=49}\n``` {.python .cell-code}\n# df.to_excel('data/output/my_output_ratings.xlsx')\n\n```\n:::\n\n\n## Combining datasets\n\n\nIn this notebook, our dataset was created from a single file that contained all the data that was needed. However, often times data will be spread into different files that we will need to combine to create our own dataset.\n\nConsider the two dataframes below:\n\n::: {#cell-97 .cell execution_count=50}\n``` {.python .cell-code}\ndf_1 = pd.read_csv('data/raw/office1.csv', encoding='UTF-8')\ndf_2 = pd.read_csv('data/raw/office2.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {#cell-98 .cell execution_count=51}\n``` {.python .cell-code}\ndf_1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5-1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>8.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9-13</td>\n      <td>9</td>\n      <td>13</td>\n      <td>7.7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5-6</td>\n      <td>5</td>\n      <td>6</td>\n      <td>8.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3-23</td>\n      <td>3</td>\n      <td>23</td>\n      <td>9.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9-16</td>\n      <td>9</td>\n      <td>16</td>\n      <td>8.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-99 .cell execution_count=52}\n``` {.python .cell-code}\ndf_2.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4-10</td>\n      <td>2095</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3-21</td>\n      <td>2403</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7-24</td>\n      <td>2040</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6-18</td>\n      <td>1769</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8-8</td>\n      <td>1584</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs can be seen, the total votes and imdb ratings data are split between files that we will need to combine. Usually this is done by using a shared column between the two datasets that works as an index. Gladly, `head()` reveals that in both cases there is a common column called `id`. We can _join_ the two dataframes together using the common column.\n\n::: {#cell-101 .cell execution_count=53}\n``` {.python .cell-code}\ninner_join_office_df = pd.merge(df_1, df_2, on='id', how='inner')\ninner_join_office_df\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5-1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>8.8</td>\n      <td>2501</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9-13</td>\n      <td>9</td>\n      <td>13</td>\n      <td>7.7</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5-6</td>\n      <td>5</td>\n      <td>6</td>\n      <td>8.5</td>\n      <td>2018</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3-23</td>\n      <td>3</td>\n      <td>23</td>\n      <td>9.3</td>\n      <td>3010</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9-16</td>\n      <td>9</td>\n      <td>16</td>\n      <td>8.2</td>\n      <td>1572</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>5-21</td>\n      <td>5</td>\n      <td>21</td>\n      <td>8.7</td>\n      <td>2032</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>2-13</td>\n      <td>2</td>\n      <td>13</td>\n      <td>8.3</td>\n      <td>2363</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9-6</td>\n      <td>9</td>\n      <td>6</td>\n      <td>7.8</td>\n      <td>1455</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>2-2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>8.2</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>3-4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>8.0</td>\n      <td>2311</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn this way you can combine datasets using common columns and an _inner join_. We will leave that for the moment. If you want more information about merging data then see [this page](https://www.datasciencemadesimple.com/join-merge-data-frames-pandas-python/#:~:text=Merge%20%28%29%20Function%20in%20pandas%20is%20similar%20to,rows%20from%20both%20data%20frames%2C%20specify%20how%3D%20%E2%80%98outer%E2%80%99.) and the [pandas documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html).\n\n### Well done!\n\nWell done! You've reached the end of a pretty long notebook that went through a lot of details about how to work with this pretty critical package called Pandas. We haven't really done a lot of detailed analysis in this one yet but we will use Pandas a lot and frequently.\n\nYour best friend will be the Pandas documentation -- https://pandas.pydata.org/docs/index.html\n\nThis documentation is great. We particuarly recomment the User Guide that will answer most of your questions and will give you a lot of code to copy and paste first and then modify to do what you need to do -- https://pandas.pydata.org/docs/user_guide/index.html#user-guide\n\n",
    "supporting": [
      "IM939_Lab_2_1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}