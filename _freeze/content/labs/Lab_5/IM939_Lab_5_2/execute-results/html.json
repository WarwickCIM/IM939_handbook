{
  "hash": "5d2a0dbc7f6e51d1cb0a9beac6f2e6d9",
  "result": {
    "markdown": "\n\n# Lab: Cross validation\n\nDetails of the crime dataset are [here](https://archive.ics.uci.edu/ml/datasets/Communities+and+Crime).\n\nWe are going to examine the data, fit and then cross-validate a regression model.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('data/censusCrimeClean.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>communityname</th>\n      <th>fold</th>\n      <th>population</th>\n      <th>householdsize</th>\n      <th>racepctblack</th>\n      <th>racePctWhite</th>\n      <th>racePctAsian</th>\n      <th>racePctHisp</th>\n      <th>agePct12t21</th>\n      <th>agePct12t29</th>\n      <th>...</th>\n      <th>NumStreet</th>\n      <th>PctForeignBorn</th>\n      <th>PctBornSameState</th>\n      <th>PctSameHouse85</th>\n      <th>PctSameCity85</th>\n      <th>PctSameState85</th>\n      <th>LandArea</th>\n      <th>PopDens</th>\n      <th>PctUsePubTrans</th>\n      <th>ViolentCrimesPerPop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Lakewoodcity</td>\n      <td>1</td>\n      <td>0.19</td>\n      <td>0.33</td>\n      <td>0.02</td>\n      <td>0.90</td>\n      <td>0.12</td>\n      <td>0.17</td>\n      <td>0.34</td>\n      <td>0.47</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.12</td>\n      <td>0.42</td>\n      <td>0.50</td>\n      <td>0.51</td>\n      <td>0.64</td>\n      <td>0.12</td>\n      <td>0.26</td>\n      <td>0.20</td>\n      <td>0.20</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tukwilacity</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>0.16</td>\n      <td>0.12</td>\n      <td>0.74</td>\n      <td>0.45</td>\n      <td>0.07</td>\n      <td>0.26</td>\n      <td>0.59</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.21</td>\n      <td>0.50</td>\n      <td>0.34</td>\n      <td>0.60</td>\n      <td>0.52</td>\n      <td>0.02</td>\n      <td>0.12</td>\n      <td>0.45</td>\n      <td>0.67</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aberdeentown</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>0.42</td>\n      <td>0.49</td>\n      <td>0.56</td>\n      <td>0.17</td>\n      <td>0.04</td>\n      <td>0.39</td>\n      <td>0.47</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.14</td>\n      <td>0.49</td>\n      <td>0.54</td>\n      <td>0.67</td>\n      <td>0.56</td>\n      <td>0.01</td>\n      <td>0.21</td>\n      <td>0.02</td>\n      <td>0.43</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Willingborotownship</td>\n      <td>1</td>\n      <td>0.04</td>\n      <td>0.77</td>\n      <td>1.00</td>\n      <td>0.08</td>\n      <td>0.12</td>\n      <td>0.10</td>\n      <td>0.51</td>\n      <td>0.50</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.19</td>\n      <td>0.30</td>\n      <td>0.73</td>\n      <td>0.64</td>\n      <td>0.65</td>\n      <td>0.02</td>\n      <td>0.39</td>\n      <td>0.28</td>\n      <td>0.12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bethlehemtownship</td>\n      <td>1</td>\n      <td>0.01</td>\n      <td>0.55</td>\n      <td>0.02</td>\n      <td>0.95</td>\n      <td>0.09</td>\n      <td>0.05</td>\n      <td>0.38</td>\n      <td>0.38</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.11</td>\n      <td>0.72</td>\n      <td>0.64</td>\n      <td>0.61</td>\n      <td>0.53</td>\n      <td>0.04</td>\n      <td>0.09</td>\n      <td>0.02</td>\n      <td>0.03</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 102 columns</p>\n</div>\n```\n:::\n:::\n\n\nOne hundred features. Too many for us to visualise at once.\n\nInstead, we can pick out particular variables and carry out a linear regression. To make our work simple we will look at ViolentCrimesPerPop as our dependent variable and medIncome as our indpendent variable.\n\nWe may wonder if there is more violent crime in low income areas.\n\nLet us create a new dataframe containing our regression variables. We do not have to do this I find it makes our work clearer.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf_reg = df[['communityname', 'medIncome', 'ViolentCrimesPerPop']]\ndf_reg\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>communityname</th>\n      <th>medIncome</th>\n      <th>ViolentCrimesPerPop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Lakewoodcity</td>\n      <td>0.37</td>\n      <td>0.20</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tukwilacity</td>\n      <td>0.31</td>\n      <td>0.67</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aberdeentown</td>\n      <td>0.30</td>\n      <td>0.43</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Willingborotownship</td>\n      <td>0.58</td>\n      <td>0.12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bethlehemtownship</td>\n      <td>0.50</td>\n      <td>0.03</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1989</th>\n      <td>TempleTerracecity</td>\n      <td>0.42</td>\n      <td>0.09</td>\n    </tr>\n    <tr>\n      <th>1990</th>\n      <td>Seasidecity</td>\n      <td>0.28</td>\n      <td>0.45</td>\n    </tr>\n    <tr>\n      <th>1991</th>\n      <td>Waterburytown</td>\n      <td>0.31</td>\n      <td>0.23</td>\n    </tr>\n    <tr>\n      <th>1992</th>\n      <td>Walthamcity</td>\n      <td>0.44</td>\n      <td>0.19</td>\n    </tr>\n    <tr>\n      <th>1993</th>\n      <td>Ontariocity</td>\n      <td>0.40</td>\n      <td>0.48</td>\n    </tr>\n  </tbody>\n</table>\n<p>1994 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nPlot our data (a nice page on plotting regressions with seaborn is [here](http://seaborn.pydata.org/tutorial/regression.html#:~:text=Two%20main%20functions%20in%20seaborn%20are%20used%20to,quickly%20choose%20the%20correct%20tool%20for%20particular%20job.)).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport seaborn as sns\nsns.jointplot(data = df[['medIncome', 'ViolentCrimesPerPop']], \n              x = 'ViolentCrimesPerPop', \n              y = 'medIncome', kind='reg',\n              marker = '.')\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_2_files/figure-html/cell-5-output-1.png){width=565 height=564}\n:::\n:::\n\n\nWe may want to z-transform or log these scores as they are heavily skewed.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\n\n# some values are 0 so 0.1 is added to prevent log giving us infinity\n# there may be a better way to do this!\ndf_reg.loc[:, 'ViolentCrimesPerPop_log'] = np.log(df_reg['ViolentCrimesPerPop'] + 0.1)\ndf_reg.loc[:,'medIncome_log'] = np.log(df_reg['medIncome'] + 0.1)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf_reg\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>communityname</th>\n      <th>medIncome</th>\n      <th>ViolentCrimesPerPop</th>\n      <th>ViolentCrimesPerPop_log</th>\n      <th>medIncome_log</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Lakewoodcity</td>\n      <td>0.37</td>\n      <td>0.20</td>\n      <td>-1.203973</td>\n      <td>-0.755023</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tukwilacity</td>\n      <td>0.31</td>\n      <td>0.67</td>\n      <td>-0.261365</td>\n      <td>-0.891598</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aberdeentown</td>\n      <td>0.30</td>\n      <td>0.43</td>\n      <td>-0.634878</td>\n      <td>-0.916291</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Willingborotownship</td>\n      <td>0.58</td>\n      <td>0.12</td>\n      <td>-1.514128</td>\n      <td>-0.385662</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bethlehemtownship</td>\n      <td>0.50</td>\n      <td>0.03</td>\n      <td>-2.040221</td>\n      <td>-0.510826</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1989</th>\n      <td>TempleTerracecity</td>\n      <td>0.42</td>\n      <td>0.09</td>\n      <td>-1.660731</td>\n      <td>-0.653926</td>\n    </tr>\n    <tr>\n      <th>1990</th>\n      <td>Seasidecity</td>\n      <td>0.28</td>\n      <td>0.45</td>\n      <td>-0.597837</td>\n      <td>-0.967584</td>\n    </tr>\n    <tr>\n      <th>1991</th>\n      <td>Waterburytown</td>\n      <td>0.31</td>\n      <td>0.23</td>\n      <td>-1.108663</td>\n      <td>-0.891598</td>\n    </tr>\n    <tr>\n      <th>1992</th>\n      <td>Walthamcity</td>\n      <td>0.44</td>\n      <td>0.19</td>\n      <td>-1.237874</td>\n      <td>-0.616186</td>\n    </tr>\n    <tr>\n      <th>1993</th>\n      <td>Ontariocity</td>\n      <td>0.40</td>\n      <td>0.48</td>\n      <td>-0.544727</td>\n      <td>-0.693147</td>\n    </tr>\n  </tbody>\n</table>\n<p>1994 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport seaborn as sns\nsns.jointplot(data = df_reg[['medIncome_log', 'ViolentCrimesPerPop_log']], \n              x = 'ViolentCrimesPerPop_log', \n              y = 'medIncome_log', kind='reg',\n              marker = '.')\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_2_files/figure-html/cell-8-output-1.png){width=576 height=564}\n:::\n:::\n\n\nIs log transforming our variables the right thing to do here?\n\nFit our regression to the log transformed data.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nx = df_reg[['ViolentCrimesPerPop_log']]\ny = df_reg[['medIncome_log']]\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\ny_hat = model.predict(x)\nplt.plot(x, y,'o', alpha = 0.5)\nplt.plot(x, y_hat, 'r', alpha = 0.5)\n\nplt.xlabel('Violent Crimes Per Population')\nplt.ylabel('Median Income')\n\nprint (\"MSE:\", metrics.mean_squared_error(y_hat, y))\nprint (\"R^2:\", metrics.r2_score(y, y_hat))\nprint (\"var:\", y.var())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMSE: 0.1531885348757034\nR^2: 0.22763497704356928\nvar: medIncome_log    0.198436\ndtype: float64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_2_files/figure-html/cell-9-output-2.png){width=600 height=429}\n:::\n:::\n\n\nHas our log transformation distorted the pattern in the data?\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nx = df_reg[['ViolentCrimesPerPop']]\ny = df_reg[['medIncome']]\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\ny_hat = model.predict(x)\nplt.plot(x, y,'o', alpha = 0.5)\nplt.plot(x, y_hat, 'r', alpha = 0.5)\n\nplt.xlabel('Violent Crimes Per Population')\nplt.ylabel('Median Income')\n\nprint (\"MSE:\", metrics.mean_squared_error(y_hat, y))\nprint (\"R^2:\", metrics.r2_score(y, y_hat))\nprint (\"var:\", y.var())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMSE: 0.03592636778157073\nR^2: 0.17996313165549482\nvar: medIncome    0.043833\ndtype: float64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_2_files/figure-html/cell-10-output-2.png){width=589 height=429}\n:::\n:::\n\n\nWhat is the relationship between violent crime and median income? Why might this be?\n\nAssuming the log data is fine, have we overfit the model? Remember that a good model (which accurately models the relationship between violent crimes per population) need to be robust when faced with new data.\n\nKfold cross validation splits data into train and test subsets. We can then fit the regression to the training set and see how well it does for the test set. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.model_selection import KFold\n\nX = df_reg[['ViolentCrimesPerPop']]\ny = df_reg[['medIncome']]\n\n# get four splits, Each split contains a \n# test series and a train series.\nkf = KFold(n_splits=4)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# lists to store our statistics\nr_vals = []\nMSEs = []\nmedIncome_coef = []\n\nfor train_index, test_index in kf.split(X):\n    # fit our model and extract statistics\n    model = LinearRegression()\n    model.fit(X.iloc[train_index], y.iloc[train_index])\n    y_hat = model.predict(X.iloc[test_index])\n    \n    MSEs.append(metrics.mean_squared_error(y.iloc[test_index], y_hat))\n    medIncome_coef.append(model.coef_[0][0])\n    r_vals.append(metrics.r2_score(y.iloc[test_index], y_hat))\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndata = {'MSE' : MSEs, 'medIncome coefficient' : medIncome_coef, 'r squared' : r_vals}\npd.DataFrame(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSE</th>\n      <th>medIncome coefficient</th>\n      <th>r squared</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.035727</td>\n      <td>-0.403609</td>\n      <td>0.130479</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.035904</td>\n      <td>-0.389344</td>\n      <td>0.162820</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.040777</td>\n      <td>-0.353379</td>\n      <td>0.200139</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.032255</td>\n      <td>-0.378883</td>\n      <td>0.182403</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDoes our model produce similiar coefficients with subsets of the data?\n\nWe can do this using an inbuild sklearn function (see [here](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html)).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\nx = df_reg[['ViolentCrimesPerPop']]\ny = df_reg[['medIncome']]\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\nprint(cross_val_score(model, x, y, cv=4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.13047946 0.16281953 0.20013867 0.18240261]\n```\n:::\n:::\n\n\nWhat do these values tell us about our model and data?\n\nYou might want to carry out [multiple regression](https://heartbeat.fritz.ai/implementing-multiple-linear-regression-using-sklearn-43b3d3f2fe8b) with more than one predictor variable, or reduce the number of dimensions, or perhaps address different questions using a clustering algorithm instead with all or a subset of features.\n\n",
    "supporting": [
      "IM939_Lab_5_2_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}