{
  "hash": "930ee36d9b0eefd34dd5306da0964881",
  "result": {
    "markdown": "# Lab: Axes manipulation {#sec-axes-manipulation}\n\nOne way to create potentially misleading visualisations is by manipulating the axes of a plot. Here we illustrate these using one of the FiveThirtyEight data sets, which are available [here](https://data.fivethirtyeight.com).\n\n## Data wrangling\n\nWe are going to use polls from the recent USA presidential election. As before, we load and examine the data.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \nimport seaborn as sns\nimport altair as alt \n\ndf_polls = pd.read_csv('data/presidential_poll_averages_2020.csv')\ndf_polls.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020</td>\n      <td>Wyoming</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>30.81486</td>\n      <td>30.82599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020</td>\n      <td>Wisconsin</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>52.12642</td>\n      <td>52.09584</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020</td>\n      <td>West Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>33.49125</td>\n      <td>33.51517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020</td>\n      <td>Washington</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>59.34201</td>\n      <td>59.39408</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020</td>\n      <td>Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>53.74120</td>\n      <td>53.72101</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFor our analysis, we are going to pick estimates from 11/3/2020 for the swing states of Florida, Texas, Arizona, Michigan, Minnesota and Pennsylvania.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf_nov = df_polls[\n    (df_polls.modeldate == '11/3/2020')\n]\n\ndf_nov = df_nov[\n    (df_nov.candidate_name == 'Joseph R. Biden Jr.') |\n    (df_nov.candidate_name == 'Donald Trump')\n]\n\ndf_swing = df_nov[\n    (df_nov['state'] == 'Florida') |\n    (df_nov['state'] == 'Texas' ) |\n    (df_nov['state'] == 'Arizona' ) |\n    (df_nov['state'] == 'Michigan' ) |\n    (df_nov['state'] == 'Minnesota' ) |\n    (df_nov['state'] == 'Pennsylvania' ) \n]\n\ndf_swing\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.46643</td>\n      <td>47.44781</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2020</td>\n      <td>Pennsylvania</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>50.22000</td>\n      <td>50.20422</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>2020</td>\n      <td>Minnesota</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>51.86992</td>\n      <td>51.84517</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>2020</td>\n      <td>Michigan</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>51.17806</td>\n      <td>51.15482</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>2020</td>\n      <td>Florida</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>49.09162</td>\n      <td>49.08035</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>2020</td>\n      <td>Arizona</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>48.72237</td>\n      <td>48.70539</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>48.57118</td>\n      <td>48.58794</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>2020</td>\n      <td>Pennsylvania</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>45.57216</td>\n      <td>45.55034</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>2020</td>\n      <td>Minnesota</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>42.63638</td>\n      <td>42.66826</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2020</td>\n      <td>Michigan</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>43.20577</td>\n      <td>43.23326</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>2020</td>\n      <td>Florida</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>46.68101</td>\n      <td>46.61909</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>2020</td>\n      <td>Arizona</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>46.11074</td>\n      <td>46.10181</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Default barplot\n\nWe can look at the relative performance of the candidates within each state using a nested bar plot.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nax = sns.barplot(\n    data = df_swing, \n    x = 'state', \n    y = 'pct_estimate', \n    hue = 'candidate_name')\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_6_2-AxisManipulation_files/figure-pdf/cell-4-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Altering the axes\n\nAltering the axis increases the distance between the bars. Some might say that is misleading.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nax = sns.barplot(\n    data = df_swing, \n    x = 'state', \n    y = 'pct_estimate', \n    hue = 'candidate_name')\n\nax.set(ylim=(41, 52))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n[(41.0, 52.0)]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_6_2-AxisManipulation_files/figure-pdf/cell-5-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWhat do you think?\n\nHow about if we instead put the data on the full 0 to 100 scale?\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nax = sns.barplot(\n    data = df_swing, \n    x = 'state', \n    y = 'pct_estimate', \n    hue = 'candidate_name')\n\nax.set(ylim=(0, 100))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[(0.0, 100.0)]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_6_2-AxisManipulation_files/figure-pdf/cell-6-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can do the same thing in Altair.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nalt.Chart(df_swing).mark_bar().encode(\n    x='candidate_name',\n    y='pct_estimate',\n    color='candidate_name',\n    column = alt.Column('state:O', spacing = 5, header = alt.Header(labelOrient = \"bottom\")),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nNote the need for the alt column. What happens if you do not provide an alt column?\n\nPassing the domain option to the scale of the Y axis allows us to choose the y axis range.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nalt.Chart(df_swing).mark_bar().encode(\n    x='candidate_name',\n    y=alt.Y('pct_estimate', scale=alt.Scale(domain=[42,53])),\n    color='candidate_name',\n    column = alt.Column('state:O', spacing = 5, header = alt.Header(labelOrient = \"bottom\")),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\n## Altering the proportions\n\nWe can even be a bit tricky and stretch out the difference.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nalt.Chart(df_swing).mark_bar().encode(\n    x='candidate_name',\n    y=alt.Y('pct_estimate', scale=alt.Scale(domain=[42,53])),\n    color='candidate_name',\n    column = alt.Column('state:O', spacing = 5, header = alt.Header(labelOrient = \"bottom\")),\n).properties(\n    width=20,\n    height=600\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\n## Default line plot\n\nIt is not just bar plot that you can have fun with. Line plots are another interesting example.\n\nFor our simple line plot, we will need the poll data for a single state.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_texas = df_polls[\n    df_polls['state'] == 'Texas'\n]\n\ndf_texas_bt = df_texas[\n    (df_texas['candidate_name'] == 'Donald Trump') |\n    (df_texas['candidate_name'] == 'Joseph R. Biden Jr.')\n]\n\ndf_texas_bt.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.46643</td>\n      <td>47.44781</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>48.57118</td>\n      <td>48.58794</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/2/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.46643</td>\n      <td>47.44781</td>\n    </tr>\n    <tr>\n      <th>287</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/2/2020</td>\n      <td>Donald Trump</td>\n      <td>48.57118</td>\n      <td>48.58794</td>\n    </tr>\n    <tr>\n      <th>455</th>\n      <td>2020</td>\n      <td>Texas</td>\n      <td>11/1/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.45590</td>\n      <td>47.43400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe modeldate column is a string (object) and not date time. So we need to change that: we will create a new datetime column called `modeldate`.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n#df_texas_bt.loc[df_texas_bt[]]\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint('Before\\n')\nprint(df_texas_bt.dtypes)\ndf_texas_bt['date'] = pd.to_datetime(df_texas_bt.loc[:,'modeldate'], format='%m/%d/%Y').copy()\nprint('\\nAfter\\n')\nprint(df_texas_bt.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBefore\n\ncycle                   int64\nstate                  object\nmodeldate              object\ncandidate_name         object\npct_estimate          float64\npct_trend_adjusted    float64\ndtype: object\n\nAfter\n\ncycle                          int64\nstate                         object\nmodeldate                     object\ncandidate_name                object\npct_estimate                 float64\npct_trend_adjusted           float64\ndate                  datetime64[ns]\ndtype: object\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_41394/3228356118.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_texas_bt['date'] = pd.to_datetime(df_texas_bt.loc[:,'modeldate'], format='%m/%d/%Y').copy()\n```\n:::\n:::\n\n\nCreate our line plot.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nalt.Chart(df_texas_bt).mark_line().encode(\n    y=alt.Y('pct_estimate', scale=alt.Scale(domain=[42,53])),\n    x='date',\n    color='candidate_name')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nSometimes multiple axis are used for each line, or in a combined line and bar plot.\n\nThe example [here](https://altair-viz.github.io/user_guide/scale_resolve.html) uses a dataframe with a column for each line. Our data does not have that.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_texas_bt\nour_df = df_texas_bt[['candidate_name', 'pct_estimate', 'date']]\nour_df\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.46643</td>\n      <td>2020-11-03</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>Donald Trump</td>\n      <td>48.57118</td>\n      <td>2020-11-03</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.46643</td>\n      <td>2020-11-02</td>\n    </tr>\n    <tr>\n      <th>287</th>\n      <td>Donald Trump</td>\n      <td>48.57118</td>\n      <td>2020-11-02</td>\n    </tr>\n    <tr>\n      <th>455</th>\n      <td>Joseph R. Biden Jr.</td>\n      <td>47.45590</td>\n      <td>2020-11-01</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>28931</th>\n      <td>Donald Trump</td>\n      <td>49.09724</td>\n      <td>2020-02-29</td>\n    </tr>\n    <tr>\n      <th>28963</th>\n      <td>Joseph R. Biden Jr.</td>\n      <td>45.30901</td>\n      <td>2020-02-28</td>\n    </tr>\n    <tr>\n      <th>28995</th>\n      <td>Donald Trump</td>\n      <td>49.09676</td>\n      <td>2020-02-28</td>\n    </tr>\n    <tr>\n      <th>29027</th>\n      <td>Joseph R. Biden Jr.</td>\n      <td>45.30089</td>\n      <td>2020-02-27</td>\n    </tr>\n    <tr>\n      <th>29058</th>\n      <td>Donald Trump</td>\n      <td>49.07925</td>\n      <td>2020-02-27</td>\n    </tr>\n  </tbody>\n</table>\n<p>502 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nPivot table allows us to reshape our dataframe.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nour_df = pd.pivot_table(our_df, index=['date'], columns = 'candidate_name')\nour_df.columns = our_df.columns.to_series().str.join('_')\nour_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pct_estimate_Donald Trump</th>\n      <th>pct_estimate_Joseph R. Biden Jr.</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-02-27</th>\n      <td>49.07925</td>\n      <td>45.30089</td>\n    </tr>\n    <tr>\n      <th>2020-02-28</th>\n      <td>49.09676</td>\n      <td>45.30901</td>\n    </tr>\n    <tr>\n      <th>2020-02-29</th>\n      <td>49.09724</td>\n      <td>45.30896</td>\n    </tr>\n    <tr>\n      <th>2020-03-01</th>\n      <td>49.09724</td>\n      <td>45.30895</td>\n    </tr>\n    <tr>\n      <th>2020-03-02</th>\n      <td>48.91861</td>\n      <td>45.37694</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDate here is the dataframe index. We want it to be a column.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nour_df['date1'] = our_df.index\nour_df.columns = ['Trump', 'Biden', 'date1']\nour_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Trump</th>\n      <th>Biden</th>\n      <th>date1</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-02-27</th>\n      <td>49.07925</td>\n      <td>45.30089</td>\n      <td>2020-02-27</td>\n    </tr>\n    <tr>\n      <th>2020-02-28</th>\n      <td>49.09676</td>\n      <td>45.30901</td>\n      <td>2020-02-28</td>\n    </tr>\n    <tr>\n      <th>2020-02-29</th>\n      <td>49.09724</td>\n      <td>45.30896</td>\n      <td>2020-02-29</td>\n    </tr>\n    <tr>\n      <th>2020-03-01</th>\n      <td>49.09724</td>\n      <td>45.30895</td>\n      <td>2020-03-01</td>\n    </tr>\n    <tr>\n      <th>2020-03-02</th>\n      <td>48.91861</td>\n      <td>45.37694</td>\n      <td>2020-03-02</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCreating our new plot, to fool all those people who expect Trump to win in Texas.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbase = alt.Chart(our_df).encode(\n        alt.X('date1')\n)\n\nline_A = base.mark_line(color='#5276A7').encode(\n    alt.Y('Trump', axis=alt.Axis(titleColor='#5276A7'), scale=alt.Scale(domain=[42,53]))\n)\n\nline_B = base.mark_line(color='#F18727').encode(\n    alt.Y('Biden', axis=alt.Axis(titleColor='#F18727'), scale=alt.Scale(domain=[35,53]))\n)\n\nalt.layer(line_A, line_B).resolve_scale(y='independent')\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nalt.LayerChart(...)\n```\n:::\n:::\n\n\nDid you see what I did there?\n\nOf course, mixed axis plots are rarely purely line plots. Instead they can be mixes of different axis. For these and other plotting mistakes, the economist has a nice article [here](https://medium.economist.com/mistakes-weve-drawn-a-few-8cdd8a42d368). You may want to try some of these plots with this data set or the world indicators dataset from a few weeks ago.\n\n",
    "supporting": [
      "IM939_Lab_6_2-AxisManipulation_files/figure-pdf"
    ],
    "filters": []
  }
}