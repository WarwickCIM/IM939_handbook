{
  "hash": "af7c7fdac4473e835a14bfd5759b34d6",
  "result": {
    "markdown": "# Lab: Visualising Data (1)\n\nIt is far easier to look at trends in data by creating plots. Below we do just that and briefly look at plotting data by date.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('data/raw/office_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Plots\n\n## Univariate - a single variable\n\nPlots are a great way to see trends.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n?df.plot\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-5-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can look at points instead of lines.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf['total_votes'].plot(title='Total Votes')\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<Axes: title={'center': 'Total Votes'}>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-6-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n?df.plot\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf['imdb_rating'].plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-8-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nOr we could create subplots.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf.plot(subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([<Axes: >, <Axes: >, <Axes: >, <Axes: >], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-9-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nSeason and episode is not at all informative here.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].plot(subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([<Axes: >, <Axes: >], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-10-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n?df.plot\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].plot(subplots=True, kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([<Axes: ylabel='Frequency'>, <Axes: ylabel='Frequency'>],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-12-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nUnfortunatly, our x axis is bunched up. The above tells us that the all our IMDB ratings are between 0 and a little less than 1000... not useful.\n\nProbably best to plot them individually.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf[['imdb_rating']].plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<Axes: ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-13-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nQuite a sensible guassian shape (a central point with the frequency decreasing symmetrically).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf[['total_votes']].plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<Axes: ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-14-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nA positively skewed distribution - many smaller values and very few high values.\n\n## Bivariate\n\nThe number of votes and the imdb rating are not independent events. These two data variables are related.\n\nScatter plots are simple ways to explore the relationship between two data variables. Note, I use the term data variables instead or just variables to avoid any confusion.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf.plot(x='imdb_rating', y='total_votes', kind='scatter', title='IMDB ratings and total number of votes')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<Axes: title={'center': 'IMDB ratings and total number of votes'}, xlabel='imdb_rating', ylabel='total_votes'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-15-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nThat is really interesting. The episodes with the highest rating also have the greatest number of votes. There was a cleary a great outpouring of happiness there.\n\nWhich episodes were they?\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf[df['total_votes'] > 5000]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>77</th>\n      <td>5</td>\n      <td>13</td>\n      <td>Stress Relief</td>\n      <td>9.6</td>\n      <td>5948</td>\n      <td>2009-02-01</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>7</td>\n      <td>21</td>\n      <td>Goodbye, Michael</td>\n      <td>9.7</td>\n      <td>5749</td>\n      <td>2011-04-28</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nExcellent. Any influence of season on votes?\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf.plot(x='season', y='imdb_rating', kind='scatter', title='IMDB ratings and season')\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<Axes: title={'center': 'IMDB ratings and season'}, xlabel='season', ylabel='imdb_rating'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-17-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nSeason 8 seems to be a bit low. But nothing too extreme.\n\n## Dates\n\nOur data contains air date information. Currently, that column is 'object' or a string.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nseason           int64\nepisode          int64\ntitle           object\nimdb_rating    float64\ntotal_votes      int64\nair_date        object\ndtype: object\n```\n:::\n:::\n\n\nWe can set this to be datetime instead. That will help us plot the time series of the data.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf['air_date'] =  pd.to_datetime(df['air_date'])\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nseason                  int64\nepisode                 int64\ntitle                  object\nimdb_rating           float64\ntotal_votes             int64\nair_date       datetime64[ns]\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf.plot(x = 'air_date', y = 'total_votes', kind='scatter')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<Axes: xlabel='air_date', ylabel='total_votes'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-21-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can look at multiple variables using subplots.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf[['air_date', 'total_votes', 'imdb_rating']].plot(x = 'air_date', subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([<Axes: xlabel='air_date'>, <Axes: xlabel='air_date'>], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-22-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Multivariate\n\nOur dataset is quite simple. But we can look at two variables (total_votes, imdb_rating) by a third (season).\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf.groupby('season').plot(kind='scatter', y = 'total_votes', x = 'imdb_rating')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nseason\n1    Axes(0.125,0.11;0.775x0.77)\n2    Axes(0.125,0.11;0.775x0.77)\n3    Axes(0.125,0.11;0.775x0.77)\n4    Axes(0.125,0.11;0.775x0.77)\n5    Axes(0.125,0.11;0.775x0.77)\n6    Axes(0.125,0.11;0.775x0.77)\n7    Axes(0.125,0.11;0.775x0.77)\n8    Axes(0.125,0.11;0.775x0.77)\n9    Axes(0.125,0.11;0.775x0.77)\ndtype: object\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-2.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-3.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-4.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-5.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-6.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-7.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-8.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-9.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-pdf/cell-23-output-10.pdf){fig-pos='H'}\n:::\n:::\n\n\nThere is a lot more you can do with plots with Pandas and Matplotlib. A good resource is the [visualisation section of the pandas documentation](https://pandas.pydata.org/docs/user_guide/visualization.html#basic-plotting-plot).\n\n",
    "supporting": [
      "IM939_Lab_2_2_files/figure-pdf"
    ],
    "filters": []
  }
}