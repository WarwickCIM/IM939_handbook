{
  "hash": "c91540a791e2fb92af97dff8a88c3cec",
  "result": {
    "markdown": "::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n# Exercise: Regression\n\nNow it's your turn to prepare a linear regression model.\n\n## Scikit Learn\n\nYou can use here as well Scikit Learn library. More information you can find here:\n<https://www.tutorialspoint.com/scikit_learn/scikit_learn_linear_regression.htm>\n\n\n## Wine Dataset\n\nFor this exercise we will be using Wine Quality Dataset from @cortezWineQuality2009. You can find more information about it here: <https://doi.org/10.24432/C56S3T>\n\nWhat would be your research question? What do you like to learn, given the data you have?\n\n## Reading Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nwine = pd.read_excel('data/raw/winequality-red_v2.xlsx', engine = 'openpyxl')\n\n#You might need to use encoding, then the code will look like:\n# wine = pd.read_excel('data/raw/winequality-red_v2.xlsx', engine = 'openpyxl', encoding='UTF-8')\n```\n:::\n\n\n## Data exploration\nLet's check the data, their distribution and central tendencies\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint('shape:', wine.shape)\nwine.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (1599, 12)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fixed_acidity</th>\n      <th>volatile_acidity</th>\n      <th>citric_acid</th>\n      <th>residual_sugar</th>\n      <th>chlorides</th>\n      <th>free_sulfur_dioxide</th>\n      <th>total_sulfur_dioxide</th>\n      <th>density</th>\n      <th>pH</th>\n      <th>sulphates</th>\n      <th>alcohol</th>\n      <th>quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.4</td>\n      <td>0.70</td>\n      <td>0.00</td>\n      <td>1.9</td>\n      <td>0.076</td>\n      <td>11.0</td>\n      <td>34.0</td>\n      <td>0.9978</td>\n      <td>3.51</td>\n      <td>0.56</td>\n      <td>9.4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7.8</td>\n      <td>0.88</td>\n      <td>0.00</td>\n      <td>2.6</td>\n      <td>0.098</td>\n      <td>25.0</td>\n      <td>67.0</td>\n      <td>0.9968</td>\n      <td>3.20</td>\n      <td>0.68</td>\n      <td>9.8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.8</td>\n      <td>0.76</td>\n      <td>0.04</td>\n      <td>2.3</td>\n      <td>0.092</td>\n      <td>15.0</td>\n      <td>54.0</td>\n      <td>0.9970</td>\n      <td>3.26</td>\n      <td>0.65</td>\n      <td>9.8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11.2</td>\n      <td>0.28</td>\n      <td>0.56</td>\n      <td>1.9</td>\n      <td>0.075</td>\n      <td>17.0</td>\n      <td>60.0</td>\n      <td>0.9980</td>\n      <td>3.16</td>\n      <td>0.58</td>\n      <td>9.8</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.4</td>\n      <td>0.70</td>\n      <td>0.00</td>\n      <td>1.9</td>\n      <td>0.076</td>\n      <td>11.0</td>\n      <td>34.0</td>\n      <td>0.9978</td>\n      <td>3.51</td>\n      <td>0.56</td>\n      <td>9.4</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Check your variables\n\nUse lmplot() function from Seaborn to explore linear relationship \nInput data must be in a Pandas DataFrame. To plot them, we provide the predictor and response variable names along with the dataset\n\n\nDid you find outliers or missing data? \nYou can use function np.unique and find the unique elements of an array.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n?np.unique\n```\n:::\n\n\n\nDo you need to remove any cases?\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n \n```\n:::\n\n\n\nDid you need to standarize data?\n\n\nIf you standarized data, try to plot them again\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n \n```\n:::\n\n\n## Form ideas about the data \nBefore you move on to exploring correlations and maybe other kinds of models, try and build some sense of understanding of the relations between the variables. What are some relations that stand out. Do you know a bit more about the wines in this dataset or wines more generally?\n\n## Move on to building some simple models\n\nYou can calculates a Pearson correlation coefficient and the p-value for testing non-correlation.\n\nWe will be using the scikit-learn package here. This is a package we will be making use of very frequently.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport scipy.stats\nscipy.stats.pearsonr(wine.???.values, wine.???.values)\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: invalid syntax (987973612.py, line 2)\n```\n:::\n:::\n\n\nusing **Scikit-learn**, build a simple linear regression (OLS) \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\n\nest = LinearRegression(fit_intercept = True)\n\nx = wine[['???']]\ny = wine[['???']]\n\nest.fit(x, y)\n\nprint(\"Coefficients:\", est.coef_)\nprint (\"Intercept:\", est.intercept_)\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: \"None of [Index(['???'], dtype='object')] are in the [columns]\"\n```\n:::\n:::\n\n\nWhat is the model's mean squared error ($MSE$) and the coefficient of determination ($R^2$) ?\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfrom sklearn import metrics\n\n# Analysis for all months together.\nx = wdi[['???']]\ny = wdi[['???']]\nmodel = LinearRegression()\nmodel.fit(x, y)\ny_hat = model.predict(x)\nplt.plot(x, y,'o', alpha = 0.5)\nplt.plot(x, y_hat, 'r', alpha = 0.5)\nplt.xlabel('?')\nplt.ylabel('?')\nprint (\"MSE:\", metrics.mean_squared_error(y_hat, y))\nprint (\"R^2:\", metrics.r2_score(y_hat, y))\nprint (\"var:\", y.var())\nplt.savefig(\"?.png\", dpi = 300, bbox_inches = 'tight')\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'wdi' is not defined\n```\n:::\n:::\n\n\nWhat's the conclusion?\n\n\n",
    "supporting": [
      "IM939_Lab_3_Exercise_Linear_Regression_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}