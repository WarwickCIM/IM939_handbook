{
  "hash": "97c40004eba694c09baefa1405fce6c1",
  "result": {
    "markdown": "# Lab: Visualising Data {#sec-pandas-datavis}\n\nIn the previous chapter we started exploring some data by using some methods such as `describe`, `info`, `head`, `shape`... However, it is usually far easier to look at trends in data by creating plots. \n\nIn this chapter we will be using `pandas`' built-in visualisation capabilities via [`matplotlib`](https://matplotlib.org/) to create some basic (but quick!) data visualisations from the _The Office_ dataset. We will be using these visualisations on the next chapter, whereas on @sec-seaborn we will use another plotting library to create customised visualisations.\n\n## Starting\n\nAs usual, we will be starting by loading the required libraries and dataset(s):\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('data/raw/office_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Check our dataset.\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Univariate plots - a single variable\n\nUnivariate plots are a great way to see trends. We will create them using  `plot` method.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Read the documentation to understand how to use plot.\n?df.plot\n```\n:::\n\n\nWe can use `plot` to quicky visualise every variable[^variables] in the dataset.\n\n[^variables]: Actually this may not be accurate. Are you missing any column? Can you guess why are they missing?\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Create a plot for every variable in the dataset\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-5-output-2.png){width=583 height=411}\n:::\n:::\n\n\nWe can look at a specific column\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Visualise a column and add a title.\ndf['total_votes'].plot(title='Total Votes')\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<Axes: title={'center': 'Total Votes'}>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-6-output-2.png){width=583 height=431}\n:::\n:::\n\n\n### Subplots\n\nWe can also create subplots, where every variable is plotted individually and put next to the others, while sharing the axis.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.plot(subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([<Axes: >, <Axes: >, <Axes: >, <Axes: >], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-7-output-2.png){width=583 height=411}\n:::\n:::\n\n\nSeason and episode is not at all informative here.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].plot(subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([<Axes: >, <Axes: >], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-8-output-2.png){width=583 height=411}\n:::\n:::\n\n\n### Histograms\n\nOften times, instead of seeing the actual values we may be interested in seeing how they are distributed. This is known as a [histogram](https://en.wikipedia.org/wiki/Histogram), and we can create them vy changing the plot type using the `kind` argument:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].plot(subplots=True, kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([<Axes: ylabel='Frequency'>, <Axes: ylabel='Frequency'>],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-9-output-2.png){width=593 height=411}\n:::\n:::\n\n\nUnfortunatly, since subplots share axes, our x axis is bunched up. The above tells us that the all our IMDB ratings are between 0 and a little less than 1000... not useful.\n\nProbably best to plot them individually.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf[['imdb_rating']].plot(kind='hist', title = \"Ratings per episode\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Axes: title={'center': 'Ratings per episode'}, ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-10-output-2.png){width=585 height=431}\n:::\n:::\n\n\nQuite a sensible gaussian shape (a central point with the frequency decreasing symmetrically).\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf[['total_votes']].plot(kind='hist', title= \"Total votes per chapter\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<Axes: title={'center': 'Total votes per chapter'}, ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-11-output-2.png){width=593 height=431}\n:::\n:::\n\n\nA positively skewed distribution - many smaller values and very few high values.\n\n## Bivariate - Two variables {#sec-dv-bibariate}\n\nSometimes, instead of visualising variables individually, we may want to see them in relation to others, so we can identify possible correlations. **Scatter plots** are simple ways to explore the relationship between two variables, where one is displayed on the `X` axis and the other one in the `Y` axis.\n\nWe may want to see if the number of votes and the imdb rating are not independent events. In other words, we want to know if these two data variables are related. We will be creating a scatterplot using the following syntax: `<object>.plot(x = \"<variable1>\", y = \"<variable2>\", kind = \"scatter\")`\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Create a scatterplot\ndf.plot(x='imdb_rating', y='total_votes', kind='scatter', title='IMDB ratings and total number of votes')\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<Axes: title={'center': 'IMDB ratings and total number of votes'}, xlabel='imdb_rating', ylabel='total_votes'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-12-output-2.png){width=602 height=449}\n:::\n:::\n\n\nThat is really interesting. The episodes with the highest rating also have the greatest number of votes. There was a cleary a great outpouring of happiness there.\n\n::: {.callout-caution collapse=\"true\"}\n### Which episodes were the most voted?\n\nAs seen previously, we could filter our dataset:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf[df['total_votes'] > 5000]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>77</th>\n      <td>5</td>\n      <td>13</td>\n      <td>Stress Relief</td>\n      <td>9.6</td>\n      <td>5948</td>\n      <td>2009-02-01</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>7</td>\n      <td>21</td>\n      <td>Goodbye, Michael</td>\n      <td>9.7</td>\n      <td>5749</td>\n      <td>2011-04-28</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are three chapters which received more than 5,000 votes.\n:::\n\n\nExcellent. We may want to know if there's any influence of season on the ratings:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf.plot(x='season', y='imdb_rating', kind='scatter', title='IMDB ratings and season')\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<Axes: title={'center': 'IMDB ratings and season'}, xlabel='season', ylabel='imdb_rating'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-14-output-2.png){width=589 height=449}\n:::\n:::\n\n\nSeason 8 seems to be a bit low. But nothing too extreme.\n\n## Dates\n\nOur data contains air date information. Currently, that column is `object` or a string.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nseason           int64\nepisode          int64\ntitle           object\nimdb_rating    float64\ntotal_votes      int64\nair_date        object\ndtype: object\n```\n:::\n:::\n\n\nWe know this is not accurate, so we can set this to be datetime instead by using the method `datetime`. That will help us plot the time series of the data.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Convert air_date to a date.\ndf['air_date2'] =  pd.to_datetime(df['air_date'])\n\n# Check the result\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nseason                  int64\nepisode                 int64\ntitle                  object\nimdb_rating           float64\ntotal_votes             int64\nair_date               object\nair_date2      datetime64[ns]\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.plot(x = 'air_date2', y = 'total_votes', kind='scatter')\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<Axes: xlabel='air_date2', ylabel='total_votes'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-18-output-2.png){width=602 height=429}\n:::\n:::\n\n\n::: callout-caution\n\n### The importance of using the right data type\n\nCan you spot any difference when trying to plot a date that is not stored as a date data type?\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf.plot(x = 'air_date', y = 'total_votes', kind='scatter')\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<Axes: xlabel='air_date', ylabel='total_votes'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-19-output-2.png){width=617 height=429}\n:::\n:::\n\n\nRight, this is probably not what we would expect!\n:::\n\nWe can look at multiple variables using subplots.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf[['air_date2', 'total_votes', 'imdb_rating']].plot(\n    x = 'air_date2', subplots=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([<Axes: xlabel='air_date2'>, <Axes: xlabel='air_date2'>],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-20-output-2.png){width=583 height=402}\n:::\n:::\n\n\n## Multivariate\n\nOur dataset is quite simple. But we can look at two variables (`total_votes`, `imdb_rating`) by a third one (`season`), used as grouping.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf.groupby('season').plot(\n    kind='scatter', y = 'total_votes', x = 'imdb_rating')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nseason\n1    Axes(0.125,0.11;0.775x0.77)\n2    Axes(0.125,0.11;0.775x0.77)\n3    Axes(0.125,0.11;0.775x0.77)\n4    Axes(0.125,0.11;0.775x0.77)\n5    Axes(0.125,0.11;0.775x0.77)\n6    Axes(0.125,0.11;0.775x0.77)\n7    Axes(0.125,0.11;0.775x0.77)\n8    Axes(0.125,0.11;0.775x0.77)\n9    Axes(0.125,0.11;0.775x0.77)\ndtype: object\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-2.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-3.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-4.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-5.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-6.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-7.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-8.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-9.png){width=602 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_2_files/figure-html/cell-21-output-10.png){width=602 height=429}\n:::\n:::\n\n\nThere is a lot more you can do with plots with Pandas and Matplotlib. A good resource is the [visualisation section of the pandas documentation](https://pandas.pydata.org/docs/user_guide/visualization.html#basic-plotting-plot).\n\n",
    "supporting": [
      "IM939_Lab_2_2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}