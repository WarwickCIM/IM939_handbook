{
  "hash": "0760817ecf289138166cc8694161c7ee",
  "result": {
    "markdown": "# Lab: Poverty and Inequality\n\nThe idea of measuring Poverty and Inequality using the case study on \"The Statistics of Poverty and Inequality\" [@rouncefield_statistics_1995]. The questions that Mary Rouncefield asked her students were the following:\n\n1. Is the world's wealth distributed evenly?\n    What countries are outliers?\n2. Do people living in different countries have similar life expectancies?\n3. Do men and women have similar life expectancies?\n    What is the average difference?\n    What is the minimum difference?\n    What is the maximum difference?\n    In which countries do these occur?\n    What are possible explanations for these differences?\n4. Are birth rates related to death rates?\n5. How quickly are populations growing?\n\nBy looking into 6 variables, you can investigate some major inequalites across the globe.  \n\n## Source\n\nIn this lab, we will be using [World Development Indicators dataset](https://databank.worldbank.org/source/world-development-indicators#) from the World Bank, which contains the following features:![features world bank development indicators](IM939_Lab7-Part2_files/figure-html/5b31f876-1-image-6.png)\n\n\n## Reading the dataset\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_excel('data/WDI_countries_v2.xlsx', sheet_name='Data4')\n```\n:::\n\n\nLet's have a look at our dataset\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Code</th>\n      <th>birthrate</th>\n      <th>Deathrate</th>\n      <th>GNI</th>\n      <th>Lifeexp_female</th>\n      <th>Lifeexp_male</th>\n      <th>Neonatal_death</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AFG</td>\n      <td>32.487</td>\n      <td>6.423</td>\n      <td>2260.0</td>\n      <td>66.026</td>\n      <td>63.047</td>\n      <td>44503.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ALB</td>\n      <td>11.780</td>\n      <td>7.898</td>\n      <td>13820.0</td>\n      <td>80.167</td>\n      <td>76.816</td>\n      <td>243.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>DZA</td>\n      <td>24.282</td>\n      <td>4.716</td>\n      <td>11450.0</td>\n      <td>77.938</td>\n      <td>75.494</td>\n      <td>16407.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AND</td>\n      <td>7.200</td>\n      <td>4.400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AGO</td>\n      <td>40.729</td>\n      <td>8.190</td>\n      <td>6550.0</td>\n      <td>63.666</td>\n      <td>58.064</td>\n      <td>35489.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Missing values\nLet's check if we have any missing data\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.info()\ndf.isna().sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 216 entries, 0 to 215\nData columns (total 7 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Country Code    216 non-null    object \n 1   birthrate       205 non-null    float64\n 2   Deathrate       205 non-null    float64\n 3   GNI             187 non-null    float64\n 4   Lifeexp_female  198 non-null    float64\n 5   Lifeexp_male    198 non-null    float64\n 6   Neonatal_death  193 non-null    float64\ndtypes: float64(6), object(1)\nmemory usage: 11.9+ KB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nCountry Code       0\nbirthrate         11\nDeathrate         11\nGNI               29\nLifeexp_female    18\nLifeexp_male      18\nNeonatal_death    23\ndtype: int64\n```\n:::\n:::\n\n\nLooks like there are null values in all but one column (Country Code)\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Let's look at the distribution of values in the birthrate and deathrate columns\ndf.boxplot(column=['birthrate', 'Deathrate'])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-5-output-2.png){width=566 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Let's look at the distribution of values in terms of male and female life expectancy\ndf.boxplot(column=['Lifeexp_female', 'Lifeexp_male'])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-6-output-2.png){width=566 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Let's look at the distribution of the Gross National Income (surely we expect to see outliers!)\ndf.boxplot(column=['GNI'])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-7-output-2.png){width=600 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# So, as expected, the world's wealth is not distributed evenly, but what countries are the outliers as Mary Rouncefield asked?\n# We don't have the geographic coordinates as with our Hate Crime dataset to project on a map\n# But perhaps we can think of other ways to get this information. Following is one way of doing this. \n\n# Get the 25th and 75th percentile GNI values\nGNI_quartiles = df['GNI'].describe()[['25%', '75%']]\n\n# Calculate the IQR\nIQR_GNI = GNI_quartiles['75%'] - GNI_quartiles['25%']\n\n# Calculate the whiskers\nlb_GNI = GNI_quartiles['25%'] - 1.5 * IQR_GNI\nub_GNI = GNI_quartiles['75%'] + 1.5 * IQR_GNI\n\n# Retrieve the outliers\noutliers_GNI_df = df[(df['GNI'] < lb_GNI) | (df['GNI'] > ub_GNI)]\n\n# Get Country Codes for the outliers\noutliers_GNI_countries = outliers_GNI_df['Country Code']\noutliers_GNI_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n85     HKG\n92     IRL\n115    LUX\n116    MAC\n146    NOR\n158    QAT\n170    SGP\n187    CHE\n203    ARE\n205    USA\nName: Country Code, dtype: object\n```\n:::\n:::\n\n\nPerhaps you can checkout this link if you are doubtful about the [country names and codes](https://wits.worldbank.org/wits/wits/witshelp/content/codes/country_codes.htm)\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# As with Part 1, let's standardise our data before we attempt further modelling using the data\nfrom sklearn import preprocessing\nimport numpy as np\nimport seaborn as sns\n\n# Get column names first\ndf_stand = df[['birthrate', 'Deathrate', 'GNI', 'Lifeexp_female', 'Lifeexp_male', 'Neonatal_death']]\nnames = df_stand.columns\n\n# Create the Scaler object\nscaler = preprocessing.StandardScaler()\n\n# Fit our data on the scaler object\ndf2 = scaler.fit_transform(df_stand)\n\n# Check what type is df2? (Do you recollect this from Part 1?)\ntype(df2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Let's convert the numpy array into a DataFrame before further processing\ndf2 = pd.DataFrame(df2, columns=names)\ndf2.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birthrate</th>\n      <th>Deathrate</th>\n      <th>GNI</th>\n      <th>Lifeexp_female</th>\n      <th>Lifeexp_male</th>\n      <th>Neonatal_death</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>211</th>\n      <td>-0.727171</td>\n      <td>0.200024</td>\n      <td>NaN</td>\n      <td>0.994355</td>\n      <td>0.807538</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>0.982566</td>\n      <td>-1.563870</td>\n      <td>-0.661830</td>\n      <td>0.051167</td>\n      <td>0.262031</td>\n      <td>-0.233989</td>\n    </tr>\n    <tr>\n      <th>213</th>\n      <td>1.101866</td>\n      <td>-0.604926</td>\n      <td>NaN</td>\n      <td>-0.942333</td>\n      <td>-0.798039</td>\n      <td>0.209120</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>1.686551</td>\n      <td>-0.425077</td>\n      <td>-0.813823</td>\n      <td>-1.114030</td>\n      <td>-1.323007</td>\n      <td>0.039069</td>\n    </tr>\n    <tr>\n      <th>215</th>\n      <td>1.124585</td>\n      <td>0.117514</td>\n      <td>-0.840505</td>\n      <td>-1.604284</td>\n      <td>-1.462458</td>\n      <td>-0.026205</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Now that our data has been standardised, let's look at the distribution across all columns\nax = sns.boxplot(data=df2, orient=\"h\")\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-11-output-1.png){width=654 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# There are clearly several outliers in some columns. Let's take a look at the numbers\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birthrate</th>\n      <th>Deathrate</th>\n      <th>GNI</th>\n      <th>Lifeexp_female</th>\n      <th>Lifeexp_male</th>\n      <th>Neonatal_death</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>187.000000</td>\n      <td>198.000000</td>\n      <td>198.000000</td>\n      <td>193.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>19.637580</td>\n      <td>7.573941</td>\n      <td>20630.427807</td>\n      <td>75.193288</td>\n      <td>70.323854</td>\n      <td>12948.031088</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>9.839573</td>\n      <td>2.636414</td>\n      <td>21044.240160</td>\n      <td>7.870933</td>\n      <td>7.419214</td>\n      <td>48782.770706</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>5.900000</td>\n      <td>1.202000</td>\n      <td>780.000000</td>\n      <td>54.991000</td>\n      <td>50.582000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>10.900000</td>\n      <td>5.800000</td>\n      <td>5090.000000</td>\n      <td>69.497250</td>\n      <td>65.533500</td>\n      <td>163.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>17.545000</td>\n      <td>7.163000</td>\n      <td>13280.000000</td>\n      <td>77.193000</td>\n      <td>71.140500</td>\n      <td>1288.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>27.100000</td>\n      <td>9.100000</td>\n      <td>28360.000000</td>\n      <td>80.776500</td>\n      <td>76.047500</td>\n      <td>7316.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>46.079000</td>\n      <td>15.400000</td>\n      <td>123290.000000</td>\n      <td>87.700000</td>\n      <td>82.300000</td>\n      <td>546427.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Let's look at the histogram for birthrate \ndf[['birthrate']].plot(kind='hist', ec='black')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<Axes: ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-13-output-2.png){width=585 height=411}\n:::\n:::\n\n\nTip for reflection: Is the above a unimodal or bimodal distribution? Positive or negative skew - We have worked on this in earlier labs. Try to recollect/revisit and reflect. Can we see/say any better with a kernel density plot?\n\n::: {.cell .column-page execution_count=13}\n``` {.python .cell-code}\n# Let's create a pairwise plot as we have done many times before to get an idea about the relationship between variables  \nsns.pairplot(data = df.iloc[:,1:])\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-14-output-1.png){width=1416 height=1415}\n:::\n:::\n\n\nHmmm, some likely positive and negative correlations\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Let's check the relationship between birthrate and deathrate\ndf.plot(x = 'birthrate', y = 'Deathrate', kind='scatter')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<Axes: xlabel='birthrate', ylabel='Deathrate'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-15-output-2.png){width=585 height=432}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Let's create a heatmap like we did in Part 1\ncorrMatrix = df.corr(numeric_only=True).round(1) # Again, round(1) so that it's easier to read given number of variables\nsns.heatmap(corrMatrix, annot=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-16-output-1.png){width=645 height=508}\n:::\n:::\n\n\n## How quickly are populations growing?\n\nThis question can be investigated by calculating birth rate minus death rate. \n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Let's add a new column to our DataFrame to indicate the rate of population change (assuming the absence of migration)\ndf['pop_change_rate'] = df['birthrate'] - df['Deathrate']\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Code</th>\n      <th>birthrate</th>\n      <th>Deathrate</th>\n      <th>GNI</th>\n      <th>Lifeexp_female</th>\n      <th>Lifeexp_male</th>\n      <th>Neonatal_death</th>\n      <th>pop_change_rate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AFG</td>\n      <td>32.487</td>\n      <td>6.423</td>\n      <td>2260.0</td>\n      <td>66.026</td>\n      <td>63.047</td>\n      <td>44503.0</td>\n      <td>26.064</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ALB</td>\n      <td>11.780</td>\n      <td>7.898</td>\n      <td>13820.0</td>\n      <td>80.167</td>\n      <td>76.816</td>\n      <td>243.0</td>\n      <td>3.882</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>DZA</td>\n      <td>24.282</td>\n      <td>4.716</td>\n      <td>11450.0</td>\n      <td>77.938</td>\n      <td>75.494</td>\n      <td>16407.0</td>\n      <td>19.566</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AND</td>\n      <td>7.200</td>\n      <td>4.400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>2.800</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AGO</td>\n      <td>40.729</td>\n      <td>8.190</td>\n      <td>6550.0</td>\n      <td>63.666</td>\n      <td>58.064</td>\n      <td>35489.0</td>\n      <td>32.539</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Let's look at the distribution of our new rate of population change column \ndf.boxplot(column=['pop_change_rate'])\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab7-Part2_files/figure-html/cell-18-output-2.png){width=566 height=416}\n:::\n:::\n\n\nLet's investigate the values in the column more deeply:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npop_change_rate_summary = df['pop_change_rate'].describe()\npop_change_rate_summary\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ncount    205.000000\nmean      12.063639\nstd       10.477867\nmin       -6.500000\n25%        2.700000\n50%       11.213000\n75%       20.582000\nmax       37.811000\nName: pop_change_rate, dtype: float64\n```\n:::\n:::\n\n\nThe results range from -6.5 (a decreasing population) to +37.811 (an increasing population). The mean is around 12.06. What does this signify?\n\n",
    "supporting": [
      "IM939_Lab7-Part2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}