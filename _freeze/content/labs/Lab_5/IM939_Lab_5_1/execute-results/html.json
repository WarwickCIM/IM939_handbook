{
  "hash": "3749cb261209ce1714ad039e4e61e64f",
  "result": {
    "markdown": "\n\n# Lab: Clustering and Ground Truth\n\n\nIn this notebook we are going to reflect on how well a given model (a kmeans cluster, a linear regression, dimension reduction, etc.) performs. To do so, we are going to use the Wine Quality Dataset from @cortezWineQuality2009 that we used in the past (@sec-exercise-regression) and you may be familiar with by now (but if you don't, tou can find more information about it here: <https://doi.org/10.24432/C56S3T>).\n\n## Data Wrangling\n\nAs usual, we will start by looking at our data, and making transformations, if needed.\n\n::: {.cell}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv('data/wine.csv')\n\ndf.head()\n```\n:::\n\n\n::: callout-tip\nThere is a column called `Class label` that gives us the ground truth. The wines come from three different cultivars. Knowing the actual grouping helps us to identify how well our methods can capture this ground truth.\n\n:::\n\nFollowing the data wrangling process that was summarised in @sec-week-5-recap, we should first get a sense of our data.\n\n::: {.cell}\n``` {.python .cell-code}\ndf.describe()\n```\n:::\n\n\nAs you can see no variable has any missing data, but the scales of our features vary (e.g., `Magnesium` is in the 100s whereas `Hue` is in the low single digits).\n\nLet's visually inspect how features are distributed using a violin plot:\n\n::: {.cell}\n``` {.python .cell-code}\nimport seaborn as sns\n\ndf_long = df.melt(id_vars='Class label')\n\nsns.violinplot(data = df_long, x = 'variable', y = 'value')\n```\n:::\n\n\nRegretfully, this is not very useful right now, due to the different scales that we detected previously. In this case, it makes sense to normalise our data.\n\n::: {.cell}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MinMaxScaler\n\n# create a scaler object\nscaler = MinMaxScaler()\n\n# fit and transform the data\ndf_norm = pd.DataFrame(scaler.fit_transform(df), columns = df.columns)\n\ndf_long = df_norm.melt(id_vars='Class label')\ndf_long\n```\n:::\n\n\n::: {.cell .column-page}\n``` {.python .cell-code}\n#create seaborn violin plot\nmy_plot = sns.violinplot(data = df_long, x = 'variable', y = 'value')\n\n#rotate x-axis labels\nmy_plot.set_xticklabels(my_plot.get_xticklabels(), rotation=90)\n```\n:::\n\n\nAre there any patterns?\n\nHow about a pairplot?\n\n::: {.cell .column-page}\n``` {.python .cell-code}\nsns.pairplot(data = df_norm.iloc[:,1:])\n```\n:::\n\n\nHmm, a few interesting correlations. Some of our variables are skewed. We could apply some PCA here to look at fewer dimension or even log transform some of the skewed variables.\n\n## Cluster analysis\n\nFor now we will just run a kmeans cluster and then check our results against the ground truth.\n\n### Number of clusters\n\nLets decide how many clusters we need.\n\n::: {.cell}\n``` {.python .cell-code}\nfrom sklearn.cluster import KMeans\n\nks = range(1, 10)\ninertias = []\nfor k in ks:\n    # Create a KMeans instance with k clusters: model\n    model = KMeans(n_clusters=k, n_init = 10)\n    \n    # Fit model to samples\n    model.fit(df.iloc[:,1:])\n    \n    # Append the inertia to the list of inertias\n    inertias.append(model.inertia_)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(ks, inertias, '-o', color='black')\nplt.xlabel('number of clusters, k')\nplt.ylabel('inertia')\nplt.xticks(ks)\nplt.show()\n```\n:::\n\n\nWhat happens if we use the normalised data instead?\n\n::: {.cell}\n``` {.python .cell-code}\nfrom sklearn.cluster import KMeans\n\nks = range(1, 10)\ninertias = []\nfor k in ks:\n    # Create a KMeans instance with k clusters: model\n    model = KMeans(n_clusters=k, n_init = 10)\n    \n    # Fit model to samples\n    model.fit(df_norm.iloc[:,1:])\n    \n    # Append the inertia to the list of inertias\n    inertias.append(model.inertia_)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(ks, inertias, '-o', color='black')\nplt.xlabel('number of clusters, k')\nplt.ylabel('inertia')\nplt.xticks(ks)\nplt.show()\n```\n:::\n\n\n::: callout-warning\n\n### Pause for thought\n\nBoth of the graphs are the same. Is that what you would expect?\n\n:::\n\nThree clusters seems about right (and matches our number of origonal labels).\n\n::: {.cell}\n``` {.python .cell-code}\ndf['Class label'].value_counts()\n```\n:::\n\n\n### Calculate 3 clusters\n\nNow, we are going to calculate three clusters and store each observation's cluster labels into a variable within the original dataframe:\n\n::: {.cell}\n``` {.python .cell-code}\n# Create a KMeans instance with k clusters: model\nk_means = KMeans(n_clusters=3)\n\n# Fit model to samples\ndf_k_means = k_means.fit(df.iloc[:,1:])\n\n# Create a new variable with the fited cluster label.\ndf['Three clusters'] = pd.Series(df_k_means.predict(df.iloc[:,1:].values), index = df.index)\ndf\n```\n:::\n\n\n### Ground Truth Validation\n\nDo our cluster labels match our ground truth? Did our cluster model capture reality?\n\n::: {.cell}\n``` {.python .cell-code}\nct = pd.crosstab(df['Three clusters'], df['Class label'])\nct\n```\n:::\n\n\nIt might be easier to see as a stacked plot (see [this post](https://stackoverflow.com/questions/43544694/using-pandas-crosstab-with-seaborn-stacked-barplots)).\n\n::: {.cell}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nct.plot.bar(stacked=True)\nplt.legend(title='Class label')\n```\n:::\n\n\nHow has the kmeans model done compared to our ground truth?\n\n::: callout-important\nWe need to be really careful here. We notice that it is not easily possible to compare the known class labels to clustering labels. The reason is that the clustering algorithm labels are just arbitrary and not assigned to any deterministic criteria. Each time you run the algorithm, you might get a different id for the labels. **The reason is that the label itself doesn't actually mean anything, what is important is the list of items that are in the same cluster and their relations.**\n\n:::\n\nA way to come over this ambiguity and evaluate the results is to look at a visualisations of the results and compare. But this brings in the question of what type of visualisation to use for looking at the clusters. \n\nAn immediate alternative is to use scatterplots. However, it is not clear which axis to use for clustering. A common method to apply at this stage is to make use of PCA to get a 2D plane where we can project the data points and visualise them over this projection.\n\n::: {.cell}\n``` {.python .cell-code}\ndf.iloc[:,1:14]\n```\n:::\n\n\n::: {.cell}\n``` {.python .cell-code}\nfrom sklearn.decomposition import PCA\n\nn_components = 2\n\npca = PCA(n_components=n_components)\ndf_pca = pca.fit(df.iloc[:,1:14])\ndf_pca_vals = df_pca.transform(df.iloc[:,1:14])\n```\n:::\n\n\nGrab our projections and plot along with our cluster names.\n\n::: {.cell}\n``` {.python .cell-code}\ndf['c1'] = [item[0] for item in df_pca_vals]\ndf['c2'] = [item[1] for item in df_pca_vals]\n\nax = sns.scatterplot(data = df, x = 'c1', y = 'c2', hue = 'Class label')\nax.set_title('Known labels visualised over PCs')\n```\n:::\n\n\nIn the figure above, we colored the points based on the actual labels, we observe that there has been several misclassifications in the figure above (i.e., in the algorithm's results). So one may choose to use an alternative algorithm or devise a better distance metric.\n\n::: {.cell}\n``` {.python .cell-code}\nax = sns.scatterplot(data = df, x = 'c1', y = 'c2', hue = 'Three clusters')\nax.set_title('Results of the algorithm visualised over PCs')\n```\n:::\n\n\nThis shows the parallelism between the clustering algorithm and PCA. By looking at the PCA loadings, we can find out what the x-axis mean and try to interpret the clusters (We leave this as an additional exercise for those interested).\n\nHow might your interpret the above plots? Did the kmeans model identify the ground truth?\n\nHow robust is our clustering? It may be that the kmeans algorithm becamse stuck or that a few outliers have biased the clustering.\n\nTwo ways to check are:\n\n* Running the model multiple times with different initial values.\n* Removing some data and running the modelling multiple times.\n\nRun the below cell a few times. What do you see?\n\n::: {.cell}\n``` {.python .cell-code}\n# Create a KMeans instance with k clusters: model\nk_means = KMeans(n_clusters=3, init='random', n_init = 10)\n\n# Fit model to samples\ndf_k_means = k_means.fit(df.iloc[:,1:14])\n\ndf['Three clusters'] = pd.Series(df_k_means.predict(df.iloc[:,1:14].values), index = df.index)\n\nax = sns.scatterplot(data = df, x = 'c1', y = 'c2', hue = 'Three clusters')\nax.set_title('Results of the algorithm visualised over PCs')\n```\n:::\n\n\nHow about with only 80% of the data?\n\n::: {.cell}\n``` {.python .cell-code}\ndf_sample = df.sample(frac=0.8, replace=False)\n\n# Create a KMeans instance with k clusters: model\nk_means = KMeans(n_clusters=3, init='random', n_init = 10)\n\n# Fit model to samples\ndf_k_means = k_means.fit(df_sample.iloc[:,1:14])\n\ndf_sample['Three clusters'] = pd.Series(df_k_means.predict(df_sample.iloc[:,1:14].values), index = df_sample.index)\n\nax = sns.scatterplot(data = df_sample, x = 'c1', y = 'c2', hue = 'Three clusters')\nax.set_title('Results of the algorithm visualised over PCs')\n```\n:::\n\n\nWe may want to automate the process of resampling the data or rerunning the model then perhaps plotting the different inertia values or creating different plots.\n\nDo you think our clustering algorithm is stable and provide similiar results even when some data is removed or the initial values are random?\n\nIf so, then is our algorithm capturing the ground truth?\n\n",
    "supporting": [
      "IM939_Lab_5_1_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}