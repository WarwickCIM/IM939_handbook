{
  "hash": "9b11aa6df957b07d83b1db58d6ae8f4b",
  "result": {
    "markdown": "# Lab: Pandas\n\nLast session we loaded data using [Pandas](https://pandas.pydata.org/). Here we explore how to use Pandas to read in, process and explore data.\n\nAs before we load pandas and use the read_csv method.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv('data/raw/office_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 188 entries, 0 to 187\nData columns (total 6 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   season       188 non-null    int64  \n 1   episode      188 non-null    int64  \n 2   title        188 non-null    object \n 3   imdb_rating  188 non-null    float64\n 4   total_votes  188 non-null    int64  \n 5   air_date     188 non-null    object \ndtypes: float64(1), int64(3), object(2)\nmemory usage: 8.9+ KB\n```\n:::\n:::\n\n\n## Help!\n\nPython has inbuilt documentation. To access this add a ? before an object or method.\n\nFor example, our dataframe\n\n::: {.cell jupyter='{\"outputs_hidden\":true}' execution_count=3}\n``` {.python .cell-code}\n?df.info\n```\n:::\n\n\nThe dtypes property (properties of obejct are values associated with the object and are not called with a () at the end).\n\n::: {.cell jupyter='{\"outputs_hidden\":true}' execution_count=4}\n``` {.python .cell-code}\n?df.dtypes\n```\n:::\n\n\nThe info method for dataframes.\n\n::: {.cell jupyter='{\"outputs_hidden\":true}' execution_count=5}\n``` {.python .cell-code}\n?df.info\n```\n:::\n\n\nThe below is quite long. But goes give you the various arguments (options) you can use with the method.\n\n::: {.cell jupyter='{\"outputs_hidden\":true}' execution_count=6}\n``` {.python .cell-code}\n?pd.read_csv\n```\n:::\n\n\nThe Pandas documentation is rather good. Relevent to our below work is:\n\n* [What kind of data does pandas handle?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)\n* [How to calculate summary statistics?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)\n* [How to create plots in pandas?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/04_plotting.html#min-tut-04-plotting)\n* [How to handle time series data with ease?](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/09_timeseries.html#min-tut-09-timeseries)\n\nI also found [a rather nice series of lessons a kind person put together](https://bitbucket.org/hrojas/learn-pandas/src/master/). There are lots of online tutorials which will help you.\n\n## Structure\n\nHow do we find out the structure of our data?\n\nWell, the variable df is now a pandas DataFrame object.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntype(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nThe DataFrame object has lots of built in methods and attributes.\n\nThe info method gives us information about datatypes, dimensions and the presence of null values in our dataframe.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 188 entries, 0 to 187\nData columns (total 6 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   season       188 non-null    int64  \n 1   episode      188 non-null    int64  \n 2   title        188 non-null    object \n 3   imdb_rating  188 non-null    float64\n 4   total_votes  188 non-null    int64  \n 5   air_date     188 non-null    object \ndtypes: float64(1), int64(3), object(2)\nmemory usage: 8.9+ KB\n```\n:::\n:::\n\n\nWe can just look at the datatypes if we want.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nseason           int64\nepisode          int64\ntitle           object\nimdb_rating    float64\ntotal_votes      int64\nair_date        object\ndtype: object\n```\n:::\n:::\n\n\nOr just the dimensions.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(188, 6)\n```\n:::\n:::\n\n\nIn this case, there are only 188 rows. But for larger datasets we might want to look at the head (top 5) and tail (bottom 5) rows.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe may need to put together a dataset.\n\nConsider the two dataframe below\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_1 = pd.read_csv('data/raw/office1.csv', encoding='UTF-8')\ndf_2 = pd.read_csv('data/raw/office2.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5-1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>8.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9-13</td>\n      <td>9</td>\n      <td>13</td>\n      <td>7.7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5-6</td>\n      <td>5</td>\n      <td>6</td>\n      <td>8.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3-23</td>\n      <td>3</td>\n      <td>23</td>\n      <td>9.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9-16</td>\n      <td>9</td>\n      <td>16</td>\n      <td>8.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_2.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4-10</td>\n      <td>2095</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3-21</td>\n      <td>2403</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7-24</td>\n      <td>2040</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6-18</td>\n      <td>1769</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8-8</td>\n      <td>1584</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe total votes and imdb ratings data are split between files. There is a common column called id. We can join the two dataframes together using the common column.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ninner_join_office_df = pd.merge(df_1, df_2, on='id', how='inner')\ninner_join_office_df\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5-1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>8.8</td>\n      <td>2501</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9-13</td>\n      <td>9</td>\n      <td>13</td>\n      <td>7.7</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5-6</td>\n      <td>5</td>\n      <td>6</td>\n      <td>8.5</td>\n      <td>2018</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3-23</td>\n      <td>3</td>\n      <td>23</td>\n      <td>9.3</td>\n      <td>3010</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9-16</td>\n      <td>9</td>\n      <td>16</td>\n      <td>8.2</td>\n      <td>1572</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>5-21</td>\n      <td>5</td>\n      <td>21</td>\n      <td>8.7</td>\n      <td>2032</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>2-13</td>\n      <td>2</td>\n      <td>13</td>\n      <td>8.3</td>\n      <td>2363</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9-6</td>\n      <td>9</td>\n      <td>6</td>\n      <td>7.8</td>\n      <td>1455</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>2-2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>8.2</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>3-4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>8.0</td>\n      <td>2311</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn this way you can combine datasets using common columns. We will leave that for the moment. If you want more information about merging data then see [this page](https://www.datasciencemadesimple.com/join-merge-data-frames-pandas-python/#:~:text=Merge%20%28%29%20Function%20in%20pandas%20is%20similar%20to,rows%20from%20both%20data%20frames%2C%20specify%20how%3D%20%E2%80%98outer%E2%80%99.) and the [pandas documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html).\n\n## Summary\n\nTo get an overview of our data we can ask Python to 'describe our data'\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.468085</td>\n      <td>11.877660</td>\n      <td>8.257447</td>\n      <td>2126.648936</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.386245</td>\n      <td>7.024855</td>\n      <td>0.538067</td>\n      <td>787.098275</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>6.700000</td>\n      <td>1393.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>7.900000</td>\n      <td>1631.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6.000000</td>\n      <td>11.500000</td>\n      <td>8.200000</td>\n      <td>1952.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7.250000</td>\n      <td>18.000000</td>\n      <td>8.600000</td>\n      <td>2379.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n      <td>26.000000</td>\n      <td>9.700000</td>\n      <td>7934.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nor we can pull out specific statistics.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf.mean(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nseason            5.468085\nepisode          11.877660\nimdb_rating       8.257447\ntotal_votes    2126.648936\ndtype: float64\n```\n:::\n:::\n\n\nNote the error triggered above due to pandas attempting to calculate the mean of the wrong type (i.e. non-numeric values). We can address that by only computing the mean of numeric values (see below):\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf.mean(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nseason            5.468085\nepisode          11.877660\nimdb_rating       8.257447\ntotal_votes    2126.648936\ndtype: float64\n```\n:::\n:::\n\n\nor the sum.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nseason                                                      1028\nepisode                                                     2233\ntitle          PilotDiversity DayHealth CareThe AllianceBaske...\nimdb_rating                                               1552.4\ntotal_votes                                               399810\nair_date       2005-03-242005-03-292005-04-052005-04-122005-0...\ndtype: object\n```\n:::\n:::\n\n\nSimilarly to what happened with `mean()`, `sum()` is adding all values in every observation of every attribute, regardless of their type. Can you see what happens with strings? And with dates?\n\nAgain, we can only force to use numeric values only:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf.sum(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nseason           1028.0\nepisode          2233.0\nimdb_rating      1552.4\ntotal_votes    399810.0\ndtype: float64\n```\n:::\n:::\n\n\nCalculating these statistics for specific columns is straight forward.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf['imdb_rating'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n8.25744680851064\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf['total_votes'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n399810\n```\n:::\n:::\n\n\n## Selecting subsets\n\nWe can even select more than one column!\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf[['imdb_rating', 'total_votes']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nimdb_rating       8.257447\ntotal_votes    2126.648936\ndtype: float64\n```\n:::\n:::\n\n\nTwo sets of squared brackets is needed because you are passing a list of the column names to the getitem dunder method of the pandas dataframe object (thank [this stackoverflow question](https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe)). You can also check out the pandas documentation on [indexing and selecting data](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics).\n\nYou can also select by row and column name using the iloc method. You can specify the [row, column]. So to choose the value in the 2nd row and 4th column.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf.iloc[2,4]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n2983\n```\n:::\n:::\n\n\nAll the rows or all the columns are indicated by :. Such as,\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndf.iloc[:,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0                 Pilot\n1         Diversity Day\n2           Health Care\n3          The Alliance\n4            Basketball\n             ...       \n183       Stairmageddon\n184      Paper Airplane\n185    Livin' the Dream\n186            A.A.R.M.\n187              Finale\nName: title, Length: 188, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndf.iloc[2,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nseason                   1\nepisode                  3\ntitle          Health Care\nimdb_rating            7.9\ntotal_votes           2983\nair_date        2005-04-05\nName: 2, dtype: object\n```\n:::\n:::\n\n\nWe can use negative values in indexes to indicate 'from the end'. So, an index of [-10, :] returns the 10th from last row.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndf.iloc[-10,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nseason                  9\nepisode                14\ntitle           Vandalism\nimdb_rating           7.6\ntotal_votes          1402\nair_date       2013-01-31\nName: 178, dtype: object\n```\n:::\n:::\n\n\nInstead of using tail, we could ask for the last 10 rows with an index of [-10:, :]. I read : as 'and everything else' in these cases.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf.iloc[-5:,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>8.0</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>8.0</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>8.9</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>9.3</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>9.7</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that the row is shown on the left. That will stop you getting lost in slices of the data. \n\nFor the top ten rows\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndf.iloc[:10,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>6</td>\n      <td>Hot Girl</td>\n      <td>7.8</td>\n      <td>2852</td>\n      <td>2005-04-26</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2</td>\n      <td>1</td>\n      <td>The Dundies</td>\n      <td>8.7</td>\n      <td>3213</td>\n      <td>2005-09-20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2</td>\n      <td>2</td>\n      <td>Sexual Harassment</td>\n      <td>8.2</td>\n      <td>2736</td>\n      <td>2005-09-27</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>3</td>\n      <td>Office Olympics</td>\n      <td>8.4</td>\n      <td>2742</td>\n      <td>2005-10-04</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>4</td>\n      <td>The Fire</td>\n      <td>8.4</td>\n      <td>2713</td>\n      <td>2005-10-11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOf course, we can run methods on these slices. We could, if we wanted to, calculate the mean imdb rating of only the first and last 100 episodes. _Note_ the indexing starts at 0 so we want the column index of 3 (0:season, 1:episode, 2:title, 3:imdb_rating).\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndf.iloc[:100,3].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n8.483\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndf.iloc[-100:,3].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n8.062\n```\n:::\n:::\n\n\nIf you are unsure how many rows you have then the count method comes to the rescue.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ndf.iloc[-100:,3].count()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n100\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n      <td>188.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.468085</td>\n      <td>11.877660</td>\n      <td>8.257447</td>\n      <td>2126.648936</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.386245</td>\n      <td>7.024855</td>\n      <td>0.538067</td>\n      <td>787.098275</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>6.700000</td>\n      <td>1393.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>7.900000</td>\n      <td>1631.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6.000000</td>\n      <td>11.500000</td>\n      <td>8.200000</td>\n      <td>1952.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7.250000</td>\n      <td>18.000000</td>\n      <td>8.600000</td>\n      <td>2379.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n      <td>26.000000</td>\n      <td>9.700000</td>\n      <td>7934.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSo it looks like the last 100 episodes were less good than the first 100. I guess that is why it was cancelled.\n\nOur data is organised by season. Looking at the average by season might help.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndf[['season', 'imdb_rating']].groupby('season').mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>imdb_rating</th>\n    </tr>\n    <tr>\n      <th>season</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>8.016667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.436364</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.573913</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.600000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8.492308</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.219231</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.316667</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>7.666667</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>7.956522</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe above line groups our dataframe by values in the season column and then displays the mean for each group. Pretty nifty.\n\nSeason 8 looks pretty bad. We can look at just the rows for season 8.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ndf[df['season'] == 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141</th>\n      <td>8</td>\n      <td>1</td>\n      <td>The List</td>\n      <td>8.2</td>\n      <td>1829</td>\n      <td>2011-09-22</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>8</td>\n      <td>2</td>\n      <td>The Incentive</td>\n      <td>8.2</td>\n      <td>1668</td>\n      <td>2011-09-29</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>8</td>\n      <td>3</td>\n      <td>Lotto</td>\n      <td>7.3</td>\n      <td>1601</td>\n      <td>2011-10-06</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>8</td>\n      <td>4</td>\n      <td>Garden Party</td>\n      <td>8.1</td>\n      <td>1717</td>\n      <td>2011-10-13</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>8</td>\n      <td>5</td>\n      <td>Spooked</td>\n      <td>7.6</td>\n      <td>1543</td>\n      <td>2011-10-27</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>8</td>\n      <td>6</td>\n      <td>Doomsday</td>\n      <td>7.8</td>\n      <td>1476</td>\n      <td>2011-11-03</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>8</td>\n      <td>7</td>\n      <td>Pam's Replacement</td>\n      <td>7.7</td>\n      <td>1563</td>\n      <td>2011-11-10</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>8</td>\n      <td>8</td>\n      <td>Gettysburg</td>\n      <td>7.0</td>\n      <td>1584</td>\n      <td>2011-11-17</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>8</td>\n      <td>9</td>\n      <td>Mrs. California</td>\n      <td>7.7</td>\n      <td>1553</td>\n      <td>2011-12-01</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>8</td>\n      <td>10</td>\n      <td>Christmas Wishes</td>\n      <td>8.0</td>\n      <td>1547</td>\n      <td>2011-12-08</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>8</td>\n      <td>11</td>\n      <td>Trivia</td>\n      <td>7.9</td>\n      <td>1488</td>\n      <td>2012-01-12</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>8</td>\n      <td>12</td>\n      <td>Pool Party</td>\n      <td>8.0</td>\n      <td>1612</td>\n      <td>2012-01-19</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>8</td>\n      <td>13</td>\n      <td>Jury Duty</td>\n      <td>7.5</td>\n      <td>1478</td>\n      <td>2012-02-02</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>8</td>\n      <td>14</td>\n      <td>Special Project</td>\n      <td>7.8</td>\n      <td>1432</td>\n      <td>2012-02-09</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>8</td>\n      <td>15</td>\n      <td>Tallahassee</td>\n      <td>7.9</td>\n      <td>1522</td>\n      <td>2012-02-16</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>8</td>\n      <td>16</td>\n      <td>After Hours</td>\n      <td>8.1</td>\n      <td>1567</td>\n      <td>2012-02-23</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>8</td>\n      <td>17</td>\n      <td>Test the Store</td>\n      <td>7.8</td>\n      <td>1478</td>\n      <td>2012-03-01</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>8</td>\n      <td>18</td>\n      <td>Last Day in Florida</td>\n      <td>7.8</td>\n      <td>1429</td>\n      <td>2012-03-08</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>8</td>\n      <td>19</td>\n      <td>Get the Girl</td>\n      <td>6.7</td>\n      <td>1642</td>\n      <td>2012-03-15</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>8</td>\n      <td>20</td>\n      <td>Welcome Party</td>\n      <td>7.2</td>\n      <td>1489</td>\n      <td>2012-04-12</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>8</td>\n      <td>21</td>\n      <td>Angry Andy</td>\n      <td>7.1</td>\n      <td>1585</td>\n      <td>2012-04-19</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>8</td>\n      <td>22</td>\n      <td>Fundraiser</td>\n      <td>7.1</td>\n      <td>1453</td>\n      <td>2012-04-26</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>8</td>\n      <td>23</td>\n      <td>Turf War</td>\n      <td>7.7</td>\n      <td>1393</td>\n      <td>2012-05-03</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>8</td>\n      <td>24</td>\n      <td>Free Family Portrait Studio</td>\n      <td>7.8</td>\n      <td>1464</td>\n      <td>2012-05-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can get an overview of the rating of all chapters within season 8 by:\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndf.loc[df['season'] == 8, 'imdb_rating'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\ncount    24.000000\nmean      7.666667\nstd       0.405041\nmin       6.700000\n25%       7.450000\n50%       7.800000\n75%       7.925000\nmax       8.200000\nName: imdb_rating, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndf['season'] == 8\n\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n183    False\n184    False\n185    False\n186    False\n187    False\nName: season, Length: 188, dtype: bool\n```\n:::\n:::\n\n\nGenerally pretty bad, but there is clearly one very disliked episode.\n\n## Adding columns\n\nWe can add new columns pretty simply.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndf['x'] = 44\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOur new column can be an operation on other columns\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ndf['rating_div_total_votes'] = df['imdb_rating'] / df['total_votes']\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n      <th>rating_div_total_votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n      <td>0.002051</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n      <td>0.002328</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n      <td>0.002648</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n      <td>0.002807</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n      <td>0.002642</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nor as simple as adding one to every value.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ndf['y'] = df['season'] + 1\ndf.iloc[0:5,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n      <th>x</th>\n      <th>rating_div_total_votes</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n      <td>44</td>\n      <td>0.002051</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n      <td>44</td>\n      <td>0.002328</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n      <td>44</td>\n      <td>0.002648</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n      <td>44</td>\n      <td>0.002807</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n      <td>44</td>\n      <td>0.002642</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ny =  df['season'] + 1\n```\n:::\n\n\n## Writing data\n\nPandas supports writing out data frames to various formats.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n?df.to_csv\n```\n:::\n\n\nNow you can uncomment the code below to save your dataframe into a csv file. But before doing so, check that your `data/output` folder is empty:\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\n# df.to_csv('data/output/my_output_ratings.csv', encoding='UTF-8')\n```\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\n?df.to_excel\n```\n:::\n\n\nNow you can uncomment the code below to save your dataframe into an excel file. But before doing so, check that your `data/output` folder is empty:\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\n# df.to_excel('data/output/my_output_ratings.xlsx')\n```\n:::\n\n\n",
    "supporting": [
      "IM939_Lab_2_1_files/figure-pdf"
    ],
    "filters": []
  }
}