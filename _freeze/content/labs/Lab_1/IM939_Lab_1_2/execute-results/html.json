{
  "hash": "b05824911af201462da403625dcbbd71",
  "result": {
    "markdown": "# Lab: Repetition\n\nWelcome to the second part of IM939 lab 1. Here we are going to look at how to deal with repetition, or actually how to avoid repetition using functions, methods and control flow.\n\n\n::: callout-tip\n### DRY\nPython takes pride in using the \"_[Don't Repeat Yourself (DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)_\" coding principle, and this is something you will likely see repeated almost as a mantra by (Python) coders and something you should get familiar with.\n\n:::\n\n## Functions\n\nHow do we get the length of a list?\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nlunch_ingredients = ['gravy', 'potatoes', 'meat', 'veg']\nlen(lunch_ingredients)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\nWe used a function. The syntax for a function is function_name(argument1, argument2). In our above example we passed the list lunch_ingrediants as an argument to the len function.\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\njames = {'age':35, 'hair colour': 'brown', 'Glasses': 'yes'}\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlen(james)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n3\n```\n:::\n:::\n\n\nOne very useful function is to check a data type. In base R it may be obvious but when you move to libraries, with different data types, it may be worth checking.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype(james)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ndict\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(lunch_ingredients)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntype(55)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nint\n```\n:::\n:::\n\n\n## Methods\n\nWhat is really happening? Well all data types in Python have functions built in. A variable is an object (a string, a list, an int, etc.). Each object has a set of methods do stuff with that object.\n\nFor example, I can add a value to the lunch_ingredients list liks so\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nlunch_ingredients.append('yorkshire pudding')\nlunch_ingredients\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['gravy', 'potatoes', 'meat', 'veg', 'yorkshire pudding']\n```\n:::\n:::\n\n\nNote the objectname.method notation. By adding a yorkshire pudding, a fine addition to any meal, my lunch ingredients now number 5.\n\nI can count these easily.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nlen(lunch_ingredients)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n5\n```\n:::\n:::\n\n\nWhich is the same as the following.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlunch_ingredients.__len__()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n5\n```\n:::\n:::\n\n\nYou can tab complete to see what methods are available for a given object. There are quite a few [built in python functions](https://www.w3schools.com/python/python_ref_functions.asp#:~:text=Python%20Built%20in%20Functions%20%20%20%20Function,of%20an%20object%20%2036%20more%20rows%20).\n\nHowever, do be aware that different objects will likely have different methods. For instance, can we get a length of an int?\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nlen(4)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: object of type 'int' has no len()\n```\n:::\n:::\n\n\nThe error \"TypeError: object of type 'int' has no len()\" essentially means an int object has no __len__ [dunder method](https://medium.com/@robertbracco1/most-common-python-functions-aafdc01b71ef).\n\nTo see the methods for a given object, type in the object name in a code cell, add a period '.' and press tab.\n\n## Flow control\n\n### For loops\n\nYou may need to repeat some code (such as reading lines in a csv file). For loops allow you to repeat code but with a variable changing each loop.\n\nFor instance,\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfor ingredient in lunch_ingredients:\n    print(ingredient)\n    \n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngravy\npotatoes\nmeat\nveg\nyorkshire pudding\n```\n:::\n:::\n\n\nThe above loop went through each ingrediant and printed it. \n\nNote the syntax and spacing. The for statement finishes with a : and the next line has a tab. For loops have to be defined like that. If you miss out the tab then you will be shown an error. It does make the code more readable though.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfor ingredient in lunch_ingredients:\n    print(ingredient)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngravy\npotatoes\nmeat\nveg\nyorkshire pudding\n```\n:::\n:::\n\n\nAt least the error is informative.\n\nWe can have more than one line in the loop.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfor ingredient in lunch_ingredients:\n    print('I love to eat ' + ingredient)\n    print('food is great')\n    \n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI love to eat gravy\nfood is great\nI love to eat potatoes\nfood is great\nI love to eat meat\nfood is great\nI love to eat veg\nfood is great\nI love to eat yorkshire pudding\nfood is great\n```\n:::\n:::\n\n\n### If statements\n\nAn if statement allows us to run different code depending on a condition. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nmy_num = 3\n\nif my_num > 5:\n    print('Number is bigger than 5')\n    \nif my_num < 5:\n    print('Number is less than 5')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber is less than 5\n```\n:::\n:::\n\n\nWe can include this in a for loop.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfor i in range(10): #go through each number 0:10\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i)\n    if i == 5:\n        print('We found a 5!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\nWe found a 5!\n6\n7\n8\n9\n```\n:::\n:::\n\n\nYou can also include an else part of your if statement.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i)\n    if i == 5:\n        print('We found a 5! :)')\n    else:\n        print('Not a 5. Boo hoo :(')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\nNot a 5. Boo hoo :(\n1\nNot a 5. Boo hoo :(\n2\nNot a 5. Boo hoo :(\n3\nNot a 5. Boo hoo :(\n4\nNot a 5. Boo hoo :(\n5\nWe found a 5! :)\n6\nNot a 5. Boo hoo :(\n7\nNot a 5. Boo hoo :(\n8\nNot a 5. Boo hoo :(\n9\nNot a 5. Boo hoo :(\n```\n:::\n:::\n\n\n",
    "supporting": [
      "IM939_Lab_1_2_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}