{
  "hash": "93bdd570b208dc1c9a72fafe8ad49a42",
  "result": {
    "markdown": "---\nwarning: false\n---\n\n# Lab: Seaborn\n\nSeaborn is another plotting library. Some consider it the [`ggplot`](https://ggplot2.tidyverse.org/) of Python with excellent default setting which make your data life easier. There is rather good [documentation online](https://seaborn.pydata.org/) and it comes with Anaconda Python.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n```\n:::\n\n\nWe can load and create the same plots as before.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\noffice_df = pd.read_csv('data/raw/office_ratings.csv', encoding='UTF-8')\noffice_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsns.relplot(x='total_votes', y='imdb_rating', data=office_df)\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_4_files/figure-html/cell-4-output-1.png){width=470 height=468}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\noffice_df['air_date'] =  pd.to_datetime(office_df['air_date'], errors='ignore')\n\ng = sns.relplot(x=\"air_date\", y=\"imdb_rating\", kind=\"scatter\", data=office_df)\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_4_files/figure-html/cell-5-output-1.png){width=469 height=468}\n:::\n:::\n\n\n## Functions\n\nWe can define our own functions. A function helps us with code we are going to run multiple times. For instance, the below function scales values between 0 and 1.\n\nHere is a modified function from [stackoverflow](https://stackoverflow.com/questions/26414913/normalize-columns-of-pandas-data-frame).\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\noffice_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef normalize(df, feature_name):\n    result = df.copy()\n    \n    max_value = df[feature_name].max()\n    min_value = df[feature_name].min()\n    \n    result[feature_name] = (df[feature_name] - min_value) / (max_value - min_value)\n    \n    return result\n```\n:::\n\n\nPassing the dataframe and name of the column will return a dataframe with that column scaled between 0 and 1.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnormalize(office_df, 'imdb_rating')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>0.300000</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>0.533333</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>0.400000</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>0.466667</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>0.566667</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>0.433333</td>\n      <td>1484</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>0.433333</td>\n      <td>1482</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>0.733333</td>\n      <td>2041</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>0.866667</td>\n      <td>2860</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>1.000000</td>\n      <td>7934</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nReplacing the origonal dataframe. We can normalize both out votes and rating.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\noffice_df = normalize(office_df, 'imdb_rating')\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\noffice_df = normalize(office_df, 'total_votes')\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\noffice_df\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>0.300000</td>\n      <td>0.353616</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>0.533333</td>\n      <td>0.332212</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>0.400000</td>\n      <td>0.243082</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>0.466667</td>\n      <td>0.228253</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>0.566667</td>\n      <td>0.273047</td>\n      <td>2005-04-19</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>0.433333</td>\n      <td>0.013912</td>\n      <td>2013-04-11</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>0.433333</td>\n      <td>0.013606</td>\n      <td>2013-04-25</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>0.733333</td>\n      <td>0.099067</td>\n      <td>2013-05-02</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>0.866667</td>\n      <td>0.224278</td>\n      <td>2013-05-09</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>2013-05-16</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSeaborn prefers a long format table. Details of melt can be found [here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.melt.html).\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\noffice_df_long=pd.melt(office_df, id_vars=['season', 'episode', 'title', 'air_date'], value_vars=['imdb_rating', 'total_votes'])\noffice_df_long\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>air_date</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>2005-03-24</td>\n      <td>imdb_rating</td>\n      <td>0.300000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>2005-03-29</td>\n      <td>imdb_rating</td>\n      <td>0.533333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>2005-04-05</td>\n      <td>imdb_rating</td>\n      <td>0.400000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>2005-04-12</td>\n      <td>imdb_rating</td>\n      <td>0.466667</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>2005-04-19</td>\n      <td>imdb_rating</td>\n      <td>0.566667</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>371</th>\n      <td>9</td>\n      <td>19</td>\n      <td>Stairmageddon</td>\n      <td>2013-04-11</td>\n      <td>total_votes</td>\n      <td>0.013912</td>\n    </tr>\n    <tr>\n      <th>372</th>\n      <td>9</td>\n      <td>20</td>\n      <td>Paper Airplane</td>\n      <td>2013-04-25</td>\n      <td>total_votes</td>\n      <td>0.013606</td>\n    </tr>\n    <tr>\n      <th>373</th>\n      <td>9</td>\n      <td>21</td>\n      <td>Livin' the Dream</td>\n      <td>2013-05-02</td>\n      <td>total_votes</td>\n      <td>0.099067</td>\n    </tr>\n    <tr>\n      <th>374</th>\n      <td>9</td>\n      <td>22</td>\n      <td>A.A.R.M.</td>\n      <td>2013-05-09</td>\n      <td>total_votes</td>\n      <td>0.224278</td>\n    </tr>\n    <tr>\n      <th>375</th>\n      <td>9</td>\n      <td>23</td>\n      <td>Finale</td>\n      <td>2013-05-16</td>\n      <td>total_votes</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>376 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nWhich we can plot in seaborn like so.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsns.relplot(x='air_date', y='value', size='variable', data=office_df_long)\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_2_4_files/figure-html/cell-13-output-1.png){width=588 height=468}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n?sns.relplot\n```\n:::\n\n\n",
    "supporting": [
      "IM939_Lab_2_4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}