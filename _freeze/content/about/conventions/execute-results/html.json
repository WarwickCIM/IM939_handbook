{
  "hash": "d53ca72ae38f39ed74319326639b88dd",
  "result": {
    "markdown": "# Book Conventions {.unnumbered}\n\nThis handbook uses the following conventions to make learning easier. Please note that many of these conventions are also used in many other books, websites, projects... about programming, so it's worth spending some time reading and understanding them.\n\n## Text format\n\n*italics* will be used for these cases:\n\n-   Highlight some technical terms\n-   Book titles\n\nSometimes you will see text written in `monospace`. This refers to something related to code. It can be:\n\n-   a **function**: i.e. `help()` (functions always end with `()`)\n-   a **file** following the pattern `script.py`, `notebook.ipynb` or something more generic like `*.py` (filenames always have a name, a `.`, and a file extension)\n-   a **folder**, like `folder_name/`. Folders always have a trailing `/` and don't have a `.` and an extension.\n-   a **package or library**, like Python's `pandas` \n-   any character or characters that need to be copied.\n\n### Placeholder texts\n\nSometimes, instead of using an exact name that needs to be copied in your script, we will be using a placeholder that may change in certain circumstances but they will always follow a certain structure. Placeholders are always written between `<>` like this: `pd.read_csv(<filename>.py)` this means that when you run your code, you will have to replace the placeholder `<filename>` with the actual name of your file, which may differ from one person to another. After replacing the placeholder, it could be something like this: `pd.read_csv(my_fancy_file.csv)`\n\n## Code blocks {#sec-code-blocks}\n\nCode blocks represent what you would need to type in your programming language's terminal or script. You can copy their content and paste it in your IDE to run the code or copy and paste and try to modify it to experiment with it and learn how the code works.\n\n::: callout-tip\n### Copying code block's content\n\nFor your ease of use, you can copy the whole content of the code block by hovering over them and clicking on the icon on the top right.\n:::\n\nThe following is a code block:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# This is a comment in a code block.\nimport pandas as pd \n\nurl = \"https://raw.githubusercontent.com/WarwickCIM/IM939_handbook/main/content/labs/Lab_1/data/office_ratings.csv\"\n\ndf = pd.read_csv(url)\n```\n:::\n\n\nSome blocks have the resulting code below, exactly as it would appear if we ran it in a terminal using R or Python[^conventions-2].\n\n[^conventions-2]: In fact, this whole book has been created using literate programming, which combines text and code. The code displayed in these codeblocks has actually been run when creating the book, in exactly the same way it would have happened in a regular script. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# This is a code block with resulting code.\nprint(\"This is the output resulting from the code above\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is the output resulting from the code above\n```\n:::\n:::\n\n\nOutput can be a simple line (like above) or something more complex, like this:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# We are displaying the first rows (head) of a dataframe.\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode</th>\n      <th>title</th>\n      <th>imdb_rating</th>\n      <th>total_votes</th>\n      <th>air_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Pilot</td>\n      <td>7.6</td>\n      <td>3706</td>\n      <td>2005-03-24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>Diversity Day</td>\n      <td>8.3</td>\n      <td>3566</td>\n      <td>2005-03-29</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Health Care</td>\n      <td>7.9</td>\n      <td>2983</td>\n      <td>2005-04-05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>4</td>\n      <td>The Alliance</td>\n      <td>8.1</td>\n      <td>2886</td>\n      <td>2005-04-12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5</td>\n      <td>Basketball</td>\n      <td>8.4</td>\n      <td>3179</td>\n      <td>2005-04-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nor even interactive figures!\n\n<!-- 12A0366C|/Users/u2071219/Git_repos/IM939_handbook/content/about/conventions.ipynb|:../labs/Lab_6/IM939_Lab_6_3-Choropleths.ipynb#fig-default-choropleth-map |  | echo:false,warning:false,asis:true,eval:false -->\n\n\n## Callouts\n\nCallouts are texts that outstand from the regular content for some of these reasons:\n\n::: callout-note\nThis is a note, used for...\n:::\n\n::: callout-tip\n## Pro-Tip\n\nThis is a tip that will make your life easier.\n:::\n\n::: callout-important\n## This is Important\n\nIf you were to remember just some bits of what you've been reading, this text should be one of those important bits.\n:::\n\n::: callout-warning\nDanger, if you do not pay attention to this, things may not work as expected or not work at all!\n:::\n\n::: callout-caution\n## Action needed\n\nThis is prompting you to do something, either answering a question or doing some exercise.\n:::\n\nAdditionally, some callouts can be expanded to see their content. This can be either because:\n\n1.  their contents are optional, and they are collapsed by default not to overwhelm you with unnecessary information.\n\n::: {.callout-tip collapse=\"true\"}\n## Expand to learn more\n\nAlthough strictly speaking, you might not need to learn this, it will make your life easier.\n:::\n\n2.  they give a solution to a question\n\n::: {.callout-caution collapse=\"true\"}\n## Question\n\nThis is an answer\n:::\n\n## Bibliographical references\n\nSometimes you'll see texts with bliographical references such as: \"See @knuth84 for additional discussion of literate programming.\"\n\nYou can click over the reference to see the full details or visit chapter [References](references.qmd)\n\n",
    "supporting": [
      "conventions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}