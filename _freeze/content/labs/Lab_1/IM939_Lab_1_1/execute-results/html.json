{
  "hash": "c67f846582f3c4d45572b8493cd1af7d",
  "result": {
    "markdown": "# Lab: Introduction to Python {#sec-intro}\n\nWelcome to the first Python lab. Our aim is to introduce a little bit of Python and help you be comfortable with using Jupyter notebooks. No previous knowledge is assumed and questions are encouraged!\n\n\n## Technological stack {#sec-technological-stack}\n\nThis module uses a combination of different technologies (technological stack) besides python. You will need to be familiar with all their components to follow the labs as well as the assignments. You can find a brief description of the main components below, and you can refer to @sec-setup for a more technical explanation of the setup.\n\n::: callout-important\nPlease make sure you have Anaconda Python installed and running on your computer. Instructions for doing this can be found on @sec-setup.\n:::\n\n### Python\n\n[Python](https://www.python.org/) is a very popular general purpose programming language. Data scientists use it to clean up, analyse and visualise data. A major strength of python is that the core Python functionality can be extended using libraries. In future labs, you will learn about popular data science libraries such as pandas and numpy.\n\nIt is useful to think of programming languages as a structured way to tell the computer what to do. We cover some of the basic features of Python in this lab.\n\n### Anaconda\n\n[Anaconda](https://anaconda.com)[^anaconda] is a _distribution platform_ that manages and installs many tools used in data science, such as _programming languages_ (python), _libraries_, _IDEs_[^ides]... as well as a _GUI_ (Anaconda navigator) and a _CLI_ (Anaconda interpreter). Anaconda does some other useful things, such as creating isolated _virtual environments_, which we will be using for this module. \n\n[^ides]: Some specific  Integrated Development Environments (IDEs) for Python included in Anaconda are [VS Code](https://code.visualstudio.com/), [Jupyterlab](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html) and [Spyder](https://www.spyder-ide.org/). In this module, there's no preferred IDE (actually, different members of the staff use different IDEs) and you can use the one you are more familiar with.\n\n::: callout-tip\n\n### Virtual environments\n\n_Virtual environments_ are a way to install all the dependencies (and their right version) required for a certain project by isolating python and libraries' specific versions. Every person who recreatesthe virtual environment will be using the same packages and versions, reducing errors and increasing reproducibility.\nWhile they are considered an advanced practice, and are therefore out of scope of this course, you may want to learn about Python's environments here: <https://realpython.com/python-virtual-environments-a-primer/>\n\n:::\n\n[^anaconda]: If you want to know more about Anaconda, these tutorials can be a good start: <https://www.tangolearn.com/what-is-anaconda/>, <https://www.upgrad.com/blog/python-anaconda-tutorial/>\n\n\n### Jupter Notebooks\n\n[Jupyter notebooks](https://jupyter.org/), such as this one, allow you to combine text and code into documents you can edit in the browser. The power of these notebooks is in documenting or describing what you are doing with the code alongside that code. For example, you could detail why you chose a particular clustering algorithm above the clustering code itself. In other words, it add narrative and helps clarify your workflow.\n\n![This same notebook, as displayed within Jupyterlab](img/jupyter-notebook.png)\n\n## Getting started\n\nIf you send Python a number then it will print that number for you.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n45\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n45\n```\n:::\n:::\n\n\nYou will see both the input and output displayed. The input will have a label next to it like 'In [1]' where the number tells you how much code has already been sent to the Python interpreter (the programming interpreting the Python code and returnign the result). A line such as 'In [100]' tells you that 99 code cells have been passed to the Python interpreter in the current session.\n\nPython can carry out simple arithetic.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n44 + 87\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n131\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n188 / 12\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n15.666666666666666\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n46 - 128\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n-82\n```\n:::\n:::\n\n\nEach time the code in the cell is run and the result from the Python interpreter is displayed.\n\n## Data Types\n\nAs we saw at [this unit in the Skills Programme](https://pages.github.warwick.ac.uk/CIM-Methods/coding_skills/content/computational_skills/computational_thinking.html#sec-data-types), programming languages use types to help them understand what a piece of data might represent. Knowing how data types work is important because they define what can be done and cannot be done with them. Each programming language has different data types which can be extended by other libraries such as Pandas, but these are some of the most frequent ones (and the ones we will be facing more frequently).\n\n### int, floats, strings\n\nIntegers are whole numbers, like the ones we used above. We can check an object's data type using `type()`:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(33)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nint\n```\n:::\n:::\n\n\nYou can also have floats (numbers with decimal points)\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n33.4\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n33.4\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntype(33.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nfloat\n```\n:::\n:::\n\n\nand a series of characters (strings).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n'I have a plan, sir.'\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'I have a plan, sir.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntype('I have a plan, sir.')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nstr\n```\n:::\n:::\n\n\nData types are great and operators such as `*` do different things depending on the data type. For instance,\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n33 * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n99\n```\n:::\n:::\n\n\nThat seems quite sensible. What about if we had a string? Run teh below line. What is the `*` doing?\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n'I have a plan, sir' * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'I have a plan, sirI have a plan, sirI have a plan, sir'\n```\n:::\n:::\n\n\nThere are also operators which only work with particular data types.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n'I have a plan, sir.' / 2\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n```\n:::\n:::\n\n\nThis error message is very informative indeed. It tells us the line which caused the problem and that we have an error. Specifically, our error is a `TypeError`. \n\n::: callout-note\n### Understanding the error\nIn this case, it says that the line `'I have a cunning plan' / 2` consists of  `string / int`.  We are trying to divide a `string` and `int`. The `/` operand is not able to divide a string by an int.\n:::\n\n### lists and dictionaries\n\nYou can collect multiple values in a list. This is how they look like:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n[35, 'brown', 'yes']\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n[35, 'brown', 'yes']\n```\n:::\n:::\n\n\nAnd we can check theyr type:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntype([35, 'brown', 'yes'])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nlist\n```\n:::\n:::\n\n\nOr add keys to the values as a dictionary.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n{'age':35, 'hair colour': 'brown', 'Glasses': 'yes'}\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n{'age': 35, 'hair colour': 'brown', 'Glasses': 'yes'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntype({'age':35, 'hair colour': 'brown', 'Glasses': 'yes'})\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ndict\n```\n:::\n:::\n\n\n## Variables\n\nVariables are bins for storing things in. These things can be data types. For example, the below creates a variable called my_height and stores the in 140 there.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmy_height = 140\n```\n:::\n\n\nThe Python interpreter is now storing the int 140 in a bin called my_height. If you pass the variable name to the interpreter then it will behave just like if you typed in 140 instead.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmy_height\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n140\n```\n:::\n:::\n\n\n140\n\nVariables are neat when it comes to lists.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nmy_heights = [231, 234, 43]\nmy_heights\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[231, 234, 43]\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nmy_heights[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n234\n```\n:::\n:::\n\n\nWait, what happened above? What do you think the [1] does?\n\nYou can index multiple values from a list.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nmy_heights[0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n[231, 234]\n```\n:::\n:::\n\n\n## Bringing it all together\n\nWhat does the below do?\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nradius = 40\npi = 3.1415\ncircle_area = pi * (radius * radius)\n\nlength = 12\nsquare_area = length * length\n\nmy_areas = [circle_area, square_area]\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmy_areas\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n[5026.400000000001, 144]\n```\n:::\n:::\n\n\nAs an aside, you can include comments which are not evaluated by the Python interpreter.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# this is a comment. Python will ignore it.\n# another comment. \nn = 33\n```\n:::\n\n\n## Congratulations\n\nYou've reached the end of the first notebook. We've looked at basic data type and variables. These are key components of all programming languages and a key part of working with data.\n\nIn the next notebook we will examine using libraries, loading in data, loops and functions.\n\n",
    "supporting": [
      "IM939_Lab_1_1_files"
    ],
    "filters": [],
    "includes": {}
  }
}