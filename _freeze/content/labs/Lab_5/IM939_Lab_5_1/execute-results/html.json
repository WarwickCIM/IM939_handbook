{
  "hash": "32e19bc9453d677c92d17e200dd00c2c",
  "result": {
    "engine": "jupyter",
    "markdown": "# Lab: Working with multiple models\n\nIn this notebook, we will look at the London Borough data that we already encountered when we worked with the London Borough profiles and the Borough Cards that we utilised in the session.\n\nYou can have a look at the data through this online tool provided by GLA: <https://data.london.gov.uk/london-area-profiles/>\n\nHowever, unlike the data that we explored during the session, this data set has several features (i.e., columns or variables), 76 of them to be precise.\n\nWhat we would like to do in this notebook is to make use of a dimension reduction algorithm -- Multidimensional Scaling -- to help us create various different \"spaces\". Each of these space will be a different way of \"seeing this data\" and if we adopt the language from Scott Page [-@pageWhyManyModelThinkers2018], they will have different \"attentions\". \n\nWhat the following exercise will do is to walk you through the variables of this data set through a few visualisations. It will then create a few different projections and will give them some names. What we expect you to do is to create your own projections and try to interpret them. \n\nIf you want to be reminded of what MDS is, you can have a look at the slides from last week. In a super tiny nutshell, MDS tries to create a space where \"real\" distances in the data are preserved as much as possible while \"projecting\" the data elements on a lower dimensional space. For instance, the following is from the slide deck:\n\n![An MDS plot of cities.](figs/mds.png){width=800}\n\nWhat we see here are a few cities that would normally \"exist\" in our 3-dimensional world and the distances between them would normally be on this spherical coordinate system. But we create here is a 2D map and the distances between cities are preserved as much as possible. Near cities in the world are closer, and the further ones are further but not as accurate as it is in the world. The dimensions here carry no real meaning it is the distances that will \"tell a story\" (if there is one).\n\nOK, let's get on with the data now.\n\n## Data exploration and wrangling\n\n::: {#cell-1 .cell execution_count=1}\n``` {.python .cell-code}\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\n\ndf = pd.read_excel('data/london-borough-profilesV3.xlsx', engine = 'openpyxl')\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nIndex(['Code', 'Area/INDICATOR', 'Inner/ Outer London',\n       'GLA Population Estimate 2013', 'GLA Household Estimate 2013',\n       'Inland Area (Hectares)', 'Population density (per hectare) 2013',\n       'Average Age, 2013', 'Proportion of population aged 0-15, 2013',\n       'Proportion of population of working-age, 2013',\n       'Proportion of population aged 65 and over, 2013',\n       '% of resident population born abroad (2013)',\n       'Largest migrant population by country of birth (2013)',\n       '% of largest migrant population (2013)',\n       'Second largest migrant population by country of birth (2013)',\n       '% of second largest migrant population (2013)',\n       'Third largest migrant population by country of birth (2013)',\n       '% of third largest migrant population (2013)',\n       '% of population from BAME groups (2013)',\n       '% people aged 3+ whose main language is not English (2011 census)',\n       'Overseas nationals entering the UK (NINo), (2013/14)',\n       'New migrant (NINo) rates, (2013/14)', 'Employment rate (%) (2013/14)',\n       'Male employment rate (2013/14)', 'Female employment rate (2013/14)',\n       'Unemployment rate (2013/14)', 'Youth Unemployment rate (2013/14)',\n       'Proportion of 16-18 year olds who are NEET (%) (2013)',\n       'Proportion of the working-age population who claim benefits (%) (Feb-2014)',\n       '% working-age with a disability (2012)',\n       'Proportion of working age people with no qualifications (%) 2013',\n       'Proportion of working age people in London with degree or equivalent and above (%) 2013',\n       'Gross Annual Pay, (2013)', 'Gross Annual Pay - Male (2013)',\n       'Gross Annual Pay - Female (2013)',\n       '% adults that volunteered in past 12 months (2010/11 to 2012/13)',\n       'Number of jobs by workplace (2012)',\n       '% of employment that is in public sector (2012)', 'Jobs Density, 2012',\n       'Number of active businesses, 2012',\n       'Two-year business survival rates 2012',\n       'Crime rates per thousand population 2013/14',\n       'Fires per thousand population (2013)',\n       'Ambulance incidents per hundred population (2013)',\n       'Median House Price, 2013',\n       'Average Band D Council Tax charge (Â£), 2014/15',\n       'New Homes (net) 2012/13', 'Homes Owned outright, (2013) %',\n       'Being bought with mortgage or loan, (2013) %',\n       'Rented from Local Authority or Housing Association, (2013) %',\n       'Rented from Private landlord, (2013) %',\n       '% of area that is Greenspace, 2005', 'Total carbon emissions (2012)',\n       'Household Waste Recycling Rate, 2012/13',\n       'Number of cars, (2011 Census)',\n       'Number of cars per household, (2011 Census)',\n       '% of adults who cycle at least once per month, 2011/12',\n       'Average Public Transport Accessibility score, 2012',\n       'Indices of Multiple Deprivation 2010 Rank of Average Score',\n       'Income Support claimant rate (Feb-14)',\n       '% children living in out-of-work families (2013)',\n       'Achievement of 5 or more A*- C grades at GCSE or equivalent including English and Maths, 2012/13',\n       'Rates of Children Looked After (2013)',\n       '% of pupils whose first language is not English (2014)',\n       'Male life expectancy, (2010-12)', 'Female life expectancy, (2010-12)',\n       'Teenage conception rate (2012)',\n       'Life satisfaction score 2012-13 (out of 10)',\n       'Worthwhileness score 2012-13 (out of 10)',\n       'Happiness score 2012-13 (out of 10)',\n       'Anxiety score 2012-13 (out of 10)', 'Political control in council',\n       'Proportion of seats won by Conservatives in 2014 election',\n       'Proportion of seats won by Labour in 2014 election',\n       'Proportion of seats won by Lib Dems in 2014 election',\n       'Turnout at 2014 local elections'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {#cell-2 .cell execution_count=2}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Code</th>\n      <th>Area/INDICATOR</th>\n      <th>Inner/ Outer London</th>\n      <th>GLA Population Estimate 2013</th>\n      <th>GLA Household Estimate 2013</th>\n      <th>Inland Area (Hectares)</th>\n      <th>Population density (per hectare) 2013</th>\n      <th>Average Age, 2013</th>\n      <th>Proportion of population aged 0-15, 2013</th>\n      <th>Proportion of population of working-age, 2013</th>\n      <th>...</th>\n      <th>Teenage conception rate (2012)</th>\n      <th>Life satisfaction score 2012-13 (out of 10)</th>\n      <th>Worthwhileness score 2012-13 (out of 10)</th>\n      <th>Happiness score 2012-13 (out of 10)</th>\n      <th>Anxiety score 2012-13 (out of 10)</th>\n      <th>Political control in council</th>\n      <th>Proportion of seats won by Conservatives in 2014 election</th>\n      <th>Proportion of seats won by Labour in 2014 election</th>\n      <th>Proportion of seats won by Lib Dems in 2014 election</th>\n      <th>Turnout at 2014 local elections</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000001</td>\n      <td>City of London</td>\n      <td>Inner London</td>\n      <td>8000</td>\n      <td>4514.371383</td>\n      <td>290.4</td>\n      <td>27.525868</td>\n      <td>41.303887</td>\n      <td>7.948036</td>\n      <td>77.541617</td>\n      <td>...</td>\n      <td>.</td>\n      <td>8.10</td>\n      <td>8.23</td>\n      <td>7.44</td>\n      <td>x</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000002</td>\n      <td>Barking and Dagenham</td>\n      <td>Outer London</td>\n      <td>195600</td>\n      <td>73261.408580</td>\n      <td>3610.8</td>\n      <td>54.160527</td>\n      <td>33.228935</td>\n      <td>26.072939</td>\n      <td>63.835021</td>\n      <td>...</td>\n      <td>35.4</td>\n      <td>7.06</td>\n      <td>7.57</td>\n      <td>6.97</td>\n      <td>3.3</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>0.000000</td>\n      <td>38.16</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000003</td>\n      <td>Barnet</td>\n      <td>Outer London</td>\n      <td>370000</td>\n      <td>141385.794900</td>\n      <td>8674.8</td>\n      <td>42.651374</td>\n      <td>36.896246</td>\n      <td>20.886408</td>\n      <td>65.505593</td>\n      <td>...</td>\n      <td>14.7</td>\n      <td>7.35</td>\n      <td>7.79</td>\n      <td>7.27</td>\n      <td>2.63</td>\n      <td>Cons</td>\n      <td>50.793651</td>\n      <td>42.857143</td>\n      <td>1.587302</td>\n      <td>41.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>E09000004</td>\n      <td>Bexley</td>\n      <td>Outer London</td>\n      <td>236500</td>\n      <td>94701.226400</td>\n      <td>6058.1</td>\n      <td>39.044243</td>\n      <td>38.883039</td>\n      <td>20.282830</td>\n      <td>63.146450</td>\n      <td>...</td>\n      <td>25.8</td>\n      <td>7.47</td>\n      <td>7.75</td>\n      <td>7.21</td>\n      <td>3.22</td>\n      <td>Cons</td>\n      <td>71.428571</td>\n      <td>23.809524</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>E09000005</td>\n      <td>Brent</td>\n      <td>Outer London</td>\n      <td>320200</td>\n      <td>114318.553900</td>\n      <td>4323.3</td>\n      <td>74.063670</td>\n      <td>35.262694</td>\n      <td>20.462585</td>\n      <td>68.714872</td>\n      <td>...</td>\n      <td>19.6</td>\n      <td>7.23</td>\n      <td>7.32</td>\n      <td>7.09</td>\n      <td>3.33</td>\n      <td>Lab</td>\n      <td>9.523810</td>\n      <td>88.888889</td>\n      <td>1.587302</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>E09000006</td>\n      <td>Bromley</td>\n      <td>Outer London</td>\n      <td>317400</td>\n      <td>134012.675100</td>\n      <td>15013.5</td>\n      <td>21.137655</td>\n      <td>39.844502</td>\n      <td>19.648001</td>\n      <td>62.927051</td>\n      <td>...</td>\n      <td>24.2</td>\n      <td>7.63</td>\n      <td>7.80</td>\n      <td>7.36</td>\n      <td>3.2</td>\n      <td>Cons</td>\n      <td>85.000000</td>\n      <td>11.666667</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>E09000007</td>\n      <td>Camden</td>\n      <td>Inner London</td>\n      <td>228400</td>\n      <td>100841.916500</td>\n      <td>2178.9</td>\n      <td>104.820985</td>\n      <td>35.842413</td>\n      <td>15.632617</td>\n      <td>73.313473</td>\n      <td>...</td>\n      <td>18.1</td>\n      <td>7.22</td>\n      <td>7.37</td>\n      <td>7.13</td>\n      <td>3.25</td>\n      <td>Lab</td>\n      <td>22.222222</td>\n      <td>74.074074</td>\n      <td>1.851852</td>\n      <td>38.69</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>E09000008</td>\n      <td>Croydon</td>\n      <td>Outer London</td>\n      <td>373100</td>\n      <td>150053.929000</td>\n      <td>8650.4</td>\n      <td>43.129707</td>\n      <td>36.570761</td>\n      <td>21.641888</td>\n      <td>65.638589</td>\n      <td>...</td>\n      <td>28.6</td>\n      <td>7.00</td>\n      <td>7.46</td>\n      <td>7.11</td>\n      <td>3.02</td>\n      <td>Lab</td>\n      <td>42.857143</td>\n      <td>57.142857</td>\n      <td>0.000000</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>E09000009</td>\n      <td>Ealing</td>\n      <td>Outer London</td>\n      <td>344900</td>\n      <td>126860.977600</td>\n      <td>5554.4</td>\n      <td>62.089808</td>\n      <td>35.637099</td>\n      <td>20.642035</td>\n      <td>68.216689</td>\n      <td>...</td>\n      <td>22.4</td>\n      <td>7.24</td>\n      <td>7.48</td>\n      <td>7.44</td>\n      <td>3.58</td>\n      <td>Lab</td>\n      <td>17.391304</td>\n      <td>76.811594</td>\n      <td>5.797101</td>\n      <td>41.3</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>E09000010</td>\n      <td>Enfield</td>\n      <td>Outer London</td>\n      <td>322400</td>\n      <td>124601.954700</td>\n      <td>8083.2</td>\n      <td>39.888486</td>\n      <td>36.062871</td>\n      <td>22.182556</td>\n      <td>65.114934</td>\n      <td>...</td>\n      <td>26.4</td>\n      <td>7.18</td>\n      <td>7.57</td>\n      <td>7.41</td>\n      <td>2.51</td>\n      <td>Lab</td>\n      <td>34.920635</td>\n      <td>65.079365</td>\n      <td>0.000000</td>\n      <td>37.79</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>E09000011</td>\n      <td>Greenwich</td>\n      <td>Outer London</td>\n      <td>262800</td>\n      <td>104999.593900</td>\n      <td>4733.4</td>\n      <td>55.516088</td>\n      <td>34.737054</td>\n      <td>21.754144</td>\n      <td>67.650982</td>\n      <td>...</td>\n      <td>34.7</td>\n      <td>7.16</td>\n      <td>7.49</td>\n      <td>7.05</td>\n      <td>3.68</td>\n      <td>Lab</td>\n      <td>15.686275</td>\n      <td>84.313725</td>\n      <td>0.000000</td>\n      <td>37.25</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>E09000012</td>\n      <td>Hackney</td>\n      <td>Inner London</td>\n      <td>256600</td>\n      <td>106655.687500</td>\n      <td>1904.9</td>\n      <td>134.717347</td>\n      <td>32.624060</td>\n      <td>20.513252</td>\n      <td>72.376652</td>\n      <td>...</td>\n      <td>28.8</td>\n      <td>7.07</td>\n      <td>7.42</td>\n      <td>7.02</td>\n      <td>3.61</td>\n      <td>Lab</td>\n      <td>7.017544</td>\n      <td>87.719298</td>\n      <td>5.263158</td>\n      <td>42.89</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>E09000013</td>\n      <td>Hammersmith and Fulham</td>\n      <td>Inner London</td>\n      <td>181000</td>\n      <td>79688.691790</td>\n      <td>1639.7</td>\n      <td>110.384364</td>\n      <td>34.933408</td>\n      <td>16.764645</td>\n      <td>73.768103</td>\n      <td>...</td>\n      <td>25.6</td>\n      <td>7.23</td>\n      <td>7.60</td>\n      <td>6.94</td>\n      <td>3.15</td>\n      <td>Lab</td>\n      <td>43.478261</td>\n      <td>56.521739</td>\n      <td>0.000000</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>E09000014</td>\n      <td>Haringey</td>\n      <td>Inner London</td>\n      <td>263100</td>\n      <td>105459.284200</td>\n      <td>2959.8</td>\n      <td>88.883425</td>\n      <td>34.384912</td>\n      <td>19.877305</td>\n      <td>71.199466</td>\n      <td>...</td>\n      <td>33.1</td>\n      <td>7.20</td>\n      <td>7.44</td>\n      <td>7.13</td>\n      <td>3.07</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>84.210526</td>\n      <td>15.789474</td>\n      <td>38.1</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>E09000015</td>\n      <td>Harrow</td>\n      <td>Outer London</td>\n      <td>245900</td>\n      <td>86968.599850</td>\n      <td>5046.3</td>\n      <td>48.722544</td>\n      <td>37.695216</td>\n      <td>20.110244</td>\n      <td>65.413384</td>\n      <td>...</td>\n      <td>14.2</td>\n      <td>7.34</td>\n      <td>7.53</td>\n      <td>7.35</td>\n      <td>3.17</td>\n      <td>Lab</td>\n      <td>41.269841</td>\n      <td>53.968254</td>\n      <td>1.587302</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>E09000016</td>\n      <td>Havering</td>\n      <td>Outer London</td>\n      <td>242600</td>\n      <td>99202.437800</td>\n      <td>11235.0</td>\n      <td>21.589910</td>\n      <td>40.296140</td>\n      <td>18.781558</td>\n      <td>62.788014</td>\n      <td>...</td>\n      <td>26.4</td>\n      <td>7.40</td>\n      <td>7.65</td>\n      <td>7.24</td>\n      <td>3.17</td>\n      <td>No Overall Control</td>\n      <td>40.740741</td>\n      <td>1.851852</td>\n      <td>0.000000</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>E09000017</td>\n      <td>Hillingdon</td>\n      <td>Outer London</td>\n      <td>287500</td>\n      <td>104650.805600</td>\n      <td>11570.1</td>\n      <td>24.851919</td>\n      <td>36.171629</td>\n      <td>20.911751</td>\n      <td>66.121424</td>\n      <td>...</td>\n      <td>27.7</td>\n      <td>7.35</td>\n      <td>7.63</td>\n      <td>7.34</td>\n      <td>3.34</td>\n      <td>Cons</td>\n      <td>64.615385</td>\n      <td>35.384615</td>\n      <td>0.000000</td>\n      <td>35.76</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>E09000018</td>\n      <td>Hounslow</td>\n      <td>Outer London</td>\n      <td>264300</td>\n      <td>98840.744350</td>\n      <td>5597.8</td>\n      <td>47.209459</td>\n      <td>35.263763</td>\n      <td>20.616902</td>\n      <td>68.542073</td>\n      <td>...</td>\n      <td>30.4</td>\n      <td>7.30</td>\n      <td>7.60</td>\n      <td>7.29</td>\n      <td>3.51</td>\n      <td>Lab</td>\n      <td>18.333333</td>\n      <td>81.666667</td>\n      <td>0.000000</td>\n      <td>36.8</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>E09000019</td>\n      <td>Islington</td>\n      <td>Inner London</td>\n      <td>215900</td>\n      <td>97616.282240</td>\n      <td>1485.7</td>\n      <td>145.324910</td>\n      <td>34.419467</td>\n      <td>15.863559</td>\n      <td>75.457376</td>\n      <td>...</td>\n      <td>30.1</td>\n      <td>7.08</td>\n      <td>7.22</td>\n      <td>6.85</td>\n      <td>3.74</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>97.916667</td>\n      <td>0.000000</td>\n      <td>38.4</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>E09000020</td>\n      <td>Kensington and Chelsea</td>\n      <td>Inner London</td>\n      <td>155700</td>\n      <td>77210.897790</td>\n      <td>1212.4</td>\n      <td>128.427401</td>\n      <td>38.308554</td>\n      <td>15.908516</td>\n      <td>70.878237</td>\n      <td>...</td>\n      <td>17.7</td>\n      <td>7.68</td>\n      <td>7.92</td>\n      <td>7.51</td>\n      <td>3.06</td>\n      <td>Cons</td>\n      <td>74.000000</td>\n      <td>24.000000</td>\n      <td>2.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>E09000021</td>\n      <td>Kingston upon Thames</td>\n      <td>Outer London</td>\n      <td>166400</td>\n      <td>65782.630740</td>\n      <td>3726.1</td>\n      <td>44.660475</td>\n      <td>36.885957</td>\n      <td>18.994951</td>\n      <td>67.980436</td>\n      <td>...</td>\n      <td>20</td>\n      <td>7.29</td>\n      <td>7.45</td>\n      <td>7.18</td>\n      <td>3.23</td>\n      <td>Cons</td>\n      <td>58.333333</td>\n      <td>4.166667</td>\n      <td>37.500000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>E09000022</td>\n      <td>Lambeth</td>\n      <td>Inner London</td>\n      <td>313800</td>\n      <td>134512.450200</td>\n      <td>2681.0</td>\n      <td>117.055632</td>\n      <td>33.862641</td>\n      <td>17.899970</td>\n      <td>74.455090</td>\n      <td>...</td>\n      <td>33.2</td>\n      <td>7.09</td>\n      <td>7.40</td>\n      <td>6.97</td>\n      <td>3.69</td>\n      <td>Lab</td>\n      <td>4.761905</td>\n      <td>93.650794</td>\n      <td>0.000000</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>E09000023</td>\n      <td>Lewisham</td>\n      <td>Inner London</td>\n      <td>286000</td>\n      <td>120439.358900</td>\n      <td>3514.9</td>\n      <td>81.366697</td>\n      <td>34.540168</td>\n      <td>20.620499</td>\n      <td>69.996836</td>\n      <td>...</td>\n      <td>42</td>\n      <td>7.23</td>\n      <td>7.71</td>\n      <td>7.13</td>\n      <td>3.35</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>98.148148</td>\n      <td>0.000000</td>\n      <td>37.2</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>E09000024</td>\n      <td>Merton</td>\n      <td>Outer London</td>\n      <td>205400</td>\n      <td>81047.637240</td>\n      <td>3762.5</td>\n      <td>54.603478</td>\n      <td>36.262610</td>\n      <td>20.203379</td>\n      <td>67.896608</td>\n      <td>...</td>\n      <td>25.5</td>\n      <td>7.18</td>\n      <td>7.54</td>\n      <td>7.13</td>\n      <td>3.59</td>\n      <td>Lab</td>\n      <td>33.333333</td>\n      <td>60.000000</td>\n      <td>1.666667</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>E09000025</td>\n      <td>Newham</td>\n      <td>Inner London</td>\n      <td>323400</td>\n      <td>107793.332200</td>\n      <td>3619.8</td>\n      <td>89.338992</td>\n      <td>31.423439</td>\n      <td>22.508503</td>\n      <td>70.809763</td>\n      <td>...</td>\n      <td>24.1</td>\n      <td>7.22</td>\n      <td>7.51</td>\n      <td>7.32</td>\n      <td>3.36</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>0.000000</td>\n      <td>40.62</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>E09000026</td>\n      <td>Redbridge</td>\n      <td>Outer London</td>\n      <td>289900</td>\n      <td>103053.713300</td>\n      <td>5641.9</td>\n      <td>51.374341</td>\n      <td>35.531757</td>\n      <td>22.684198</td>\n      <td>65.238253</td>\n      <td>...</td>\n      <td>16.2</td>\n      <td>7.28</td>\n      <td>7.44</td>\n      <td>7.34</td>\n      <td>3.12</td>\n      <td>Lab</td>\n      <td>39.682540</td>\n      <td>55.555556</td>\n      <td>4.761905</td>\n      <td>39.7</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>E09000027</td>\n      <td>Richmond upon Thames</td>\n      <td>Outer London</td>\n      <td>191300</td>\n      <td>81353.161690</td>\n      <td>5740.7</td>\n      <td>33.331460</td>\n      <td>38.290205</td>\n      <td>20.202975</td>\n      <td>65.548776</td>\n      <td>...</td>\n      <td>19.9</td>\n      <td>7.42</td>\n      <td>7.69</td>\n      <td>7.33</td>\n      <td>3.56</td>\n      <td>Cons</td>\n      <td>72.222222</td>\n      <td>0.000000</td>\n      <td>27.777778</td>\n      <td>46.3</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>E09000028</td>\n      <td>Southwark</td>\n      <td>Inner London</td>\n      <td>298400</td>\n      <td>124613.892000</td>\n      <td>2886.2</td>\n      <td>103.403127</td>\n      <td>33.754401</td>\n      <td>18.507644</td>\n      <td>73.722633</td>\n      <td>...</td>\n      <td>31.8</td>\n      <td>7.27</td>\n      <td>7.68</td>\n      <td>7.20</td>\n      <td>3.28</td>\n      <td>Lab</td>\n      <td>3.174603</td>\n      <td>76.190476</td>\n      <td>20.634921</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>E09000029</td>\n      <td>Sutton</td>\n      <td>Outer London</td>\n      <td>196400</td>\n      <td>80748.477060</td>\n      <td>4384.7</td>\n      <td>44.802887</td>\n      <td>38.310437</td>\n      <td>20.151661</td>\n      <td>64.951011</td>\n      <td>...</td>\n      <td>25.8</td>\n      <td>7.25</td>\n      <td>7.57</td>\n      <td>7.13</td>\n      <td>3.34</td>\n      <td>Lib Dem</td>\n      <td>16.666667</td>\n      <td>0.000000</td>\n      <td>83.333333</td>\n      <td>42.2</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>E09000030</td>\n      <td>Tower Hamlets</td>\n      <td>Inner London</td>\n      <td>271100</td>\n      <td>109280.540100</td>\n      <td>1978.1</td>\n      <td>137.067542</td>\n      <td>31.064282</td>\n      <td>19.602621</td>\n      <td>74.531880</td>\n      <td>...</td>\n      <td>24.3</td>\n      <td>7.28</td>\n      <td>7.56</td>\n      <td>7.32</td>\n      <td>2.93</td>\n      <td>Tower Hamlets First</td>\n      <td>15.555556</td>\n      <td>44.444444</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>Outer London</td>\n      <td>267700</td>\n      <td>100524.458900</td>\n      <td>3880.8</td>\n      <td>68.970286</td>\n      <td>34.502988</td>\n      <td>21.784829</td>\n      <td>68.105760</td>\n      <td>...</td>\n      <td>29.9</td>\n      <td>7.24</td>\n      <td>7.72</td>\n      <td>7.26</td>\n      <td>2.99</td>\n      <td>Lab</td>\n      <td>26.666667</td>\n      <td>73.333333</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>E09000032</td>\n      <td>Wandsworth</td>\n      <td>Inner London</td>\n      <td>311800</td>\n      <td>131562.012900</td>\n      <td>3426.4</td>\n      <td>91.009107</td>\n      <td>34.414955</td>\n      <td>17.342442</td>\n      <td>73.693151</td>\n      <td>...</td>\n      <td>25.5</td>\n      <td>7.23</td>\n      <td>7.55</td>\n      <td>7.28</td>\n      <td>3.55</td>\n      <td>Cons</td>\n      <td>68.333333</td>\n      <td>31.666667</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>E09000033</td>\n      <td>Westminster</td>\n      <td>Inner London</td>\n      <td>226600</td>\n      <td>108550.111900</td>\n      <td>2148.7</td>\n      <td>105.457732</td>\n      <td>36.729055</td>\n      <td>14.781940</td>\n      <td>73.924420</td>\n      <td>...</td>\n      <td>21.2</td>\n      <td>7.09</td>\n      <td>7.44</td>\n      <td>7.09</td>\n      <td>3.58</td>\n      <td>Cons</td>\n      <td>73.333333</td>\n      <td>26.666667</td>\n      <td>0.000000</td>\n      <td>not avail</td>\n    </tr>\n  </tbody>\n</table>\n<p>33 rows Ã 76 columns</p>\n</div>\n```\n:::\n:::\n\n\nLots of different features. We also have really odd `NaN` values such as `x` and `not avail`. We can try and get rid of this.\n\n::: {#cell-4 .cell execution_count=3}\n``` {.python .cell-code}\ndef isnumber(x):\n    try:\n        float(x)\n        return True\n    except:\n        if (len(x) > 1) & (\"not avail\" not in x):\n            return True\n        else:\n            return False\n\n# apply isnumber function to every element\ndf = df[df.applymap(isnumber)]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Code</th>\n      <th>Area/INDICATOR</th>\n      <th>Inner/ Outer London</th>\n      <th>GLA Population Estimate 2013</th>\n      <th>GLA Household Estimate 2013</th>\n      <th>Inland Area (Hectares)</th>\n      <th>Population density (per hectare) 2013</th>\n      <th>Average Age, 2013</th>\n      <th>Proportion of population aged 0-15, 2013</th>\n      <th>Proportion of population of working-age, 2013</th>\n      <th>...</th>\n      <th>Teenage conception rate (2012)</th>\n      <th>Life satisfaction score 2012-13 (out of 10)</th>\n      <th>Worthwhileness score 2012-13 (out of 10)</th>\n      <th>Happiness score 2012-13 (out of 10)</th>\n      <th>Anxiety score 2012-13 (out of 10)</th>\n      <th>Political control in council</th>\n      <th>Proportion of seats won by Conservatives in 2014 election</th>\n      <th>Proportion of seats won by Labour in 2014 election</th>\n      <th>Proportion of seats won by Lib Dems in 2014 election</th>\n      <th>Turnout at 2014 local elections</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000001</td>\n      <td>City of London</td>\n      <td>Inner London</td>\n      <td>8000</td>\n      <td>4514.371383</td>\n      <td>290.4</td>\n      <td>27.525868</td>\n      <td>41.303887</td>\n      <td>7.948036</td>\n      <td>77.541617</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>8.10</td>\n      <td>8.23</td>\n      <td>7.44</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000002</td>\n      <td>Barking and Dagenham</td>\n      <td>Outer London</td>\n      <td>195600</td>\n      <td>73261.408580</td>\n      <td>3610.8</td>\n      <td>54.160527</td>\n      <td>33.228935</td>\n      <td>26.072939</td>\n      <td>63.835021</td>\n      <td>...</td>\n      <td>35.4</td>\n      <td>7.06</td>\n      <td>7.57</td>\n      <td>6.97</td>\n      <td>3.3</td>\n      <td>Lab</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>0.000000</td>\n      <td>38.16</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000003</td>\n      <td>Barnet</td>\n      <td>Outer London</td>\n      <td>370000</td>\n      <td>141385.794900</td>\n      <td>8674.8</td>\n      <td>42.651374</td>\n      <td>36.896246</td>\n      <td>20.886408</td>\n      <td>65.505593</td>\n      <td>...</td>\n      <td>14.7</td>\n      <td>7.35</td>\n      <td>7.79</td>\n      <td>7.27</td>\n      <td>2.63</td>\n      <td>Cons</td>\n      <td>50.793651</td>\n      <td>42.857143</td>\n      <td>1.587302</td>\n      <td>41.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>E09000004</td>\n      <td>Bexley</td>\n      <td>Outer London</td>\n      <td>236500</td>\n      <td>94701.226400</td>\n      <td>6058.1</td>\n      <td>39.044243</td>\n      <td>38.883039</td>\n      <td>20.282830</td>\n      <td>63.146450</td>\n      <td>...</td>\n      <td>25.8</td>\n      <td>7.47</td>\n      <td>7.75</td>\n      <td>7.21</td>\n      <td>3.22</td>\n      <td>Cons</td>\n      <td>71.428571</td>\n      <td>23.809524</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>E09000005</td>\n      <td>Brent</td>\n      <td>Outer London</td>\n      <td>320200</td>\n      <td>114318.553900</td>\n      <td>4323.3</td>\n      <td>74.063670</td>\n      <td>35.262694</td>\n      <td>20.462585</td>\n      <td>68.714872</td>\n      <td>...</td>\n      <td>19.6</td>\n      <td>7.23</td>\n      <td>7.32</td>\n      <td>7.09</td>\n      <td>3.33</td>\n      <td>Lab</td>\n      <td>9.523810</td>\n      <td>88.888889</td>\n      <td>1.587302</td>\n      <td>33</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã 76 columns</p>\n</div>\n```\n:::\n:::\n\n\nThat looks much cleaner. The missing values are all `NaN` now. This will help us fill them in and/or address them in some way.\n\n::: {#cell-6 .cell execution_count=4}\n``` {.python .cell-code}\n# get only numeric columns\nnumericColumns = df._get_numeric_data()\nnumericColumns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GLA Population Estimate 2013</th>\n      <th>GLA Household Estimate 2013</th>\n      <th>Inland Area (Hectares)</th>\n      <th>Population density (per hectare) 2013</th>\n      <th>Average Age, 2013</th>\n      <th>Proportion of population aged 0-15, 2013</th>\n      <th>Proportion of population of working-age, 2013</th>\n      <th>Proportion of population aged 65 and over, 2013</th>\n      <th>% of population from BAME groups (2013)</th>\n      <th>% people aged 3+ whose main language is not English (2011 census)</th>\n      <th>...</th>\n      <th>Average Public Transport Accessibility score, 2012</th>\n      <th>Indices of Multiple Deprivation 2010 Rank of Average Score</th>\n      <th>Income Support claimant rate (Feb-14)</th>\n      <th>Rates of Children Looked After (2013)</th>\n      <th>Life satisfaction score 2012-13 (out of 10)</th>\n      <th>Worthwhileness score 2012-13 (out of 10)</th>\n      <th>Happiness score 2012-13 (out of 10)</th>\n      <th>Proportion of seats won by Conservatives in 2014 election</th>\n      <th>Proportion of seats won by Labour in 2014 election</th>\n      <th>Proportion of seats won by Lib Dems in 2014 election</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8000</td>\n      <td>4514.371383</td>\n      <td>290.4</td>\n      <td>27.525868</td>\n      <td>41.303887</td>\n      <td>7.948036</td>\n      <td>77.541617</td>\n      <td>14.510348</td>\n      <td>22.557238</td>\n      <td>17.138103</td>\n      <td>...</td>\n      <td>7.631205</td>\n      <td>262</td>\n      <td>0.527983</td>\n      <td>98</td>\n      <td>8.10</td>\n      <td>8.23</td>\n      <td>7.44</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>195600</td>\n      <td>73261.408580</td>\n      <td>3610.8</td>\n      <td>54.160527</td>\n      <td>33.228935</td>\n      <td>26.072939</td>\n      <td>63.835021</td>\n      <td>10.092040</td>\n      <td>45.712357</td>\n      <td>18.724201</td>\n      <td>...</td>\n      <td>2.994817</td>\n      <td>22</td>\n      <td>4.041773</td>\n      <td>76</td>\n      <td>7.06</td>\n      <td>7.57</td>\n      <td>6.97</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>370000</td>\n      <td>141385.794900</td>\n      <td>8674.8</td>\n      <td>42.651374</td>\n      <td>36.896246</td>\n      <td>20.886408</td>\n      <td>65.505593</td>\n      <td>13.607999</td>\n      <td>37.148811</td>\n      <td>23.405037</td>\n      <td>...</td>\n      <td>2.994527</td>\n      <td>176</td>\n      <td>1.736905</td>\n      <td>37</td>\n      <td>7.35</td>\n      <td>7.79</td>\n      <td>7.27</td>\n      <td>50.793651</td>\n      <td>42.857143</td>\n      <td>1.587302</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>236500</td>\n      <td>94701.226400</td>\n      <td>6058.1</td>\n      <td>39.044243</td>\n      <td>38.883039</td>\n      <td>20.282830</td>\n      <td>63.146450</td>\n      <td>16.570720</td>\n      <td>19.620095</td>\n      <td>6.031289</td>\n      <td>...</td>\n      <td>2.513007</td>\n      <td>174</td>\n      <td>2.236355</td>\n      <td>47</td>\n      <td>7.47</td>\n      <td>7.75</td>\n      <td>7.21</td>\n      <td>71.428571</td>\n      <td>23.809524</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>320200</td>\n      <td>114318.553900</td>\n      <td>4323.3</td>\n      <td>74.063670</td>\n      <td>35.262694</td>\n      <td>20.462585</td>\n      <td>68.714872</td>\n      <td>10.822543</td>\n      <td>64.948141</td>\n      <td>37.151120</td>\n      <td>...</td>\n      <td>3.702753</td>\n      <td>35</td>\n      <td>2.256102</td>\n      <td>49</td>\n      <td>7.23</td>\n      <td>7.32</td>\n      <td>7.09</td>\n      <td>9.523810</td>\n      <td>88.888889</td>\n      <td>1.587302</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã 41 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-7 .cell execution_count=5}\n``` {.python .cell-code}\n# the above piece of code is throwing a lot of features out for not being a numeric column. The resulting frame has 41 features, however, we would expect more.\n# upon a bit of debugging, we found out that --  df._get_numeric_data() -- a Pandas function -- has a minor bug in inferring which columns are numeric when the first value of a column is a missing value, i.e., 'NaN' value. \n# This meant that some columns that are numeric were removed from the dataset even though they are numeric. \n\n\n# this next piece of code is addressing that now and also fills in the missing values with the mean() value of a column\n\nfor column_name, column in df.items():\n    try:\n        df[column_name] = df[column_name].fillna(df[column_name].mean())\n    except:\n        print(\"Column:\", column_name, \" is not a numeric column\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn: Code  is not a numeric column\nColumn: Area/INDICATOR  is not a numeric column\nColumn: Inner/ Outer London  is not a numeric column\nColumn: Largest migrant population by country of birth (2013)  is not a numeric column\nColumn: Second largest migrant population by country of birth (2013)  is not a numeric column\nColumn: Third largest migrant population by country of birth (2013)  is not a numeric column\nColumn: Political control in council  is not a numeric column\n```\n:::\n:::\n\n\n::: {#cell-8 .cell execution_count=6}\n``` {.python .cell-code}\n# get only numeric columns\nnumericColumns = df._get_numeric_data()\nnumericColumns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GLA Population Estimate 2013</th>\n      <th>GLA Household Estimate 2013</th>\n      <th>Inland Area (Hectares)</th>\n      <th>Population density (per hectare) 2013</th>\n      <th>Average Age, 2013</th>\n      <th>Proportion of population aged 0-15, 2013</th>\n      <th>Proportion of population of working-age, 2013</th>\n      <th>Proportion of population aged 65 and over, 2013</th>\n      <th>% of resident population born abroad (2013)</th>\n      <th>% of largest migrant population (2013)</th>\n      <th>...</th>\n      <th>Female life expectancy, (2010-12)</th>\n      <th>Teenage conception rate (2012)</th>\n      <th>Life satisfaction score 2012-13 (out of 10)</th>\n      <th>Worthwhileness score 2012-13 (out of 10)</th>\n      <th>Happiness score 2012-13 (out of 10)</th>\n      <th>Anxiety score 2012-13 (out of 10)</th>\n      <th>Proportion of seats won by Conservatives in 2014 election</th>\n      <th>Proportion of seats won by Labour in 2014 election</th>\n      <th>Proportion of seats won by Lib Dems in 2014 election</th>\n      <th>Turnout at 2014 local elections</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8000</td>\n      <td>4514.371383</td>\n      <td>290.4</td>\n      <td>27.525868</td>\n      <td>41.303887</td>\n      <td>7.948036</td>\n      <td>77.541617</td>\n      <td>14.510348</td>\n      <td>35.883871</td>\n      <td>5.194357</td>\n      <td>...</td>\n      <td>83.809375</td>\n      <td>25.728125</td>\n      <td>8.10</td>\n      <td>8.23</td>\n      <td>7.44</td>\n      <td>3.284688</td>\n      <td>32.854444</td>\n      <td>56.615819</td>\n      <td>6.598065</td>\n      <td>39.054783</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>195600</td>\n      <td>73261.408580</td>\n      <td>3610.8</td>\n      <td>54.160527</td>\n      <td>33.228935</td>\n      <td>26.072939</td>\n      <td>63.835021</td>\n      <td>10.092040</td>\n      <td>35.789474</td>\n      <td>5.814975</td>\n      <td>...</td>\n      <td>82.000000</td>\n      <td>35.400000</td>\n      <td>7.06</td>\n      <td>7.57</td>\n      <td>6.97</td>\n      <td>3.300000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>0.000000</td>\n      <td>38.160000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>370000</td>\n      <td>141385.794900</td>\n      <td>8674.8</td>\n      <td>42.651374</td>\n      <td>36.896246</td>\n      <td>20.886408</td>\n      <td>65.505593</td>\n      <td>13.607999</td>\n      <td>35.854342</td>\n      <td>2.234626</td>\n      <td>...</td>\n      <td>84.500000</td>\n      <td>14.700000</td>\n      <td>7.35</td>\n      <td>7.79</td>\n      <td>7.27</td>\n      <td>2.630000</td>\n      <td>50.793651</td>\n      <td>42.857143</td>\n      <td>1.587302</td>\n      <td>41.100000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>236500</td>\n      <td>94701.226400</td>\n      <td>6058.1</td>\n      <td>39.044243</td>\n      <td>38.883039</td>\n      <td>20.282830</td>\n      <td>63.146450</td>\n      <td>16.570720</td>\n      <td>16.450216</td>\n      <td>2.169910</td>\n      <td>...</td>\n      <td>84.400000</td>\n      <td>25.800000</td>\n      <td>7.47</td>\n      <td>7.75</td>\n      <td>7.21</td>\n      <td>3.220000</td>\n      <td>71.428571</td>\n      <td>23.809524</td>\n      <td>0.000000</td>\n      <td>39.054783</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>320200</td>\n      <td>114318.553900</td>\n      <td>4323.3</td>\n      <td>74.063670</td>\n      <td>35.262694</td>\n      <td>20.462585</td>\n      <td>68.714872</td>\n      <td>10.822543</td>\n      <td>53.307393</td>\n      <td>10.717273</td>\n      <td>...</td>\n      <td>84.500000</td>\n      <td>19.600000</td>\n      <td>7.23</td>\n      <td>7.32</td>\n      <td>7.09</td>\n      <td>3.330000</td>\n      <td>9.523810</td>\n      <td>88.888889</td>\n      <td>1.587302</td>\n      <td>33.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã 69 columns</p>\n</div>\n```\n:::\n:::\n\n\nNow we have 69 columns. Looks much better than 41, we can move on!\n\n::: callout-warning\n\nReflect here whether the `mean()` replacements for missing values taht we did above is sensible and/or would work for each and every column here. You might need more sophisticated methods for filling in some of the missing values, e.g., using a model-based approach to 'predict' a value. \n\n:::\n\n::: {#cell-11 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.metrics import euclidean_distances\n\n# keep place names and store them in a variable\nplaceNames = df[\"Area/INDICATOR\"]\n\n# if we hadn't done it, we could have filled in the missing values also here.\n# numericColumns = numericColumns.fillna(numericColumns.mean())\n\n# let's centralize the data\nnumericColumns -= numericColumns.mean()\n\n```\n:::\n\n\nCheck to make sure everything looks ok.\n\n::: {#cell-13 .cell execution_count=8}\n``` {.python .cell-code}\nnumericColumns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GLA Population Estimate 2013</th>\n      <th>GLA Household Estimate 2013</th>\n      <th>Inland Area (Hectares)</th>\n      <th>Population density (per hectare) 2013</th>\n      <th>Average Age, 2013</th>\n      <th>Proportion of population aged 0-15, 2013</th>\n      <th>Proportion of population of working-age, 2013</th>\n      <th>Proportion of population aged 65 and over, 2013</th>\n      <th>% of resident population born abroad (2013)</th>\n      <th>% of largest migrant population (2013)</th>\n      <th>...</th>\n      <th>Female life expectancy, (2010-12)</th>\n      <th>Teenage conception rate (2012)</th>\n      <th>Life satisfaction score 2012-13 (out of 10)</th>\n      <th>Worthwhileness score 2012-13 (out of 10)</th>\n      <th>Happiness score 2012-13 (out of 10)</th>\n      <th>Anxiety score 2012-13 (out of 10)</th>\n      <th>Proportion of seats won by Conservatives in 2014 election</th>\n      <th>Proportion of seats won by Labour in 2014 election</th>\n      <th>Proportion of seats won by Lib Dems in 2014 election</th>\n      <th>Turnout at 2014 local elections</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-247760.606061</td>\n      <td>-97761.616805</td>\n      <td>-4473.681818</td>\n      <td>-43.279630</td>\n      <td>5.426932</td>\n      <td>-11.500067</td>\n      <td>8.480871</td>\n      <td>3.019196</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>-1.421085e-14</td>\n      <td>-3.552714e-15</td>\n      <td>0.816364</td>\n      <td>0.651212</td>\n      <td>0.23303</td>\n      <td>8.881784e-16</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-8.881784e-16</td>\n      <td>7.105427e-15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-60160.606061</td>\n      <td>-29014.579608</td>\n      <td>-1153.281818</td>\n      <td>-16.644971</td>\n      <td>-2.648021</td>\n      <td>6.624837</td>\n      <td>-5.225725</td>\n      <td>-1.399112</td>\n      <td>-0.094397</td>\n      <td>0.620617</td>\n      <td>...</td>\n      <td>-1.809375e+00</td>\n      <td>9.671875e+00</td>\n      <td>-0.223636</td>\n      <td>-0.008788</td>\n      <td>-0.23697</td>\n      <td>1.531250e-02</td>\n      <td>-32.854444</td>\n      <td>43.384181</td>\n      <td>-6.598065e+00</td>\n      <td>-8.947826e-01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>114239.393939</td>\n      <td>39109.806712</td>\n      <td>3910.718182</td>\n      <td>-28.154125</td>\n      <td>1.019290</td>\n      <td>1.438305</td>\n      <td>-3.555153</td>\n      <td>2.116847</td>\n      <td>-0.029529</td>\n      <td>-2.959732</td>\n      <td>...</td>\n      <td>6.906250e-01</td>\n      <td>-1.102813e+01</td>\n      <td>0.066364</td>\n      <td>0.211212</td>\n      <td>0.06303</td>\n      <td>-6.546875e-01</td>\n      <td>17.939207</td>\n      <td>-13.758676</td>\n      <td>-5.010764e+00</td>\n      <td>2.045217e+00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-19260.606061</td>\n      <td>-7574.761788</td>\n      <td>1294.018182</td>\n      <td>-31.761255</td>\n      <td>3.006083</td>\n      <td>0.834727</td>\n      <td>-5.914296</td>\n      <td>5.079569</td>\n      <td>-19.433655</td>\n      <td>-3.024448</td>\n      <td>...</td>\n      <td>5.906250e-01</td>\n      <td>7.187500e-02</td>\n      <td>0.186364</td>\n      <td>0.171212</td>\n      <td>0.00303</td>\n      <td>-6.468750e-02</td>\n      <td>38.574127</td>\n      <td>-32.806295</td>\n      <td>-6.598065e+00</td>\n      <td>7.105427e-15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>64439.393939</td>\n      <td>12042.565712</td>\n      <td>-440.781818</td>\n      <td>3.258171</td>\n      <td>-0.614262</td>\n      <td>1.014482</td>\n      <td>-0.345874</td>\n      <td>-0.668608</td>\n      <td>17.423522</td>\n      <td>5.522915</td>\n      <td>...</td>\n      <td>6.906250e-01</td>\n      <td>-6.128125e+00</td>\n      <td>-0.053636</td>\n      <td>-0.258788</td>\n      <td>-0.11697</td>\n      <td>4.531250e-02</td>\n      <td>-23.330634</td>\n      <td>32.273070</td>\n      <td>-5.010764e+00</td>\n      <td>-6.054783e+00</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã 69 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can plot out our many dimension space by uncommenting the code below (also note down how long does this take).\n\n::: {#cell-15 .cell execution_count=9}\n``` {.python .cell-code}\n#import seaborn as sns\n#sns_plot = sns.pairplot(numericColumns)\n#sns_plot.savefig(\"figs/output.png\")\n```\n:::\n\n\nGiven that this takes quite a while (around 10 minutes), this is the image that would result from uncommenting and running the code above.\n\n::: {.column-page}\n![](figs/output.png)\n:::\n\nDimension reduction will help us here!\n\n## Multidimensional scaling\n\nWe could apply various different types of dimension reduction here. We are specifically going to capture the dissimilarity in the data using [multidimensional scaling](https://scikit-learn.org/stable/modules/manifold.html#multidimensional-scaling). We will need a distance matrix to start here.\n\n::: {#cell-18 .cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn import manifold\n\n# Here, we compute the euclidean distances between the columns by passing the same data twice\n# the resulting data matrix will now have the pairwise distances between the boroughs.\n# CAUTION: note that we are now building a distance matrix in a high-dimensional data space\n# remember the Curse of Dimensionality -- we need to be cautious with the distance values\ndistMatrix = euclidean_distances(numericColumns, numericColumns)\n\n# for instance, typing distMatrix.shape on the console gives:\n# Out[115]: (38, 38) # i.e., the number of rows\n\n# first we generate an MDS object and extract the projections\nmds = manifold.MDS(n_components = 2, max_iter=3000, n_init=1, dissimilarity=\"precomputed\", normalized_stress=False)\nY = mds.fit_transform(distMatrix)\n```\n:::\n\n\nTo interpret what is happening, let us plot the boroughs on the projected two dimensional space.\n\n::: {#cell-20 .cell .column-page execution_count=11}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\nplt.suptitle('MDS on only London boroughs')\nax.scatter(Y[:, 0], Y[:, 1], c=\"#D06B36\", s = 100, alpha = 0.8, linewidth=0)\n\nfor i, txt in enumerate(placeNames):\n    ax.annotate(txt, (Y[:, 0][i],Y[:, 1][i]))\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_1_files/figure-html/cell-12-output-1.png){width=1240 height=1294}\n:::\n:::\n\n\nHere, we are projecting all the numeric variables, so it is difficult to get a sense of what these components represent and how to interpret the visualisation. We may want to project only a subset of features. \n\n::: callout-important\n\n### Feature selection\n\nFeature selection is not straightforward and it is always a decision made by us informed by something (i.e. measures, literature --refer to the slides from last week). Below we will be _embedding_ (machine learners' word for projection) two different sets of features for you to compare.\n\n:::\n\n### Feature selection: Happiness\n\nIn the example below, we are selecting happiness metrics. Pulling these out of our data and carrying out more multidimensional scaling can help us see how the boroughs differ in happiness.\n\n::: callout-note\n\n\n\nThe decision of selecting the features `Life satisfaction score 2012-13 (out of 10)`, `Worthwhileness score 2012-13 (out of 10)` and `Happiness score 2012-13 (out of 10)` is not based on any numerical decision, but it is based on the semantics of the variables. In other words, these three variables provide different perspectives to describe how happy people are in the different neighbourhoods.\n\n:::\n\n::: {#cell-22 .cell .column-page execution_count=12}\n``` {.python .cell-code}\n# get the data columns relating to emotions and feelings\ndataOnEmotions = numericColumns[[\"Life satisfaction score 2012-13 (out of 10)\", \"Worthwhileness score 2012-13 (out of 10)\",\"Happiness score 2012-13 (out of 10)\"]]\n\n# a new distance matrix to represent \"emotional distance\"s\ndistMatrix2 = euclidean_distances(dataOnEmotions, dataOnEmotions)\n\n# compute a new \"embedding\" (machine learners' word for projection)\nY2 = mds.fit_transform(distMatrix2)\n\n# let's look at the results\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\nplt.suptitle('An \\\"emotional\\\" look at London boroughs')\nax.scatter(Y2[:, 0], Y2[:, 1], c=\"#D06B36\", s = 100, alpha = 0.8, linewidth=0)\n\nfor i, txt in enumerate(placeNames):\n    ax.annotate(txt, (Y2[:, 0][i],Y2[:, 1][i]))\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_1_files/figure-html/cell-13-output-1.png){width=1183 height=1294}\n:::\n:::\n\n\nThe location of the different boroughs on the 2 dimensional multidimensional scaling space from the happiness metrics is\n\n::: {#cell-24 .cell execution_count=13}\n``` {.python .cell-code}\nresults_fixed = Y2.copy()\nprint(results_fixed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[-0.92159018 -0.53792959]\n [ 0.25570532 -0.1894772 ]\n [-0.20445331 -0.07893746]\n [-0.24417672 -0.09540727]\n [ 0.27227846  0.12135281]\n [-0.44821535 -0.01458825]\n [ 0.21581743  0.09688304]\n [ 0.29528229 -0.07532856]\n [-0.03378934  0.26153294]\n [-0.04992586  0.21935873]\n [ 0.20254322 -0.06027776]\n [ 0.32030424 -0.03659743]\n [ 0.14746416 -0.22327763]\n [ 0.17538268  0.03728191]\n [-0.085236    0.14386266]\n [-0.14612244 -0.00472043]\n [-0.14268216  0.08018091]\n [-0.06793631  0.05807451]\n [ 0.55132016 -0.01635799]\n [-0.60865325  0.08454454]\n [ 0.10297206  0.07975991]\n [ 0.35351724 -0.05395096]\n [-0.01510131 -0.14051334]\n [ 0.11983378 -0.03329177]\n [ 0.01659794  0.13969685]\n [ 0.02589167  0.19739402]\n [-0.22076448  0.03951558]\n [-0.05232735 -0.06231074]\n [ 0.06279951 -0.04479659]\n [-0.0471699   0.10434034]\n [-0.09371292 -0.06509311]\n [ 0.0065218   0.08164684]\n [ 0.25762492 -0.0125695 ]]\n```\n:::\n:::\n\n\n::: {#cell-25 .cell execution_count=14}\n``` {.python .cell-code}\nprint(results_fixed.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(33, 2)\n```\n:::\n:::\n\n\nWe may want to look at if the general happiness rating captures the position of the boroughs. To do this, we need to assign colours based on the binned happiness score.\n\n::: {#cell-27 .cell execution_count=15}\n``` {.python .cell-code}\nimport numpy as np\n\ncolorMappingValuesHappiness = np.asarray(dataOnEmotions[[\"Life satisfaction score 2012-13 (out of 10)\"]]).flatten()\ncolorMappingValuesHappiness.shape\n\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n(33,)\n```\n:::\n:::\n\n\n::: {#cell-28 .cell execution_count=16}\n``` {.python .cell-code}\n\n\ncolorMappingValuesHappiness\n#c = colorMappingValuesCrime, cmap = plt.cm.Greens\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([ 0.81636364, -0.22363636,  0.06636364,  0.18636364, -0.05363636,\n        0.34636364, -0.06363636, -0.28363636, -0.04363636, -0.10363636,\n       -0.12363636, -0.21363636, -0.05363636, -0.08363636,  0.05636364,\n        0.11636364,  0.06636364,  0.01636364, -0.20363636,  0.39636364,\n        0.00636364, -0.19363636, -0.05363636, -0.10363636, -0.06363636,\n       -0.00363636,  0.13636364, -0.01363636, -0.03363636, -0.00363636,\n       -0.04363636, -0.05363636, -0.19363636])\n```\n:::\n:::\n\n\nFinally, we can plot this. What can you see?\n\n::: {#cell-30 .cell .column-page execution_count=17}\n``` {.python .cell-code}\n# let's look at the results\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\nplt.suptitle('An \\\"emotional\\\" look at London boroughs')\n#ax.scatter(results_fixed[:, 0], results_fixed[:, 1], c = colorMappingValuesHappiness, cmap='viridis')\nplt.scatter(results_fixed[:, 0], results_fixed[:, 1], c = colorMappingValuesHappiness, s = 100, cmap=plt.cm.Greens)\n\nfor i, txt in enumerate(placeNames):\n    ax.annotate(txt, (results_fixed[:, 0][i],results_fixed[:, 1][i]))\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_1_files/figure-html/cell-18-output-1.png){width=1183 height=1294}\n:::\n:::\n\n\n### Feature selection: diversity\n\nSimilarly, we are now selecting features based on diveristy.\n\n::: {#cell-32 .cell .column-page execution_count=18}\n``` {.python .cell-code}\n# get the data columns relating to indicators that we think are related to \"diversity\" in one way or the other\ndataOnDiversity = numericColumns[[\"Proportion of population aged 0-15, 2013\", \"Proportion of population of working-age, 2013\", \"Proportion of population aged 65 and over, 2013\", \"% of population from BAME groups (2013)\", \"% people aged 3+ whose main language is not English (2011 census)\"]]\n\n# a new distance matrix to represent distances in \"diversity\"\ndistMatrix3 = euclidean_distances(dataOnDiversity, dataOnDiversity)\n\nmds = manifold.MDS(n_components = 2, max_iter=3000, n_init=1, dissimilarity=\"precomputed\", normalized_stress = False)\nY = mds.fit_transform(distMatrix3)\n\n# Visualising the data.\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\nplt.suptitle('A \\\"diversity\\\" look at London boroughs')\nax.scatter(Y[:, 0], Y[:, 1], s = 100, c = colorMappingValuesHappiness, cmap=plt.cm.Greens)\n\nfor i, txt in enumerate(placeNames):\n    ax.annotate(txt, (Y[:, 0][i],Y[:, 1][i]))\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_5_1_files/figure-html/cell-19-output-1.png){width=1181 height=1294}\n:::\n:::\n\n\n\n## It is now your turn!\n\n\n::: callout-caution\n\n### It is your turn now\n\n**First task:**\n\nThis looks very different to the one above on \"emotion\" related variables. Our job now is to relate these two projections to one another. Do you see similarities? Do you see clusters of boroughs? Can you reflect on how you can relate and combine these two maps conceptually?\n\n**Second task:**\n\nCan you think of and then generate other maps that you can produce with this data? Have a look at the variables once again and try to produce new \"perspectives\" to the data and see what they have to say. \n\nAlso think of visualisations to help you here, can you colour them with a different variable? What would that change?\n\n:::\n\n",
    "supporting": [
      "IM939_Lab_5_1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}