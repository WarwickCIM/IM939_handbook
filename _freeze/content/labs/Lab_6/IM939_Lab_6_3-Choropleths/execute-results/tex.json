{
  "hash": "8f1a4892919bb27ba29c662e98d0bdd1",
  "result": {
    "markdown": "# Lab: Choropleth Maps\n\nA visualisation often shown is a choropleth. This is a series of spatial polygons (such as states in the USA) which are coloured by a feature, like the one below. \n\n![A choropleth map showing CO2 emissions by country as compared to world average. Source [Our World in Data](https://ourworldindata.org/grapher/per-capita-co2-vs-average)](figs/per-capita-co2-vs-average.png)\n\nIn this lab, we will look at creating choropleths of polling data in the recent USA election, and how maps can sometimes be deceptive (as well as how to detect -and avoid- such techniques). To do so, we will be using `geopandas`[^geopandas] for the geospatial features, and `altair` for the maps' visualisations.\n\n[^geopandas]: `geopandas` is a very specific and complex library that is not installed by default in Anaconda, so normally you would need to install it (and its multiple dependencies) by yourselves. If you are using the course's virtual environment, this should be installed for you the first time you set up your environment for the module. Refer to @sec-setup for instructions on how to set up your environment.\n\n## Data preparations\n\nLoad in two datasets. One (`geo_states`) contains the geospatial polygons of the states in America, but does not contain any data about USA elections; and the other (`df_polls`) is the polling data we used in the last notebook, but does not have any geospatial polygons. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd \nimport pandas as pd\nimport altair as alt\n\ngeo_states = gpd.read_file('data/gz_2010_us_040_00_500k.json')\ndf_polls = pd.read_csv('data/presidential_poll_averages_2020.csv')\n```\n:::\n\n\nLet's explore the data first:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ngeo_states.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GEO_ID</th>\n      <th>STATE</th>\n      <th>NAME</th>\n      <th>LSAD</th>\n      <th>CENSUSAREA</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0400000US23</td>\n      <td>23</td>\n      <td>Maine</td>\n      <td></td>\n      <td>30842.923</td>\n      <td>MULTIPOLYGON (((-67.61976 44.51975, -67.61541 ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0400000US25</td>\n      <td>25</td>\n      <td>Massachusetts</td>\n      <td></td>\n      <td>7800.058</td>\n      <td>MULTIPOLYGON (((-70.83204 41.60650, -70.82373 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0400000US26</td>\n      <td>26</td>\n      <td>Michigan</td>\n      <td></td>\n      <td>56538.901</td>\n      <td>MULTIPOLYGON (((-88.68443 48.11579, -88.67563 ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0400000US30</td>\n      <td>30</td>\n      <td>Montana</td>\n      <td></td>\n      <td>145545.801</td>\n      <td>POLYGON ((-104.05770 44.99743, -104.25015 44.9...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0400000US32</td>\n      <td>32</td>\n      <td>Nevada</td>\n      <td></td>\n      <td>109781.180</td>\n      <td>POLYGON ((-114.05060 37.00040, -114.04999 36.9...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis seems like a regular data frame, but there's a feature that stands out from the others: `geometry`. This feature contains the coordinates thar define the polygons (or multipolygons) for every region in the map, in this case, every State in the USA. This is also an indicator that we are not using a regular dataframe, but a particular type of dataframe called `GeoDataFrame`:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype(geo_states)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ngeopandas.geodataframe.GeoDataFrame\n```\n:::\n:::\n\n\nBecause this is a geospatial dataframe, we can visualise it as a map. In this case, we are going to use Altair to create a map using the AlbersUsa projection.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nalt.Chart(geo_states, title='US states').mark_geoshape().encode(\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nAnd now the polls' result:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf_polls\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020</td>\n      <td>Wyoming</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>30.81486</td>\n      <td>30.82599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020</td>\n      <td>Wisconsin</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>52.12642</td>\n      <td>52.09584</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020</td>\n      <td>West Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>33.49125</td>\n      <td>33.51517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020</td>\n      <td>Washington</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>59.34201</td>\n      <td>59.39408</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020</td>\n      <td>Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>53.74120</td>\n      <td>53.72101</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>29080</th>\n      <td>2020</td>\n      <td>Connecticut</td>\n      <td>2/27/2020</td>\n      <td>Donald Trump</td>\n      <td>33.66370</td>\n      <td>34.58325</td>\n    </tr>\n    <tr>\n      <th>29081</th>\n      <td>2020</td>\n      <td>Colorado</td>\n      <td>2/27/2020</td>\n      <td>Donald Trump</td>\n      <td>44.27899</td>\n      <td>44.07662</td>\n    </tr>\n    <tr>\n      <th>29082</th>\n      <td>2020</td>\n      <td>California</td>\n      <td>2/27/2020</td>\n      <td>Donald Trump</td>\n      <td>34.66504</td>\n      <td>34.69761</td>\n    </tr>\n    <tr>\n      <th>29083</th>\n      <td>2020</td>\n      <td>Arizona</td>\n      <td>2/27/2020</td>\n      <td>Donald Trump</td>\n      <td>47.79450</td>\n      <td>48.07208</td>\n    </tr>\n    <tr>\n      <th>29084</th>\n      <td>2020</td>\n      <td>Alabama</td>\n      <td>2/27/2020</td>\n      <td>Donald Trump</td>\n      <td>59.15000</td>\n      <td>59.14228</td>\n    </tr>\n  </tbody>\n</table>\n<p>29085 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nAs you can see, `modeldate` has different dates. Let's double check that:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf_polls.modeldate.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray(['11/3/2020', '11/2/2020', '11/1/2020', '10/31/2020', '10/30/2020',\n       '10/29/2020', '10/28/2020', '10/27/2020', '10/26/2020',\n       '10/25/2020', '10/24/2020', '10/23/2020', '10/22/2020',\n       '10/21/2020', '10/20/2020', '10/19/2020', '10/18/2020',\n       '10/17/2020', '10/16/2020', '10/15/2020', '10/14/2020',\n       '10/13/2020', '10/12/2020', '10/11/2020', '10/10/2020',\n       '10/9/2020', '10/8/2020', '10/7/2020', '10/6/2020', '10/5/2020',\n       '10/4/2020', '10/3/2020', '10/2/2020', '10/1/2020', '9/30/2020',\n       '9/29/2020', '9/28/2020', '9/27/2020', '9/26/2020', '9/25/2020',\n       '9/24/2020', '9/23/2020', '9/22/2020', '9/21/2020', '9/20/2020',\n       '9/19/2020', '9/18/2020', '9/17/2020', '9/16/2020', '9/15/2020',\n       '9/14/2020', '9/13/2020', '9/12/2020', '9/11/2020', '9/10/2020',\n       '9/9/2020', '9/8/2020', '9/7/2020', '9/6/2020', '9/5/2020',\n       '9/4/2020', '9/3/2020', '9/2/2020', '9/1/2020', '8/31/2020',\n       '8/30/2020', '8/29/2020', '8/28/2020', '8/27/2020', '8/26/2020',\n       '8/25/2020', '8/24/2020', '8/23/2020', '8/22/2020', '8/21/2020',\n       '8/20/2020', '8/19/2020', '8/18/2020', '8/17/2020', '8/16/2020',\n       '8/15/2020', '8/14/2020', '8/13/2020', '8/12/2020', '8/11/2020',\n       '8/10/2020', '8/9/2020', '8/8/2020', '8/7/2020', '8/6/2020',\n       '8/5/2020', '8/4/2020', '8/3/2020', '8/2/2020', '8/1/2020',\n       '7/31/2020', '7/30/2020', '7/29/2020', '7/28/2020', '7/27/2020',\n       '7/26/2020', '7/25/2020', '7/24/2020', '7/23/2020', '7/22/2020',\n       '7/21/2020', '7/20/2020', '7/19/2020', '7/18/2020', '7/17/2020',\n       '7/16/2020', '7/15/2020', '7/14/2020', '7/13/2020', '7/12/2020',\n       '7/11/2020', '7/10/2020', '7/9/2020', '7/8/2020', '7/7/2020',\n       '7/6/2020', '7/5/2020', '7/4/2020', '7/3/2020', '7/2/2020',\n       '7/1/2020', '6/30/2020', '6/29/2020', '6/28/2020', '6/27/2020',\n       '6/26/2020', '6/25/2020', '6/24/2020', '6/23/2020', '6/22/2020',\n       '6/21/2020', '6/20/2020', '6/19/2020', '6/18/2020', '6/17/2020',\n       '6/16/2020', '6/15/2020', '6/14/2020', '6/13/2020', '6/12/2020',\n       '6/11/2020', '6/10/2020', '6/9/2020', '6/8/2020', '6/7/2020',\n       '6/6/2020', '6/5/2020', '6/4/2020', '6/3/2020', '6/2/2020',\n       '6/1/2020', '5/31/2020', '5/30/2020', '5/29/2020', '5/28/2020',\n       '5/27/2020', '5/26/2020', '5/25/2020', '5/24/2020', '5/23/2020',\n       '5/22/2020', '5/21/2020', '5/20/2020', '5/19/2020', '5/18/2020',\n       '5/17/2020', '5/16/2020', '5/15/2020', '5/14/2020', '5/13/2020',\n       '5/12/2020', '5/11/2020', '5/10/2020', '5/9/2020', '5/8/2020',\n       '5/7/2020', '5/6/2020', '5/5/2020', '5/4/2020', '5/3/2020',\n       '5/2/2020', '5/1/2020', '4/30/2020', '4/29/2020', '4/28/2020',\n       '4/27/2020', '4/26/2020', '4/25/2020', '4/24/2020', '4/23/2020',\n       '4/22/2020', '4/21/2020', '4/20/2020', '4/19/2020', '4/18/2020',\n       '4/17/2020', '4/16/2020', '4/15/2020', '4/14/2020', '4/13/2020',\n       '4/12/2020', '4/11/2020', '4/10/2020', '4/9/2020', '4/8/2020',\n       '4/7/2020', '4/6/2020', '4/5/2020', '4/4/2020', '4/3/2020',\n       '4/2/2020', '4/1/2020', '3/31/2020', '3/30/2020', '3/29/2020',\n       '3/28/2020', '3/27/2020', '3/26/2020', '3/25/2020', '3/24/2020',\n       '3/23/2020', '3/22/2020', '3/21/2020', '3/20/2020', '3/19/2020',\n       '3/18/2020', '3/17/2020', '3/16/2020', '3/15/2020', '3/14/2020',\n       '3/13/2020', '3/12/2020', '3/11/2020', '3/10/2020', '3/9/2020',\n       '3/8/2020', '3/7/2020', '3/6/2020', '3/5/2020', '3/4/2020',\n       '3/3/2020', '3/2/2020', '3/1/2020', '2/29/2020', '2/28/2020',\n       '2/27/2020'], dtype=object)\n```\n:::\n:::\n\n\n### Filtering\n\nThat means, that we will need to filter our poll data to a specific date, in this case `11/2/2020`\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_nov = df_polls[\n    (df_polls.modeldate == '11/3/2020')\n]\n\ndf_nov_states = df_nov[\n    (df_nov.candidate_name == 'Donald Trump') |\n    (df_nov.candidate_name == 'Joseph R. Biden Jr.')\n]\n\ndf_nov_states\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020</td>\n      <td>Wyoming</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>30.81486</td>\n      <td>30.82599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020</td>\n      <td>Wisconsin</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>52.12642</td>\n      <td>52.09584</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020</td>\n      <td>West Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>33.49125</td>\n      <td>33.51517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020</td>\n      <td>Washington</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>59.34201</td>\n      <td>59.39408</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020</td>\n      <td>Virginia</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>53.74120</td>\n      <td>53.72101</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>2020</td>\n      <td>California</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>32.28521</td>\n      <td>32.43615</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>2020</td>\n      <td>Arkansas</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>58.39097</td>\n      <td>58.94886</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>2020</td>\n      <td>Arizona</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>46.11074</td>\n      <td>46.10181</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>2020</td>\n      <td>Alaska</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>50.99835</td>\n      <td>51.23236</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>2020</td>\n      <td>Alabama</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>57.36153</td>\n      <td>57.36126</td>\n    </tr>\n  </tbody>\n</table>\n<p>112 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Computing percentages\n\nWe want to put the percentage estimates for each candidate onto the map. First, let us create a dataframe containing the data for each candidate.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Create seperate date frame for trump and biden\ntrump_data = df_nov_states[\n    df_nov_states.candidate_name == 'Donald Trump'\n]\n\nbiden_data = df_nov_states[\n    df_nov_states.candidate_name == 'Joseph R. Biden Jr.'\n]\n```\n:::\n\n\n### Joining data\n\nAs we have seen before, we have two datasets that partially address our needs:  `geo_states` contains the geospatial polygons of the states in America, but lacks data about USA elections; `df_polls` contains data about USA elections but lacks geometry. \n\nWe will need to combine both (joining) to create a (geospatial)dataframe that contains geometry AND polling data so we can create a choropleth map capable of answering our question: _who is winning the elections?_\n\nTo do so, we need to join both dataframes using a common feature. Our spatial and poll data have the name of the state in common, but their columns have different names. \n\nOption A: We could rename the column so it is the same in all cases and then merge (see commented code below)\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Uncomment below to see the effect. This produces an almost identical geodataframe to code cell below, but more verbose. (Can you spot the difference?)\n\n# Rename column names.\n# trump_data.columns = ['cycle', 'NAME', 'modeldate', 'candidate_name', 'pct_estimate', 'pct_trend_adjusted']\n# biden_data.columns = ['cycle', 'NAME', 'modeldate', 'candidate_name', 'pct_estimate', 'pct_trend_adjusted']\n\n# We can join the geospatial and poll data using the NAME column (the name of the state).\n# geo_states_trump = geo_states.merge(trump_data, on = 'NAME')\n# geo_states_biden = geo_states.merge(biden_data, left_on = 'NAME', right_on = 'state')\n```\n:::\n\n\nOption B: We can join the geospatial and poll data using different column names by using `left_on` for the left data (usually the geodataframe) and `right_on` for the right dataframe. We will be using this method, as it doesn't require to rename columns.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Add the poll data (divided in two data frames) to a single geospatial dataframe.\ngeo_states_trump = geo_states.merge(\n    trump_data, left_on = 'NAME', right_on = 'state')\n\ngeo_states_biden = geo_states.merge(\n    biden_data, left_on = 'NAME', right_on = 'state')\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ngeo_states_trump.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GEO_ID</th>\n      <th>STATE</th>\n      <th>NAME</th>\n      <th>LSAD</th>\n      <th>CENSUSAREA</th>\n      <th>geometry</th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0400000US23</td>\n      <td>23</td>\n      <td>Maine</td>\n      <td></td>\n      <td>30842.923</td>\n      <td>MULTIPOLYGON (((-67.61976 44.51975, -67.61541 ...</td>\n      <td>2020</td>\n      <td>Maine</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>40.34410</td>\n      <td>40.31588</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0400000US25</td>\n      <td>25</td>\n      <td>Massachusetts</td>\n      <td></td>\n      <td>7800.058</td>\n      <td>MULTIPOLYGON (((-70.83204 41.60650, -70.82373 ...</td>\n      <td>2020</td>\n      <td>Massachusetts</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>28.56164</td>\n      <td>28.86275</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0400000US26</td>\n      <td>26</td>\n      <td>Michigan</td>\n      <td></td>\n      <td>56538.901</td>\n      <td>MULTIPOLYGON (((-88.68443 48.11579, -88.67563 ...</td>\n      <td>2020</td>\n      <td>Michigan</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>43.20577</td>\n      <td>43.23326</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0400000US30</td>\n      <td>30</td>\n      <td>Montana</td>\n      <td></td>\n      <td>145545.801</td>\n      <td>POLYGON ((-104.05770 44.99743, -104.25015 44.9...</td>\n      <td>2020</td>\n      <td>Montana</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>49.74744</td>\n      <td>49.78661</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0400000US32</td>\n      <td>32</td>\n      <td>Nevada</td>\n      <td></td>\n      <td>109781.180</td>\n      <td>POLYGON ((-114.05060 37.00040, -114.04999 36.9...</td>\n      <td>2020</td>\n      <td>Nevada</td>\n      <td>11/3/2020</td>\n      <td>Donald Trump</td>\n      <td>44.32982</td>\n      <td>44.36094</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ngeo_states_biden.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GEO_ID</th>\n      <th>STATE</th>\n      <th>NAME</th>\n      <th>LSAD</th>\n      <th>CENSUSAREA</th>\n      <th>geometry</th>\n      <th>cycle</th>\n      <th>state</th>\n      <th>modeldate</th>\n      <th>candidate_name</th>\n      <th>pct_estimate</th>\n      <th>pct_trend_adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0400000US23</td>\n      <td>23</td>\n      <td>Maine</td>\n      <td></td>\n      <td>30842.923</td>\n      <td>MULTIPOLYGON (((-67.61976 44.51975, -67.61541 ...</td>\n      <td>2020</td>\n      <td>Maine</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>53.31518</td>\n      <td>53.32106</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0400000US25</td>\n      <td>25</td>\n      <td>Massachusetts</td>\n      <td></td>\n      <td>7800.058</td>\n      <td>MULTIPOLYGON (((-70.83204 41.60650, -70.82373 ...</td>\n      <td>2020</td>\n      <td>Massachusetts</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>64.36328</td>\n      <td>64.62505</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0400000US26</td>\n      <td>26</td>\n      <td>Michigan</td>\n      <td></td>\n      <td>56538.901</td>\n      <td>MULTIPOLYGON (((-88.68443 48.11579, -88.67563 ...</td>\n      <td>2020</td>\n      <td>Michigan</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>51.17806</td>\n      <td>51.15482</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0400000US30</td>\n      <td>30</td>\n      <td>Montana</td>\n      <td></td>\n      <td>145545.801</td>\n      <td>POLYGON ((-104.05770 44.99743, -104.25015 44.9...</td>\n      <td>2020</td>\n      <td>Montana</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>45.34418</td>\n      <td>45.36695</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0400000US32</td>\n      <td>32</td>\n      <td>Nevada</td>\n      <td></td>\n      <td>109781.180</td>\n      <td>POLYGON ((-114.05060 37.00040, -114.04999 36.9...</td>\n      <td>2020</td>\n      <td>Nevada</td>\n      <td>11/3/2020</td>\n      <td>Joseph R. Biden Jr.</td>\n      <td>49.62386</td>\n      <td>49.65657</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nJoe Biden is clearly winning. Can we make it look like he is not?\n\n## Data visualisation\n\nWe can plot this specifying the feature to use for our colour.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    color='pct_estimate',\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\n### Binning\n\nTo smooth out any differences we can bin our data.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate', bin=alt.Bin(step=35)),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nHow would you interpret the plot above?\n\nWhat about if we increase the binstep so we have more bins?\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate', bin=alt.Bin(step=5)),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nPerhaps try different step sizes for the bins and consider how bins can shape our interpretation of the data. What would happen if plots with different bin sizes were placed side to side.\n\nTo add further confusion, what happens when we log scale the data?\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate', bin=alt.Bin(step=5), scale=alt.Scale(type='log')),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nvs\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nalt.Chart(geo_states_biden, title='Poll estimate for Joe Biden on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate', bin=alt.Bin(step=5), scale=alt.Scale(type='log')),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nWhat is happening here?!?!\n\n### Colour palettes\n\nNext up, what about the colours we use and the range of values assigned to each color? Code inspired by/taken from [here](https://colab.research.google.com/drive/1PePamFUfrgvN3ZYaN8fWfP8ovIJ0gyre#scrollTo=Poo1da-8u3cX).\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donal Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate',\n    scale=alt.Scale(type=\"linear\",\n              domain=[10, 40, 50, 55, 60, 61, 62],\n                          range=[\"#414487\",\"#414487\",\n                                 \"#355f8d\",\"#355f8d\",\n                                 \"#2a788e\",\n                                 \"#fde725\",\"#fde725\"])),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nCompare that with\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate',\n    scale=alt.Scale(type=\"linear\",\n              domain=[10, 20, 30, 35, 68, 70, 100],\n                          range=[\"#414487\",\"#414487\",\n                                 \"#7ad151\",\"#7ad151\",\n                                 \"#bddf26\",\n                                 \"#fde725\",\"#fde725\"])),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\n### Legends\n\nMy goodness! So what have we played around with?\n\n* Transforming our scale using log\n* Binning our data to smooth out variances\n* Altering our colour scheme and the ranges for each colour\n\n... what about if we remove the legend?\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nalt.Chart(geo_states_trump, title='Poll estimate for Donald Trump on 11/3/2020').mark_geoshape().encode(\n    alt.Color('pct_estimate',\n    scale=alt.Scale(type=\"linear\",\n              domain=[10, 20, 30, 35, 68, 70, 100],\n                          range=[\"#414487\",\"#414487\",\n                                 \"#7ad151\",\"#7ad151\",\n                                 \"#bddf26\",\n                                 \"#fde725\",\"#fde725\"]),\n                                 legend=None),\n    tooltip=['NAME', 'pct_estimate']\n).properties(\n    width=500,\n    height=300\n).project(\n    type='albersUsa'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nalt.Chart(...)\n```\n:::\n:::\n\n\nGood luck trying to interpret that. Though we often see maps without legends and with questionable colour schemes on TV.\n\nHow do you think choropleths should be displayed? What information does a use need to understand the message communicated in these plots?\n\n",
    "supporting": [
      "IM939_Lab_6_3-Choropleths_files/figure-pdf"
    ],
    "filters": []
  }
}