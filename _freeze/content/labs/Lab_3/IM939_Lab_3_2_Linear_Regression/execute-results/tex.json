{
  "hash": "8ef0bf1a5718e4dc924a3c97e6aa004f",
  "result": {
    "markdown": "# Lab: Regressions\n\nIn this lab we will introduce simple linear regression in Python. We are going to use `Scikit Learn` library. More information about the library you can find here:\n<https://www.tutorialspoint.com/scikit_learn/scikit_learn_linear_regression.htm>\n\n\n\n## Sea Ice Dataset\n\nThe script below is the based on the Sea Ice dataset from @igual_regression_2017.\nYou can find the data here: <ftp://sidads.colorado.edu/DATASETS/NOAA/>\nor read more about the project here: <https://nsidc.org/data/seaice_index>\n\nThis notebook will walk you through an example of a simple linear regression and the other notebook \"IM939 Lab 3 - Linear Regression Exercise.ipynb\" will include the example of a multiple linear regression, too.\n\n## Simple and Multiple Linear Regression\n\nIn the **linear model** the response $\\textbf{y}$ depends linearly from the covariates $\\textbf{x}_i$.\n\nIn the **simple** linear regression, with a single variable, we described the relationship between the predictor and the response with a straight line. The general linear model:\n$$ \\textbf{y}  =  a_0+ a_1 \\textbf{x}_1 $$\n\nThe parameter $a_0$ is called the *constant* term or the *intercept*.\n\nIn the case of **multiple** linear regression we extend this idea by fitting a m-dimensional hyperplane to our m predictors.\n\n$$ \\textbf{y}  =  a_1 \\textbf{x}_1  + \\dots + a_m \\textbf{x}_{m} $$\n\nThe $a_i$ are termed the *parameters* of the model or the coefficients.\n\n## Ordinary Least Squares\n\nOrdinary Least Squares (OLS) is the simplest and most common **estimator** in which the coefficients $a$'s \nof the simple linear regression: $\\textbf{y} = a_0+a_1 \\textbf{x}$, \nare chosen to minimize the **square of the distance between the predicted values and the actual values**. \n\n$$ ||a_0 + a_1 \\textbf{x} -  \\textbf{y} ||^2_2 = \\sum_{j=1}^n (a_0+a_1 x_{j} -  y_j )^2,$$ \n\nThis expression is often called **sum of squared errors of prediction (SSE)**.\n\n## Case study: Climate Change and Sea Ice Extent\n\nThe question: Has there been a decrease in the amount of ice in the last years?\n\n### Reading Data\n\nThere are five steps. First, let's load the data that is already in the `data` folder: `SeaIce.txt`. It is a text file, specifically is a `Tab` separated file where each `Tab` delimites the following columns:\n\n- `Year`:\t4-digit year\n- `mo`:\t1- or 2-digit month\n- `data_type`:\tInput data set (Goddard/NRTSI-G)\n- `region`:\tHemisphere that this data covers (N: Northern; S: Southern)\n- `extent`:\tSea ice extent in millions of square km\n- `area`:\tSea ice area in millions of square km\n\nOnce we upload the data, we can create a `DataFrame`[^dataframe-reminder] using Pandas. \n\n[^dataframe-reminder]: A reminder what is DataFrame: <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nice = pd.read_csv('data/raw/SeaIce.txt', \n                  delim_whitespace=True)\n\nprint('shape:', ice.shape) #this returns number of rows and columns in a dataset\nice.head() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (424, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>mo</th>\n      <th>data_type</th>\n      <th>region</th>\n      <th>extent</th>\n      <th>area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1979</td>\n      <td>1</td>\n      <td>Goddard</td>\n      <td>N</td>\n      <td>15.54</td>\n      <td>12.33</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1980</td>\n      <td>1</td>\n      <td>Goddard</td>\n      <td>N</td>\n      <td>14.96</td>\n      <td>11.85</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1981</td>\n      <td>1</td>\n      <td>Goddard</td>\n      <td>N</td>\n      <td>15.03</td>\n      <td>11.82</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1982</td>\n      <td>1</td>\n      <td>Goddard</td>\n      <td>N</td>\n      <td>15.26</td>\n      <td>12.11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1983</td>\n      <td>1</td>\n      <td>Goddard</td>\n      <td>N</td>\n      <td>15.10</td>\n      <td>11.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can compute the mean for that interval of time (1981 through 2010), before data cleaning.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nice.mean(numeric_only = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nyear      1996.000000\nmo           6.500000\nextent     -35.443066\narea       -37.921108\ndtype: float64\n```\n:::\n:::\n\n\nDid we receive a negative mean...?\n\n### Data visualisation to explore data\n\nDo you remember Seaborn? \nWe will use lmplot() function from Seaborn to explore linear relationship of different forms, e.g. relationship between the month of the year (variable) and extent (responses):\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Visualize the data\nx = ice.year\ny = ice.extent\nplt.scatter(x, y, color = 'red')\nplt.xlabel('Year')\nplt.ylabel('Extent')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nText(0, 0.5, 'Extent')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-5-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe detect some outlier or missing data.\nwe are going to use function np.unique and find the unique elements of an array.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n?np.unique\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint ('Different values in data_type field:', np.unique(ice.data_type.values))   # there is a -9999 value!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDifferent values in data_type field: ['-9999' 'Goddard' 'NRTSI-G']\n```\n:::\n:::\n\n\nLet's see what type of data we have, other than the ones printed above \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint (ice[(ice.data_type != 'Goddard')\n          & (ice.data_type != 'NRTSI-G')])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     year  mo data_type region  extent    area\n9    1988   1     -9999      N -9999.0 -9999.0\n397  1987  12     -9999      N -9999.0 -9999.0\n```\n:::\n:::\n\n\nData cleaning: we checked all the values and notice -9999 values in data_type field which should contain 'Goddard' or 'NRTSI-G' (some type of input dataset).\nSo we clean them by removing these instances  \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# We can easily clean the data now:\nice2 = ice[ice.data_type != '-9999']\nprint ('shape:', ice2.shape)\n# And repeat the plot\nx = ice2.year\ny = ice2.extent\nplt.scatter(x, y, color = 'red')\nplt.xlabel('Month')\nplt.ylabel('Extent')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (422, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nText(0, 0.5, 'Extent')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-9-output-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsns.lmplot(data = ice2, x = \"mo\", y = \"extent\")\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-10-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nAbove you can see ice extent data by month.\nYou can see a monthly fluctuation of the sea ice extent, as would be expected for the different seasons of the year. In order to run regression, and avoid this fluctuation we can normalize data. This will let us see the evolution of the extent over the years.\n\n### Normalization\n\nThe `lmplot()` function from the Seaborn module is intended for exploring linear relationships of different forms in multidimensional datesets. Input data must be in a Pandas DataFrame. To plot them, we provide the predictor and response variable names along with the dataset\n\n\n::: {.cell .column-page-right execution_count=10}\n``` {.python .cell-code}\nsns.lmplot(ice2, x = \"mo\", y = \"extent\", height = 5.2, aspect = 2);\n\n# Uncomment below to save the resulting plot.\n#plt.savefig(\"figs/CleanedByMonth.png\", dpi = 300, bbox_inches = 'tight')\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-11-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Compute the mean for each month.\ngrouped = ice2.groupby('mo')\nmonth_means = grouped.extent.mean()\nmonth_variances = grouped.extent.var()\nprint ('Means:', month_means)\nprint ('Variances:',month_variances)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMeans: mo\n1     14.479429\n2     15.298889\n3     15.491714\n4     14.766000\n5     13.396000\n6     11.860000\n7      9.601143\n8      7.122286\n9      6.404857\n10     8.809143\n11    10.964722\n12    13.059429\nName: extent, dtype: float64\nVariances: mo\n1     0.304906\n2     0.295804\n3     0.237209\n4     0.215378\n5     0.189901\n6     0.247918\n7     0.679175\n8     0.824577\n9     1.143902\n10    0.630361\n11    0.412511\n12    0.284870\nName: extent, dtype: float64\n```\n:::\n:::\n\n\nTo capture variation per month, we can compute mean for the i-th interval of time (using 1979-2014) and subtract it from the set of extent values for that month . This can be converted to a relative pecentage difference by dividing it by the total avareage (1979-2014) and multiplying by 100.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Data normalization\nfor i in range(12):\n    ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n    \nsns.lmplot(ice2 , x = \"mo\", y = \"extent\", height = 5.2, aspect = 2);\nplt.savefig(\"figs/IceExtentNormalizedByMonth.png\", dpi = 300, bbox_inches = 'tight')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n/var/folders/7v/zl9mv52s3ls94kntlt_l9ryh0000gq/T/ipykernel_40931/751478846.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ice2.extent[ice2.mo == i+1] = 100*(ice2.extent[ice2.mo == i+1] - month_means[i+1])/month_means.mean().copy()\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-14-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint ('mean:', ice2.extent.mean())\nprint ('var:', ice2.extent.var())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmean: -7.745252569896827e-16\nvar: 31.983239774968798\n```\n:::\n:::\n\n\nLet us consider the entire year\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsns.lmplot(ice2, x = \"year\", y = \"extent\", height = 5.2, aspect = 2);\nplt.savefig(\"figs/IceExtentAllMonthsByYearlmplot.png\", dpi = 300, bbox_inches = 'tight')\n```\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-16-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Pearson's correlation\n\nLet's calculate Pearson's correlation coefficient and the p-value for testing non-correlation.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nimport scipy.stats\nscipy.stats.pearsonr(ice2.year.values, ice2.extent.values)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nPearsonRResult(statistic=-0.8183500709897178, pvalue=4.4492318168687107e-103)\n```\n:::\n:::\n\n\n### Simple OLS\n\nWe can also compute the trend as a simple linear regression (OLS) and quantitatively evaluate it.\n\nFor that we use using **Scikit-learn**, library that provides a variety of both supervised and unsupervised machine learning techniques.\nScikit-learn provides an object-oriented interface centered around the concept of an Estimator. \nThe <code>Estimator.fit</code> method sets the state of the estimator based on the training data. Usually, the data is comprised of a two-dimensional numpy array $X$ of shape <code>(n_samples, n_predictors)</code> that holds the so-called feature matrix and a one-dimensional numpy array $\\textbf{y}$ that holds the responses. Some estimators allow the user to control the fitting behavior. \nFor example, the <code>sklearn.linear_model.LinearRegression</code> estimator allows the user to specify whether or not to fit an intercept term. This is done by setting the corresponding constructor arguments of the estimator object.\nDuring the fitting process, the state of the estimator is stored in instance attributes that have a trailing underscore ('_'). For example, the coefficients of a LinearRegression estimator are stored in the attribute coef_.\n\nEstimators that can generate predictions provide a ``Estimator.predict`` method. \nIn the case of regression, ``Estimator.predict`` will return the predicted regression values, $\\hat{\\textbf{y}}$. \n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\n\nest = LinearRegression(fit_intercept = True)\n\nx = ice2[['year']]\ny = ice2[['extent']]\n\nest.fit(x, y)\n\nprint(\"Coefficients:\", est.coef_)\nprint (\"Intercept:\", est.intercept_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficients: [[-0.45275459]]\nIntercept: [903.71640207]\n```\n:::\n:::\n\n\nWe can evaluate the model fitting by computing the mean squared error ($MSE$) and the coefficient of determination ($R^2$) of the model.\nThe coefficient $R^2$ is defined as $(1 - \\textbf{u}/\\textbf{v})$, where $\\textbf{u}$ is the residual sum of squares $\\sum (\\textbf{y} - \\hat{\\textbf{y}})^2$ and $\\textbf{v}$ is the regression sum of squares $\\sum (\\textbf{y} - \\bar{\\textbf{y}})^2$, where $\\bar{\\textbf{y}}$ is the mean.\nThe best possible score for $R^2$ is 1.0: lower values are worse.\nThese measures can provide a quantitative answer to the question we are facing: Is there a negative trend in the evolution of sea ice extent over recent years?\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn import metrics\n\n# Analysis for all months together.\nx = ice2[['year']]\ny = ice2[['extent']]\nmodel = LinearRegression()\nmodel.fit(x, y)\ny_hat = model.predict(x)\nplt.plot(x, y,'o', alpha = 0.5)\nplt.plot(x, y_hat, 'r', alpha = 0.5)\nplt.xlabel('year')\nplt.ylabel('extent (All months)')\nprint (\"MSE:\", metrics.mean_squared_error(y_hat, y))\nprint (\"R^2:\", metrics.r2_score(y_hat, y))\nprint (\"var:\", y.var())\nplt.savefig(\"figs/IceExtentLinearRegressionAllMonthsByYearPrediction.png\", dpi = 300, bbox_inches = 'tight')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMSE: 10.539131639803488\nR^2: 0.5067870382100226\nvar: extent    31.98324\ndtype: float64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-19-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can conclude that the data show a long-term negative trend in recent years.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Analysis for a particular month.\n#For January\njan = ice2[ice2.mo == 1];\n\nx = jan[['year']]\ny = jan[['extent']]\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\ny_hat = model.predict(x)\n\nplt.figure()\nplt.plot(x, y,'-o', alpha = 0.5)\nplt.plot(x, y_hat, 'r', alpha = 0.5)\nplt.xlabel('year')\nplt.ylabel('extent (January)')\n\nprint (\"MSE:\", metrics.mean_squared_error(y_hat, y))\nprint (\"R^2:\", metrics.r2_score(y_hat, y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMSE: 3.8395160752867565\nR^2: 0.7810636041396216\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](IM939_Lab_3_2_Linear_Regression_files/figure-pdf/cell-20-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can also estimate the extent value for 2025. For that we use the function predict of the model.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nX = np.array(2025) \ny_hat = model.predict(X.reshape(-1, 1))\nj = 1 # January\n# Original value (before normalization)\ny_hat = (y_hat*month_means.mean()/100) + month_means[j]\nprint (\"Prediction of extent for January 2025 (in millions of square km):\", y_hat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrediction of extent for January 2025 (in millions of square km): [[13.14449923]]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/u2071219/anaconda3/envs/IM939/lib/python3.11/site-packages/sklearn/base.py:464: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n  warnings.warn(\n```\n:::\n:::\n\n\nPrediction of extent for January 2025 (in millions of square km): [ 13.14449923]\n\n",
    "supporting": [
      "IM939_Lab_3_2_Linear_Regression_files/figure-pdf"
    ],
    "filters": []
  }
}